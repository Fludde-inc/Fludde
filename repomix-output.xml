This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
app/
  src/
    androidTest/
      java/
        com/
          example/
            fludde/
              ExampleInstrumentedTest.java
    main/
      java/
        com/
          example/
            fludde/
              adapters/
                BookChildAdapter.java
                MovieChildAdapter.java
                MusicChildAdapter.java
                PostAdapter.java
                SearchFragmentAdapter.java
              fragments/
                child/
                  BookChildFragment.java
                  MovieChildFragment.java
                  MusicChildFragment.java
                ComposeParentFragment.java
                HomeFragment.java
                PostFragment.java
                ProfileFragment.java
                SearchFragment.java
              model/
                BookDetails.java
                BooksContent.java
                ContentsClick.java
                MovieContent.java
                MusicContent.java
                PostUi.java
                UserUi.java
              utils/
                ApiUtils.java
                FragmentTransitions.java
                GlideExtensions.java
                Haptics.java
                InsetsUtils.java
                MockData.java
                SpacesItemDecoration.java
              LoginActivity.java
              MainActivity.java
              ParseApplication.java
              Post.java
              SignupActivity.java
              User.java
      res/
        anim/
          fade_in_fast.xml
          fade_out_fast.xml
          hold.xml
          press_ripple.xml
        animator/
          image_fade_in.xml
        color/
          card_bg_selector.xml
          card_stroke_selector.xml
          ripple_stateful.xml
        drawable-v24/
          ic_launcher_foreground.xml
        font/
          acme.xml
          black_han_sans.xml
        layout/
          activity_login.xml
          activity_main.xml
          activity_signup.xml
          content_post_img.xml
          fragment_child_book.xml
          fragment_child_movie.xml
          fragment_child_music.xml
          fragment_compose_parent.xml
          fragment_home.xml
          fragment_post.xml
          fragment_profile.xml
          fragment_search.xml
          include_inline_error.xml
          item_post_skeleton.xml
          item_post.xml
          music_content_post.xml
          user_profile.xml
          users_query.xml
        menu/
          menu_bottom_navigation.xml
        mipmap-anydpi-v26/
          ic_launcher_round.xml
          ic_launcher.xml
        values/
          anim.xml
          colors.xml
          dimens.xml
          ids.xml
          preloaded_fonts.xml
          shapes.xml
          strings.xml
          styles.xml
          themes.xml
        values-night/
          themes.xml
        values-v31/
          themes.xml
        xml/
          fileprovider.xml
      AndroidManifest.xml
    test/
      java/
        com/
          example/
            fludde/
              utils/
                ApiUtilsTest.java
              ExampleUnitTest.java
  .gitignore
  build.gradle
  proguard-rules.pro
config/
  gradle.properties
gradle/
  wrapper/
    gradle-wrapper.jar
    gradle-wrapper.properties
scripts/
  android-run.sh
.gitignore
.repomixignore
build.gradle
gradle.properties
gradlew
gradlew.bat
LICENSE
README.md
settings.gradle
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="app/src/main/java/com/example/fludde/model/PostUi.java">
package com.example.fludde.model;

/** Minimal UI model so the feed can render with or without Parse. */
public final class PostUi {
    private final String category;
    private final String description;
    private final String title;
    private final String review;
    private final String contentImageUrl;
    private final String userName;
    private final String userImageUrl;

    public PostUi(String category, String description, String title, String review,
                  String contentImageUrl, String userName, String userImageUrl) {
        this.category = nz(category);
        this.description = nz(description);
        this.title = nz(title);
        this.review = nz(review);
        this.contentImageUrl = nz(contentImageUrl);
        this.userName = nz(userName);
        this.userImageUrl = nz(userImageUrl);
    }

    public String getCategory() { return category; }
    public String getDescription() { return description; }
    public String getTitle() { return title; }
    public String getReview() { return review; }
    public String getContentImageUrl() { return contentImageUrl; }
    public String getUserName() { return userName; }
    public String getUserImageUrl() { return userImageUrl; }

    private static String nz(String s) { return s == null ? "" : s; }
}
</file>

<file path="app/src/main/java/com/example/fludde/model/UserUi.java">
package com.example.fludde.model;

/** Minimal UI model for search results so we don't depend on Parse in mock mode. */
public final class UserUi {
    private final String username;
    private final String imageUrl;

    public UserUi(String username, String imageUrl) {
        this.username = username == null ? "" : username;
        this.imageUrl = imageUrl == null ? "" : imageUrl;
    }

    public String getUsername() { return username; }
    public String getImageUrl() { return imageUrl; }
}
</file>

<file path="app/src/main/java/com/example/fludde/utils/MockData.java">
package com.example.fludde.utils;

import com.example.fludde.model.PostUi;
import com.example.fludde.model.UserUi;

import org.json.JSONArray;
import org.json.JSONObject;

import java.util.ArrayList;
import java.util.List;

/** Tiny factory of offline mock data for UI rendering. */
public final class MockData {
    private MockData() {}

    public static JSONObject tmdbTrendingJson() throws Exception {
        JSONArray results = new JSONArray();

        results.put(new JSONObject()
                .put("poster_path", "kqjL17yufvn9OVLyXYpvtyrFfak.jpg")
                .put("backdrop_path", "lNyLSOKMMeUPr1RsL4KcRuIXwHt.jpg")
                .put("title", "Mock: The Lost City")
                .put("overview", "Two brilliant adventurers embark on a mock journey."));

        results.put(new JSONObject()
                .put("poster_path", "6DrHO1jr3qVrViUO6s6kFiAGM7.jpg")
                .put("backdrop_path", "wcKFYIiVDvRURrzglV9kGu7fpfY.jpg")
                .put("title", "Mock: Night Patrol")
                .put("overview", "A stylish mystery that totally doesn't require an API key."));

        results.put(new JSONObject()
                .put("poster_path", "t6HIqrRAclMCA60NsSmeqe9RmNV.jpg")
                .put("backdrop_path", "s16H6tpK2utvwDtzZ8Qy4qm5Emw.jpg")
                .put("title", "Mock: Ocean Deep")
                .put("overview", "An epic dive into mock data excellence."));

        JSONObject payload = new JSONObject();
        payload.put("results", results);
        return payload;
    }

    public static JSONObject itunesSearchJson() throws Exception {
        JSONArray results = new JSONArray();

        results.put(new JSONObject()
                .put("name", "Mock Song One")
                .put("artistName", "The Mockers")
                .put("artworkUrl100", "https://picsum.photos/200?image=1069"));

        results.put(new JSONObject()
                .put("name", "Dreams in JSON")
                .put("artistName", "Null & Void")
                .put("artworkUrl100", "https://picsum.photos/200?image=1027"));

        results.put(new JSONObject()
                .put("name", "Offline Anthem")
                .put("artistName", "Airplane Mode")
                .put("artworkUrl100", "https://picsum.photos/200?image=1003"));

        JSONObject payload = new JSONObject();
        payload.put("results", results);
        return payload;
    }

    public static List<PostUi> mockPosts() {
        List<PostUi> list = new ArrayList<>();

        list.add(new PostUi(
                "Movie",
                "Buddy cops wreak havoc while being lovable.",
                "Bad Boys II",
                "A classic turn-your-brain-off action flick.",
                // poster
                "https://image.tmdb.org/t/p/w342/yCvB5fG5aEPqa1St7ihY6KEAsHD.jpg",
                // user
                "johndoe2016",
                "https://i.pravatar.cc/150?img=12"
        ));

        list.add(new PostUi(
                "Book",
                "A sweeping mock fantasy adventure across lands unknown.",
                "The Winds of JSON",
                "Compelling world-building; waiting for the next chapter…",
                "https://picsum.photos/342/513?image=1067",
                "mockreader",
                "https://i.pravatar.cc/150?img=3"
        ));

        list.add(new PostUi(
                "Music",
                "A synthwave album that makes you want to code.",
                "Neon Arrays",
                "Track 3 slaps. Would recommend for late-night sessions.",
                "https://picsum.photos/342/513?image=1039",
                "airplanemode",
                "https://i.pravatar.cc/150?img=20"
        ));

        return list;
    }

    public static List<UserUi> mockUsers(String query) {
        String q = query == null ? "" : query.toLowerCase();
        List<UserUi> base = new ArrayList<>();
        base.add(new UserUi("johndoe2016", "https://i.pravatar.cc/150?img=12"));
        base.add(new UserUi("janedoe", "https://i.pravatar.cc/150?img=5"));
        base.add(new UserUi("mockreader", "https://i.pravatar.cc/150?img=3"));
        base.add(new UserUi("airplanemode", "https://i.pravatar.cc/150?img=20"));
        base.add(new UserUi("nullpointer", "https://i.pravatar.cc/150?img=8"));

        if (q.isEmpty()) return base;
        List<UserUi> filtered = new ArrayList<>();
        for (UserUi u : base) {
            if (u.getUsername().toLowerCase().contains(q)) filtered.add(u);
        }
        return filtered;
    }
}
</file>

<file path="app/src/main/java/com/example/fludde/model/BookDetails.java">
package com.example.fludde.model;

import android.widget.Button;
import android.widget.ImageView;
import android.widget.TextView;

import java.util.ArrayList;

public class BookDetails {

    // creating variables for strings,text view, image views and button.

    String title, subtitle, publisher, publishedDate, description, thumbnail, previewLink, infoLink, buyLink;

    int pageCount;

    private ArrayList<String> authors;

    TextView titleTV, subtitleTV, publisherTV, descTV, pageTV, publishDateTV;
    Button previewBtn, buyBtn;

    private ImageView bookIV;



}
</file>

<file path="app/src/main/java/com/example/fludde/model/ContentsClick.java">
package com.example.fludde.model;

public interface ContentsClick {

     void OnContentClick(int pos);
}
</file>

<file path="app/src/main/java/com/example/fludde/utils/FragmentTransitions.java">
package com.example.fludde.utils;

import androidx.annotation.AnimRes;
import androidx.fragment.app.FragmentTransaction;

import com.example.fludde.R;

/** Applies subtle, fast transitions when swapping fragments/tabs. */
public final class FragmentTransitions {
    private FragmentTransitions(){}

    public static void applyFastFade(FragmentTransaction tx) {
        if (tx == null) return;
        tx.setCustomAnimations(
                R.anim.fade_in_fast,   // enter
                R.anim.fade_out_fast,  // exit
                R.anim.fade_in_fast,   // pop enter
                R.anim.fade_out_fast   // pop exit
        );
    }
}
</file>

<file path="app/src/main/java/com/example/fludde/utils/GlideExtensions.java">
package com.example.fludde.utils;

import android.widget.ImageView;

import com.bumptech.glide.Glide;
import com.bumptech.glide.load.resource.drawable.DrawableTransitionOptions;
import com.bumptech.glide.request.RequestOptions;
import com.bumptech.glide.load.resource.bitmap.CenterCrop;
import com.example.fludde.R;

/** Centralized image loading with fade-in to avoid pop-in. */
public final class GlideExtensions {
    private GlideExtensions() {}

    public static void loadPoster(ImageView target, String url) {
        if (target == null) return;
        Glide.with(target.getContext())
                .load(url)
                .apply(new RequestOptions().transform(new CenterCrop()))
                .placeholder(R.drawable.placeholder_poster)
                .error(R.drawable.placeholder_poster)
                .transition(DrawableTransitionOptions.withCrossFade(140)) // match fast anim
                .into(target);
    }

    public static void loadSquare(ImageView target, String url) {
        if (target == null) return;
        Glide.with(target.getContext())
                .load(url)
                .apply(new RequestOptions().transform(new CenterCrop()))
                .placeholder(R.drawable.placeholder_square)
                .error(R.drawable.placeholder_square)
                .transition(DrawableTransitionOptions.withCrossFade(140))
                .into(target);
    }

    public static void loadAvatar(ImageView target, String urlOrNull) {
        if (target == null) return;
        Glide.with(target.getContext())
                .load(urlOrNull)
                .apply(new RequestOptions().transform(new CenterCrop()))
                .placeholder(R.drawable.placeholder_avatar)
                .error(R.drawable.placeholder_avatar)
                .transition(DrawableTransitionOptions.withCrossFade(140))
                .into(target);
    }
}
</file>

<file path="app/src/main/java/com/example/fludde/utils/Haptics.java">
package com.example.fludde.utils;

import android.content.Context;
import android.os.Build;
import android.view.HapticFeedbackConstants;
import android.view.View;

/** Small helpers to provide discoverable, consistent haptics. */
public final class Haptics {
    private Haptics() {}

    /** Light haptic for long-press (discoverability). */
    public static void longPress(View v) {
        if (v == null) return;
        v.performHapticFeedback(HapticFeedbackConstants.LONG_PRESS);
    }

    /** Subtle confirmation haptic (e.g., successful toggle). */
    public static void tick(View v) {
        if (v == null) return;
        if (Build.VERSION.SDK_INT >= 21) {
            v.performHapticFeedback(HapticFeedbackConstants.VIRTUAL_KEY);
        }
    }

    /** Error/denied haptic. */
    public static void error(View v) {
        if (v == null) return;
        v.performHapticFeedback(HapticFeedbackConstants.REJECT);
    }
}
</file>

<file path="app/src/main/java/com/example/fludde/utils/InsetsUtils.java">
package com.example.fludde.utils;

import android.app.Activity;
import android.view.View;

import androidx.core.graphics.Insets;
import androidx.core.view.ViewCompat;
import androidx.core.view.WindowCompat;
import androidx.core.view.WindowInsetsCompat;

import com.google.android.material.bottomnavigation.BottomNavigationView;

/**
 * Centralized, duplicate-free system bar inset handling.
 * - Enables edge-to-edge on the window.
 * - Pads the fragment container by status bar + nav bar insets.
 * - Adds bottom inset to BottomNavigationView so it sits above the gesture area.
 * - Accounts for the BottomNavigationView's measured height so content isn't hidden.
 */
public final class InsetsUtils {

    private InsetsUtils() {}

    private static final class Padding {
        final int l, t, r, b;
        Padding(View v) { l = v.getPaddingLeft(); t = v.getPaddingTop(); r = v.getPaddingRight(); b = v.getPaddingBottom(); }
    }

    public static void applyEdgeToEdge(Activity activity, View container, BottomNavigationView bottomNav) {
        // Tell the system we're handling insets ourselves.
        WindowCompat.setDecorFitsSystemWindows(activity.getWindow(), false);

        final Padding containerBase = new Padding(container);
        final Padding navBase = new Padding(bottomNav);

        ViewCompat.setOnApplyWindowInsetsListener(container, (v, insets) -> {
            Insets sysBars = insets.getInsets(WindowInsetsCompat.Type.systemBars());
            // Add status bar/top insets and left/right for cutouts.
            int top = containerBase.t + sysBars.top;
            int left = containerBase.l + sysBars.left;
            int right = containerBase.r + sysBars.right;
            // Reserve space for both the system navigation area and the bottom nav view height.
            int bottom = containerBase.b + sysBars.bottom + bottomNav.getHeight();
            v.setPadding(left, top, right, bottom);
            return insets;
        });

        ViewCompat.setOnApplyWindowInsetsListener(bottomNav, (v, insets) -> {
            Insets sysBars = insets.getInsets(WindowInsetsCompat.Type.systemBars());
            int left = navBase.l + sysBars.left;
            int right = navBase.r + sysBars.right;
            int bottom = navBase.b + sysBars.bottom;
            v.setPadding(left, navBase.t, right, bottom);
            return insets;
        });

        // If the bottom nav's height changes (first layout, configuration change), re-dispatch insets.
        bottomNav.addOnLayoutChangeListener((v, left, top, right, bottom, oldLeft, oldTop, oldRight, oldBottom) ->
                ViewCompat.requestApplyInsets(container));

        // Kick the first dispatch.
        activity.getWindow().getDecorView().post(() -> {
            ViewCompat.requestApplyInsets(container);
            ViewCompat.requestApplyInsets(bottomNav);
        });
    }
}
</file>

<file path="app/src/main/java/com/example/fludde/utils/SpacesItemDecoration.java">
package com.example.fludde.utils;

import android.graphics.Rect;
import android.view.View;

import androidx.annotation.NonNull;
import androidx.recyclerview.widget.RecyclerView;

/**
 * Simple horizontal spacing between carousel cards.
 * Pair with RecyclerView edge padding + clipToPadding(false) to allow peeking items.
 */
public class SpacesItemDecoration extends RecyclerView.ItemDecoration {
    private final int space;

    public SpacesItemDecoration(int space) { this.space = space; }

    @Override
    public void getItemOffsets(@NonNull Rect outRect, @NonNull View view,
                               @NonNull RecyclerView parent, @NonNull RecyclerView.State state) {
        int pos = parent.getChildAdapterPosition(view);
        if (pos == RecyclerView.NO_POSITION) return;
        // Add space to the end of each item; edge padding on the RecyclerView handles left/right peeks.
        outRect.right = space;
    }
}
</file>

<file path="app/src/main/java/com/example/fludde/User.java">
package com.example.fludde;

import com.parse.ParseClassName;
import com.parse.ParseFile;
import com.parse.ParseObject;
import com.parse.ParseUser;

//User class has column image therefore need method to retrieve since its none standard
@ParseClassName("_User")
public class User extends ParseUser {

    public static final String KEY_IMAGE = "image";
    public static final String KEY_USER = "user";
    public static final String KEY_EMAIL = "email";


    public ParseFile getImage() {
        return getParseFile(KEY_IMAGE);
    }
    public ParseUser getUser() {
        return getParseUser(KEY_USER);
    }
    public String getEmail(){return getString(KEY_EMAIL);}
    public void setImage(ParseFile parseFile){
        put(KEY_IMAGE, parseFile);
    }


}
</file>

<file path="app/src/main/res/anim/fade_in_fast.xml">
<?xml version="1.0" encoding="utf-8"?>
<alpha xmlns:android="http://schemas.android.com/apk/res/android"
    android:duration="@integer/anim_fast_duration"
    android:fromAlpha="0.0"
    android:toAlpha="1.0"
    android:interpolator="@android:interpolator/linear_out_slow_in"/>
</file>

<file path="app/src/main/res/anim/fade_out_fast.xml">
<?xml version="1.0" encoding="utf-8"?>
<alpha xmlns:android="http://schemas.android.com/apk/res/android"
    android:duration="@integer/anim_fast_duration"
    android:fromAlpha="1.0"
    android:toAlpha="0.0"
    android:interpolator="@android:interpolator/fast_out_linear_in"/>
</file>

<file path="app/src/main/res/anim/hold.xml">
<?xml version="1.0" encoding="utf-8"?>
<alpha xmlns:android="http://schemas.android.com/apk/res/android"
    android:duration="@integer/anim_fast_duration"
    android:fromAlpha="1.0"
    android:toAlpha="1.0"/>
</file>

<file path="app/src/main/res/anim/press_ripple.xml">
<?xml version="1.0" encoding="utf-8"?>
<ripple xmlns:android="http://schemas.android.com/apk/res/android"
    android:color="?attr/colorPrimary"
    android:radius="24dp"> <!-- feels present on light/dark -->
</ripple>
</file>

<file path="app/src/main/res/animator/image_fade_in.xml">
<?xml version="1.0" encoding="utf-8"?>
<objectAnimator xmlns:android="http://schemas.android.com/apk/res/android"
    android:propertyName="alpha"
    android:valueFrom="0"
    android:valueTo="1"
    android:valueType="floatType"
    android:duration="@integer/anim_fast_duration"
    android:interpolator="@android:interpolator/linear_out_slow_in"/>
</file>

<file path="app/src/main/res/color/card_stroke_selector.xml">
<?xml version="1.0" encoding="utf-8"?>
<selector xmlns:android="http://schemas.android.com/apk/res/android">
    <!-- Selected/focused → primary stroke -->
    <item android:state_checked="true" android:color="?attr/colorPrimary"/>
    <item android:state_focused="true" android:color="?attr/colorPrimary"/>
    <!-- Default -->
    <item android:color="?attr/colorOutlineVariant"/>
</selector>
</file>

<file path="app/src/main/res/color/ripple_stateful.xml">
<?xml version="1.0" encoding="utf-8"?>
<selector xmlns:android="http://schemas.android.com/apk/res/android">
    <!-- Disabled: reduce contrast but maintain legibility -->
    <item android:state_enabled="false" android:color="?attr/colorOutlineVariant"/>
    <!-- Default ripple tint -->
    <item android:color="?attr/colorPrimary"/>
</selector>
</file>

<file path="app/src/main/res/drawable-v24/ic_launcher_foreground.xml">
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:aapt="http://schemas.android.com/aapt"
    android:width="108dp"
    android:height="108dp"
    android:viewportWidth="108"
    android:viewportHeight="108">
    <path android:pathData="M31,63.928c0,0 6.4,-11 12.1,-13.1c7.2,-2.6 26,-1.4 26,-1.4l38.1,38.1L107,108.928l-32,-1L31,63.928z">
        <aapt:attr name="android:fillColor">
            <gradient
                android:endX="85.84757"
                android:endY="92.4963"
                android:startX="42.9492"
                android:startY="49.59793"
                android:type="linear">
                <item
                    android:color="#44000000"
                    android:offset="0.0" />
                <item
                    android:color="#00000000"
                    android:offset="1.0" />
            </gradient>
        </aapt:attr>
    </path>
    <path
        android:fillColor="#FFFFFF"
        android:fillType="nonZero"
        android:pathData="M65.3,45.828l3.8,-6.6c0.2,-0.4 0.1,-0.9 -0.3,-1.1c-0.4,-0.2 -0.9,-0.1 -1.1,0.3l-3.9,6.7c-6.3,-2.8 -13.4,-2.8 -19.7,0l-3.9,-6.7c-0.2,-0.4 -0.7,-0.5 -1.1,-0.3C38.8,38.328 38.7,38.828 38.9,39.228l3.8,6.6C36.2,49.428 31.7,56.028 31,63.928h46C76.3,56.028 71.8,49.428 65.3,45.828zM43.4,57.328c-0.8,0 -1.5,-0.5 -1.8,-1.2c-0.3,-0.7 -0.1,-1.5 0.4,-2.1c0.5,-0.5 1.4,-0.7 2.1,-0.4c0.7,0.3 1.2,1 1.2,1.8C45.3,56.528 44.5,57.328 43.4,57.328L43.4,57.328zM64.6,57.328c-0.8,0 -1.5,-0.5 -1.8,-1.2s-0.1,-1.5 0.4,-2.1c0.5,-0.5 1.4,-0.7 2.1,-0.4c0.7,0.3 1.2,1 1.2,1.8C66.5,56.528 65.6,57.328 64.6,57.328L64.6,57.328z"
        android:strokeWidth="1"
        android:strokeColor="#00000000" />
</vector>
</file>

<file path="app/src/main/res/font/acme.xml">
<?xml version="1.0" encoding="utf-8"?>
<font-family xmlns:app="http://schemas.android.com/apk/res-auto"
        app:fontProviderAuthority="com.google.android.gms.fonts"
        app:fontProviderPackage="com.google.android.gms"
        app:fontProviderQuery="Acme"
        app:fontProviderCerts="@array/com_google_android_gms_fonts_certs">
</font-family>
</file>

<file path="app/src/main/res/font/black_han_sans.xml">
<?xml version="1.0" encoding="utf-8"?>
<font-family xmlns:app="http://schemas.android.com/apk/res-auto"
        app:fontProviderAuthority="com.google.android.gms.fonts"
        app:fontProviderPackage="com.google.android.gms"
        app:fontProviderQuery="Black Han Sans"
        app:fontProviderCerts="@array/com_google_android_gms_fonts_certs">
</font-family>
</file>

<file path="app/src/main/res/layout/include_inline_error.xml">
<?xml version="1.0" encoding="utf-8"?>
<com.google.android.material.card.MaterialCardView
    xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    android:visibility="gone"
    android:layout_margin="@dimen/space_8"
    app:cardUseCompatPadding="true">

    <LinearLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:padding="@dimen/space_16"
        android:orientation="horizontal"
        android:gravity="center_vertical">

        <TextView
            android:id="@+id/tvErrorMessage"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_weight="1"
            android:textAppearance="@style/TextAppearance.Material3.BodyMedium"
            android:maxLines="2"
            android:ellipsize="end"
            android:text="@string/error_generic" />

        <com.google.android.material.button.MaterialButton
            android:id="@+id/btnRetry"
            style="@style/Widget.Fludde.Button.Text"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="@string/action_retry" />
    </LinearLayout>
</com.google.android.material.card.MaterialCardView>
</file>

<file path="app/src/main/res/mipmap-anydpi-v26/ic_launcher_round.xml">
<?xml version="1.0" encoding="utf-8"?>
<adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">
    <background android:drawable="@drawable/ic_launcher_background" />
    <foreground android:drawable="@drawable/ic_launcher_foreground" />
</adaptive-icon>
</file>

<file path="app/src/main/res/values/anim.xml">
<?xml version="1.0" encoding="utf-8"?>
<resources>
    <!-- Very subtle (100–160ms) fades/scales for fragment/tab transitions -->
    <item name="anim_fast_duration" type="integer">140</item>
</resources>
</file>

<file path="app/src/main/res/values/ids.xml">
<?xml version="1.0" encoding="utf-8"?>
<resources>
    <item name="cvLayout" type="id" />
</resources>
</file>

<file path="app/src/main/res/values/shapes.xml">
<resources>
    <!-- Rounded, consistent card/button chips per the design plan -->
    <style name="ShapeAppearance.Fludde.Medium" parent="ShapeAppearance.Material3.Corner.Medium">
        <item name="cornerFamily">rounded</item>
        <item name="cornerSize">16dp</item>
    </style>

    <style name="ShapeAppearance.Fludde.Large" parent="ShapeAppearance.Material3.Corner.Large">
        <item name="cornerFamily">rounded</item>
        <item name="cornerSize">20dp</item>
    </style>

    <!-- NEW: Circular shape for avatars -->
    <style name="ShapeAppearance.Fludde.Circular" parent="ShapeAppearance.Material3.Corner.Full">
        <!-- Full (50%) radius yields a circle for square views -->
        <item name="cornerFamily">rounded</item>
        <item name="cornerSize">50%</item>
    </style>
</resources>
</file>

<file path="app/src/main/res/xml/fileprovider.xml">
<?xml version="1.0" encoding="utf-8"?>
<paths xmlns:android="http://schemas.android.com/apk/res/android">
    <external-files-path name="my_images" path="Pictures" />
</paths>
</file>

<file path="app/.gitignore">
/build
</file>

<file path="app/proguard-rules.pro">
# Add project specific ProGuard rules here.
# You can control the set of applied configuration files using the
# proguardFiles setting in build.gradle.
#
# For more details, see
#   http://developer.android.com/guide/developing/tools/proguard.html

# If your project uses WebView with JS, uncomment the following
# and specify the fully qualified class name to the JavaScript interface
# class:
#-keepclassmembers class fqcn.of.javascript.interface.for.webview {
#   public *;
#}

# Uncomment this to preserve the line number information for
# debugging stack traces.
#-keepattributes SourceFile,LineNumberTable

# If you keep the line number information, uncomment this to
# hide the original source file name.
#-renamesourcefileattribute SourceFile
</file>

<file path="scripts/android-run.sh">
#!/usr/bin/env bash
set -Eeuo pipefail

# ------------------------------------------------------------
# Fludde: build + install the debug APK onto an Android emulator
# then launch the app deterministically with Activity Manager.
# Falls back to a *forced* Monkey app-switch if needed.
# ------------------------------------------------------------
# Usage:
#   ./scripts/android-run.sh                 # uses default APK path & best AVD
#   FLUDDE_AVD=Pixel_7_API_35 ./scripts/android-run.sh
#   ./scripts/android-run.sh path/to/your.apk
# ------------------------------------------------------------

APP_ID="com.example.fludde"
MAIN_ACTIVITY=".MainActivity"
APK="${1:-app/build/outputs/apk/debug/app-debug.apk}"

log() { printf "👉 %s\n" "$*"; }
ok()  { printf "✅ %s\n" "$*"; }
warn(){ printf "⚠️  %s\n" "$*" >&2; }
err() { printf "❌ %s\n" "$*" >&2; }

require_cmd() {
  if ! command -v "$1" >/dev/null 2>&1; then
    err "Missing command: $1 (check your Android SDK install and PATH)"
    exit 1
  fi
}

require_cmd adb
require_cmd emulator

if [[ ! -f "$APK" ]]; then
  err "APK not found at: $APK"
  log "Try: ./gradlew :app:assembleDebug"
  exit 1
fi

pick_avd() {
  local preferred="${FLUDDE_AVD:-}"
  local list
  if ! list="$(emulator -list-avds)"; then
    err "Failed to list AVDs. Create one in Android Studio or with avdmanager."
    exit 1
  fi

  if [[ -n "$preferred" ]]; then
    if grep -Fxq "$preferred" <<<"$list"; then
      echo "$preferred"; return
    else
      err "Requested AVD '$preferred' not found. Available:"
      echo "$list"
      exit 1
    fi
  fi

  if grep -Fxq "Pixel_7_API_35" <<<"$list"; then echo "Pixel_7_API_35"; return; fi
  if grep -Fxq "fluddeApi35"   <<<"$list"; then echo "fluddeApi35";   return; fi

  local first
  first="$(head -n 1 <<<"$list" || true)"
  if [[ -z "$first" ]]; then
    err "No AVDs exist yet."
    cat <<'EOF'
Create an AVD, e.g.:
  sdkmanager --install "platform-tools" "emulator" "platforms;android-35" "system-images;android-35;google_apis;x86_64"
  echo "no" | avdmanager create avd -n fluddeApi35 -k "system-images;android-35;google_apis;x86_64" --device "pixel_7"
EOF
    exit 1
  fi
  echo "$first"
}

avd_name="$(pick_avd)"
ok "Using AVD: $avd_name"

adb_start() {
  adb start-server >/dev/null 2>&1 || true
}

any_device_online() {
  adb devices | awk 'NR>1 && $2=="device"{print $1}' | head -n1
}

start_emulator_if_needed() {
  local dev
  dev="$(any_device_online || true)"
  if [[ -n "$dev" ]]; then
    ok "Device already online: $dev"
    return
  fi

  log "Starting emulator: $avd_name"
  nohup emulator -avd "$avd_name" -no-boot-anim -netdelay none -netspeed full >/dev/null 2>&1 &
  adb wait-for-device
}

wait_for_boot_complete() {
  log "Waiting for Android to finish booting…"
  local boot=""
  until boot="$(adb shell getprop sys.boot_completed 2>/dev/null | tr -d '\r')"; [[ "$boot" == "1" ]]; do
    sleep 1
  done
  until adb shell pm list packages >/dev/null 2>&1; do sleep 1; done
  adb shell input keyevent 82 || true
  ok "Boot complete."
}

install_apk() {
  log "Installing APK: $APK"
  adb install -r -t "$APK" >/dev/null
  ok "Installed."
}

# Deterministic launch with Activity Manager (recommended)
launch_with_am() {
  log "Launching with am start: $APP_ID/$MAIN_ACTIVITY"
  if adb shell am start -n "$APP_ID/$MAIN_ACTIVITY" >/dev/null 2>&1; then
    ok "App launched via am."
    return 0
  fi
  return 1
}

# Fallback: force Monkey to do an app-switch as the *first* event
launch_with_monkey_forced() {
  log "Fallback: launching with Monkey (forced app-switch)…"
  # Force 100% app-switch so the very first event is a launch.
  # Monkey often returns non-zero; treat that as a warning, not a hard fail.
  if adb shell monkey -p "$APP_ID" -c android.intent.category.LAUNCHER --pct-appswitch 100 -v 1 >/dev/null 2>&1; then
    ok "Monkey sent app-switch event."
  else
    warn "Monkey returned non-zero (common). If am launch worked, you can ignore this."
  fi
}

launch_app() {
  if launch_with_am; then
    return
  fi
  launch_with_monkey_forced
}

# ---- Run it all ----
adb_start
start_emulator_if_needed
wait_for_boot_complete
install_apk
launch_app

ok "All done 🎉"
</file>

<file path="LICENSE">
MIT License

Copyright (c) 2024 Fludde-inc

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
</file>

<file path="app/src/androidTest/java/com/example/fludde/ExampleInstrumentedTest.java">
package com.example.fludde;

import android.content.Context;

import androidx.test.platform.app.InstrumentationRegistry;
import androidx.test.ext.junit.runners.AndroidJUnit4;

import org.junit.Test;
import org.junit.runner.RunWith;

import static org.junit.Assert.*;

@RunWith(AndroidJUnit4.class)
public class ExampleInstrumentedTest {
    @Test
    public void useAppContext() {
        Context appContext = InstrumentationRegistry.getInstrumentation().getTargetContext();
        assertEquals("com.example.fludde", appContext.getPackageName());
    }
}
</file>

<file path="app/src/main/java/com/example/fludde/adapters/BookChildAdapter.java">
package com.example.fludde.adapters;

import android.content.Context;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.TextView;

import androidx.annotation.NonNull;
import androidx.recyclerview.widget.RecyclerView;

import com.example.fludde.R;
import com.example.fludde.model.BooksContent;
import com.example.fludde.utils.GlideExtensions;
import com.example.fludde.utils.Haptics;
import com.google.android.material.card.MaterialCardView;

import java.util.List;

public class BookChildAdapter extends RecyclerView.Adapter<BookChildAdapter.BookViewHolder> {

    private final Context context;
    private final List<BooksContent> items;
    private final OnBookContentListener listener;

    private int selectedPos = RecyclerView.NO_POSITION;

    public BookChildAdapter(@NonNull Context context,
                            @NonNull List<BooksContent> items,
                            @NonNull OnBookContentListener listener) {
        this.context = context;
        this.items = items;
        this.listener = listener;
        setHasStableIds(true);
    }

    @Override
    public long getItemId(int position) {
        String key = items.get(position).getTitle() + position;
        return key.hashCode();
    }

    @NonNull
    @Override
    public BookViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {
        View v = LayoutInflater.from(context).inflate(R.layout.content_post_img, parent, false);
        v.setBackgroundResource(R.drawable.list_item_bg);
        return new BookViewHolder(v);
    }

    @Override
    public void onBindViewHolder(@NonNull BookViewHolder holder, int position) {
        holder.bind(items.get(position), position == selectedPos);
    }

    @Override
    public int getItemCount() { return items.size(); }

    class BookViewHolder extends RecyclerView.ViewHolder implements View.OnClickListener, View.OnLongClickListener {
        ImageView ivContentImage;
        TextView tvImageContentTitle;

        BookViewHolder(@NonNull View itemView) {
            super(itemView);
            ivContentImage = itemView.findViewById(R.id.ivContentImage);
            tvImageContentTitle = itemView.findViewById(R.id.tvImageContentTitle);
            itemView.setOnClickListener(this);
            itemView.setOnLongClickListener(this);
        }

        void bind(BooksContent data, boolean selected) {
            tvImageContentTitle.setText(data.getTitle());
            GlideExtensions.loadPoster(ivContentImage, data.getImageURL());

            MaterialCardView card = (MaterialCardView) itemView;
            card.setChecked(selected);
            itemView.setSelected(selected);
        }

        @Override
        public void onClick(View v) {
            int pos = getBindingAdapterPosition();
            if (pos == RecyclerView.NO_POSITION) return;
            int old = selectedPos;
            selectedPos = pos;
            if (old != RecyclerView.NO_POSITION) notifyItemChanged(old);
            notifyItemChanged(selectedPos);

            Haptics.tick(v);
            if (listener != null) listener.onBookContentClick(pos);
        }

        @Override
        public boolean onLongClick(View v) {
            int pos = getBindingAdapterPosition();
            if (pos != RecyclerView.NO_POSITION && listener != null) {
                Haptics.longPress(v);
                listener.onBookContentLongClick(pos);
                return true;
            }
            return false;
        }
    }

    public interface OnBookContentListener {
        void onBookContentClick(int position);
        void onBookContentLongClick(int position);
    }
}
</file>

<file path="app/src/main/java/com/example/fludde/adapters/MovieChildAdapter.java">
package com.example.fludde.adapters;

import android.content.Context;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.TextView;

import androidx.annotation.NonNull;
import androidx.recyclerview.widget.RecyclerView;

import com.example.fludde.R;
import com.example.fludde.model.MovieContent;
import com.example.fludde.utils.GlideExtensions;
import com.example.fludde.utils.Haptics;
import com.google.android.material.card.MaterialCardView;

import java.util.List;

public class MovieChildAdapter extends RecyclerView.Adapter<MovieChildAdapter.MovieViewHolder> {

    private final Context context;
    private final List<MovieContent> items;
    private final OnMovieContentListener listener;

    // single selection support
    private int selectedPos = RecyclerView.NO_POSITION;

    public MovieChildAdapter(@NonNull Context context,
                             @NonNull List<MovieContent> items,
                             @NonNull OnMovieContentListener listener) {
        this.context = context;
        this.items = items;
        this.listener = listener;
        setHasStableIds(true);
    }

    @Override
    public long getItemId(int position) {
        String key = items.get(position).getTitle() + position;
        return key.hashCode();
    }

    @NonNull
    @Override
    public MovieViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {
        View v = LayoutInflater.from(context).inflate(R.layout.content_post_img, parent, false);
        v.setBackgroundResource(R.drawable.list_item_bg);
        return new MovieViewHolder(v);
    }

    @Override
    public void onBindViewHolder(@NonNull MovieViewHolder holder, int position) {
        holder.bind(items.get(position), position == selectedPos);
    }

    @Override
    public int getItemCount() { return items.size(); }

    class MovieViewHolder extends RecyclerView.ViewHolder implements View.OnClickListener, View.OnLongClickListener {
        ImageView ivContentImage;
        TextView tvImageContentTitle;

        MovieViewHolder(@NonNull View itemView) {
            super(itemView);
            ivContentImage = itemView.findViewById(R.id.ivContentImage);
            tvImageContentTitle = itemView.findViewById(R.id.tvImageContentTitle);
            itemView.setOnClickListener(this);
            itemView.setOnLongClickListener(this);
        }

        void bind(MovieContent data, boolean selected) {
            tvImageContentTitle.setText(data.getTitle());
            GlideExtensions.loadPoster(ivContentImage, data.getImagePath());

            MaterialCardView card = (MaterialCardView) itemView;
            card.setChecked(selected);
            itemView.setSelected(selected);
        }

        @Override
        public void onClick(View v) {
            int pos = getBindingAdapterPosition();
            if (pos == RecyclerView.NO_POSITION) return;

            int old = selectedPos;
            selectedPos = pos;

            if (old != RecyclerView.NO_POSITION) notifyItemChanged(old);
            notifyItemChanged(selectedPos);

            Haptics.tick(v); // subtle feedback on selection
            if (listener != null) listener.onMovieContentClick(pos);
        }

        @Override
        public boolean onLongClick(View v) {
            int pos = getBindingAdapterPosition();
            if (pos != RecyclerView.NO_POSITION && listener != null) {
                Haptics.longPress(v); // discoverable haptic
                listener.onMovieContentLongClick(pos);
                return true;
            }
            return false;
        }
    }

    public interface OnMovieContentListener {
        void onMovieContentClick(int position);
        void onMovieContentLongClick(int position);
    }
}
</file>

<file path="app/src/main/java/com/example/fludde/adapters/SearchFragmentAdapter.java">
package com.example.fludde.adapters;

import android.content.Context;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;

import com.bumptech.glide.Glide;
import com.bumptech.glide.load.resource.drawable.DrawableTransitionOptions;
import com.bumptech.glide.request.RequestOptions;
import com.bumptech.glide.load.resource.bitmap.CenterCrop;
import com.example.fludde.R;
import android.widget.ImageView;
import android.widget.TextView;

import androidx.annotation.NonNull;
import androidx.recyclerview.widget.RecyclerView;

import com.example.fludde.model.UserUi;

import java.util.List;

public class SearchFragmentAdapter extends RecyclerView.Adapter<SearchFragmentAdapter.UserViewHolder> {
    private final Context context;
    private final List<UserUi> users;

    public SearchFragmentAdapter(Context context, List<UserUi> users) {
        this.context = context;
        this.users = users;
        setHasStableIds(true);
    }

    @Override
    public long getItemId(int position) {
        String key = users.get(position).getUsername() + "|" + position;
        return key.hashCode();
    }

    @NonNull
    @Override
    public UserViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {
        View v = LayoutInflater.from(context).inflate(R.layout.users_query, parent, false);
        return new UserViewHolder(v);
    }

    @Override
    public void onBindViewHolder(@NonNull UserViewHolder holder, int position) {
        holder.bind(users.get(position));
    }

    @Override
    public int getItemCount() { return users.size(); }

    class UserViewHolder extends RecyclerView.ViewHolder{
        private final TextView tvUName;
        private final ImageView ivUserImage;

        public UserViewHolder(@NonNull View itemView) {
            super(itemView);
            tvUName = itemView.findViewById(R.id.tvUName);
            ivUserImage = itemView.findViewById(R.id.ivUserImage);
        }

        public void bind(UserUi user) {
            tvUName.setText(user.getUsername());

            Glide.with(context)
                .load(user.getImageUrl().isEmpty() ? null : user.getImageUrl())
                .apply(new RequestOptions().transform(new CenterCrop()))
                .placeholder(R.drawable.placeholder_avatar)
                .error(R.drawable.placeholder_avatar)
                .transition(DrawableTransitionOptions.withCrossFade())
                .into(ivUserImage);
        }
    }
}
</file>

<file path="app/src/main/java/com/example/fludde/fragments/ComposeParentFragment.java">
package com.example.fludde.fragments;

import android.os.Bundle;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.view.WindowManager;
import android.widget.ArrayAdapter;
import android.widget.Toast;

import androidx.annotation.Nullable;
import androidx.fragment.app.Fragment;
import androidx.fragment.app.FragmentTransaction;

import com.example.fludde.R;
import com.example.fludde.fragments.child.BookChildFragment;
import com.example.fludde.fragments.child.MovieChildFragment;
import com.example.fludde.fragments.child.MusicChildFragment;
import com.example.fludde.utils.FragmentTransitions;
import com.google.android.material.textfield.MaterialAutoCompleteTextView;

/**
 * Parent "Compose" fragment:
 * - Subtle fast transitions between child tabs.
 * - Exposed dropdown selection for Movies / Books / Music.
 * - Child lists sized with stable item dimensions (see dimens).
 */
public class ComposeParentFragment extends Fragment {
    private MaterialAutoCompleteTextView actCategory;
    private final String[] dropDownItems = new String[]{"Movies", "Books", "Music"};

    public ComposeParentFragment() {}

    public static ComposeParentFragment newInstance(String p1, String p2) {
        ComposeParentFragment fragment = new ComposeParentFragment();
        Bundle args = new Bundle();
        args.putString("param1", p1);
        args.putString("param2", p2);
        fragment.setArguments(args);
        return fragment;
    }

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
                             Bundle savedInstanceState) {
        return inflater.inflate(R.layout.fragment_compose_parent, container, false);
    }

    @Override
    public void onViewCreated(View view, @Nullable Bundle savedInstanceState) {
        requireActivity().getWindow().setSoftInputMode(
                WindowManager.LayoutParams.SOFT_INPUT_ADJUST_PAN);

        actCategory = view.findViewById(R.id.actCategory);

        ArrayAdapter<String> adapter =
                new ArrayAdapter<>(requireContext(), android.R.layout.simple_list_item_1, dropDownItems);
        actCategory.setAdapter(adapter);

        actCategory.setOnItemClickListener((parent, v, pos, id) -> {
            switch (pos) {
                case 0:
                default:
                    insertChild(new MovieChildFragment());
                    Toast.makeText(getContext(), "You selected Movies", Toast.LENGTH_SHORT).show();
                    break;
                case 1:
                    insertChild(new BookChildFragment());
                    Toast.makeText(getContext(), "You selected Books", Toast.LENGTH_SHORT).show();
                    break;
                case 2:
                    insertChild(new MusicChildFragment());
                    Toast.makeText(getContext(), "You selected Music", Toast.LENGTH_SHORT).show();
                    break;
            }
        });

        // Default
        actCategory.setText(dropDownItems[0], false);
        insertChild(new MovieChildFragment());
    }

    private void insertChild(Fragment child) {
        FragmentTransaction tx = getChildFragmentManager().beginTransaction();
        FragmentTransitions.applyFastFade(tx);
        tx.replace(R.id.child_fragment_container, child).commit();
    }
}
</file>

<file path="app/src/main/java/com/example/fludde/model/MovieContent.java">
package com.example.fludde.model;

import com.example.fludde.adapters.MovieChildAdapter;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.util.ArrayList;
import java.util.List;

public class MovieContent {
    String posterPath;
    String backdropPath;
    String title;
    String overview;


    public MovieContent(JSONObject jsonObject) throws JSONException {
        posterPath = jsonObject.getString( "poster_path");
        backdropPath = jsonObject.getString( "backdrop_path");
        title = jsonObject.getString("title");
        overview = jsonObject.getString("overview");
    }

    public static List<MovieContent> fromJsonArray(JSONArray movieJsonArray) throws JSONException {
        List<MovieContent> movies = new ArrayList<>();

        for(int i =0; i < movieJsonArray.length(); i++ )
        {
            movies.add(new MovieContent(movieJsonArray.getJSONObject(i)));

        }
        return movies;
    }


    public String getImagePath() {
        return String.format("https://image.tmdb.org/t/p/w342/%s",posterPath) ;
    }

    public String getBackdropPath(){
        return String.format("https://image.tmdb.org/t/p/w342/%s",backdropPath) ;

    }

    public String getTitle() {
        return title;
    }

    public String getOverview() {
        return overview;
    }


}
</file>

<file path="app/src/main/java/com/example/fludde/model/MusicContent.java">
package com.example.fludde.model;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.util.ArrayList;
import java.util.List;

public class MusicContent {

    private String title;
    private  String artist;
    private String album;
    private String description;
    private String recordLabel;
    private String coverIMGUrl;

    private MusicContent(JSONObject jsonObject) throws JSONException{
        title = jsonObject.getString("name");
        artist = jsonObject.getString("artistName");
//        album = jsonObject.getString("")
       // recordLabel =
        coverIMGUrl = jsonObject.getString("artworkUrl100");

    }
    public static List<MusicContent> fromJsonArray(JSONArray results) throws JSONException {
        List<MusicContent> musics = new ArrayList<>();

        for(int i =0; i < results.length(); i++ )
        {
            musics.add(new MusicContent(results.getJSONObject(i)));

        }
        return musics;
    }

    public String getCoverIMGUrl() {
        return coverIMGUrl;
    }

    public void setCoverIMGUrl(String coverIMGUrl) {
        this.coverIMGUrl = coverIMGUrl;
    }





    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public String getArtist() {
        return artist;
    }

    public void setArtist(String artist) {
        this.artist = artist;
    }

    public String getAlbum() {
        return album;
    }

    public void setAlbum(String album) {
        this.album = album;
    }

    public String getDescription() {

       description = String.format("%s %s %s %s",title, artist, album, recordLabel);

        return description;
    }

    public void setDescription(String description) {

        this.description = description;
    }

    public String getRecordLabel() {
        return recordLabel;
    }

    public void setRecordLabel(String recordLabel) {
        this.recordLabel = recordLabel;
    }
}
</file>

<file path="app/src/main/java/com/example/fludde/utils/ApiUtils.java">
package com.example.fludde.utils;

import android.os.Handler;
import android.os.Looper;
import android.util.Log;

import com.example.fludde.BuildConfig;
import com.loopj.android.http.AsyncHttpClient;
import com.loopj.android.http.JsonHttpResponseHandler;

import org.json.JSONObject;

import cz.msebera.android.httpclient.Header;

/**
 * Centralized HTTP helper with timeouts, retries, and verbose logging.
 * Logs request lifecycle with timings and body sizes so failures are obvious.
 */
public final class ApiUtils {
    private static final String TAG = "ApiUtils";
    private static final AsyncHttpClient client = new AsyncHttpClient();

    static {
        try {
            client.setConnectTimeout(15_000);
            client.setResponseTimeout(25_000);
            client.setMaxRetriesAndTimeout(2, 2_000);
            client.setUserAgent("Fludde/1.0 (Android)");
            Log.d(TAG, "init: timeouts(connect=15s resp=25s) retries=2 UA=Fludde/1.0 MOCK_MODE=" + BuildConfig.MOCK_MODE);
        } catch (Throwable t) {
            Log.e(TAG, "init: Failed to configure AsyncHttpClient", t);
        }
    }

    private ApiUtils() {}

    /** GET with verbose logging; in MOCK_MODE returns canned JSON for known URLs. */
    public static void get(String url, JsonHttpResponseHandler handler) {
        final long start = System.currentTimeMillis();
        final String reqTag = "GET " + url;

        if (BuildConfig.MOCK_MODE) {
            Log.d(TAG, reqTag + " -> MOCK intercept (no network)");
            mockGet(url, handler, start);
            return;
        }

        Log.d(TAG, reqTag + " -> sending");
        client.get(url, new JsonHttpResponseHandler() {
            @Override
            public void onSuccess(int statusCode, Header[] headers, org.json.JSONObject response) {
                long ms = System.currentTimeMillis() - start;
                Log.d(TAG, reqTag + " ✓ " + statusCode + " (" + ms + "ms) JSONObject len=" + (response != null ? response.length() : -1));
                if (handler != null) handler.onSuccess(statusCode, headers, response);
            }

            @Override
            public void onSuccess(int statusCode, Header[] headers, org.json.JSONArray response) {
                long ms = System.currentTimeMillis() - start;
                Log.d(TAG, reqTag + " ✓ " + statusCode + " (" + ms + "ms) JSONArray len=" + (response != null ? response.length() : -1));
                if (handler != null) handler.onSuccess(statusCode, headers, response);
            }

            @Override
            public void onSuccess(int statusCode, Header[] headers, String responseString) {
                long ms = System.currentTimeMillis() - start;
                int len = responseString == null ? -1 : responseString.length();
                String preview = responseString != null && len > 160 ? responseString.substring(0, 160) + "…" : responseString;
                Log.d(TAG, reqTag + " ✓ " + statusCode + " (" + ms + "ms) String len=" + len + " preview=" + preview);
                if (handler != null) handler.onSuccess(statusCode, headers, responseString);
            }

            @Override
            public void onFailure(int statusCode, Header[] headers, Throwable throwable, org.json.JSONObject errorResponse) {
                logFailure(reqTag, statusCode, throwable, errorResponse != null ? errorResponse.toString() : null, start);
                if (handler != null) handler.onFailure(statusCode, headers, throwable, errorResponse);
            }

            @Override
            public void onFailure(int statusCode, Header[] headers, Throwable throwable, org.json.JSONArray errorResponse) {
                logFailure(reqTag, statusCode, throwable, errorResponse != null ? errorResponse.toString() : null, start);
                if (handler != null) handler.onFailure(statusCode, headers, throwable, errorResponse);
            }

            @Override
            public void onFailure(int statusCode, Header[] headers, String responseString, Throwable throwable) {
                logFailure(reqTag, statusCode, throwable, responseString, start);
                if (handler != null) handler.onFailure(statusCode, headers, responseString, throwable);
            }
        });
    }

    /** POST with no params (unchanged; not used by mocks for now). */
    public static void post(String url, JsonHttpResponseHandler handler) {
        final long start = System.currentTimeMillis();
        final String reqTag = "POST " + url;
        Log.d(TAG, reqTag + " -> sending");

        client.post(url, null, new JsonHttpResponseHandler() {
            @Override
            public void onSuccess(int statusCode, Header[] headers, org.json.JSONObject response) {
                long ms = System.currentTimeMillis() - start;
                Log.d(TAG, reqTag + " ✓ " + statusCode + " (" + ms + "ms)");
                if (handler != null) handler.onSuccess(statusCode, headers, response);
            }

            @Override
            public void onFailure(int statusCode, Header[] headers, Throwable throwable, org.json.JSONObject errorResponse) {
                logFailure(reqTag, statusCode, throwable, errorResponse != null ? errorResponse.toString() : null, start);
                if (handler != null) handler.onFailure(statusCode, headers, throwable, errorResponse);
            }
        });
    }

    /** Optional bearer header helper. */
    public static void setApiKey(String apiKey) {
        try {
            client.addHeader("Authorization", "Bearer " + apiKey);
            Log.d(TAG, "Authorization header set (Bearer ... len=" + (apiKey == null ? 0 : apiKey.length()) + ")");
        } catch (Exception e) {
            Log.e(TAG, "Failed to set API key", e);
        }
    }

    /** Centralized failure log (consistent with Android logging guidance). */
    public static void handleFailure(int statusCode, Throwable throwable) {
        Log.e(TAG, "Network request failed status=" + statusCode, throwable);
    }

    // ---- internal helpers ----
    private static void logFailure(String tag, int status, Throwable t, String bodyOrNull, long start) {
        long ms = System.currentTimeMillis() - start;
        if (bodyOrNull != null && bodyOrNull.length() > 500) {
            bodyOrNull = bodyOrNull.substring(0, 500) + "…";
        }
        Log.e(TAG, tag + " ✗ " + status + " (" + ms + "ms) body=" + (bodyOrNull == null ? "null" : bodyOrNull), t);
    }

    // ---- mock engine ----
    private static void mockGet(String url, JsonHttpResponseHandler handler, long start) {
        new Handler(Looper.getMainLooper()).postDelayed(() -> {
            try {
                JSONObject payload;

                if (url.contains("themoviedb.org/3/trending/movie")) {
                    payload = MockData.tmdbTrendingJson();
                } else if (url.contains("itunes.apple.com/search")) {
                    payload = MockData.itunesSearchJson();
                } else {
                    payload = new JSONObject();
                }

                long ms = System.currentTimeMillis() - start;
                Log.d(TAG, "MOCK " + url + " ✓ 200 (" + ms + "ms) body=JSONObject(len=" + payload.length() + ")");
                if (handler != null) handler.onSuccess(200, new Header[0], payload);
            } catch (Throwable t) {
                Log.e(TAG, "MOCK " + url + " ✗ error generating payload", t);
                if (handler != null) handler.onFailure(500, new Header[0], t, (JSONObject) null);
            }
        }, 450);
    }
}
</file>

<file path="app/src/main/java/com/example/fludde/Post.java">
package com.example.fludde;

import com.parse.ParseClassName;
import com.parse.ParseFile;
import com.parse.ParseObject;
import com.parse.ParseUser;

@ParseClassName("Post")
public class Post extends ParseObject {

    User user = new User();
    public static final String KEY_DESCRIPTION = "description";
    public static final String KEY_CONTENT_IMAGE = "contentImage";
    public static final String KEY_USER = "user";
    public  static final String KEY_CREATED_AT = "createdAt";
    public static final String KEY_IMAGE = "userImage";
    public static final String KEY_CONTENT_TITLE ="contentTitle";
    public static final String KEY_CATEGORY = "category";
    public  static final String KEY_REVIEW = "review";

    public String getDescription() {
        return getString(KEY_DESCRIPTION);
    }

    public ParseFile getContentImage() {
        return getParseFile(KEY_CONTENT_IMAGE);
    }
    public ParseFile getUserImage(){

        return getParseFile(KEY_IMAGE);
    }


    public String getCategory(){return getString(KEY_CATEGORY);}
    public ParseUser getUser() {
        return getParseUser(KEY_USER);
    }
    public String getReview(){return getString(KEY_REVIEW);}
    public String getCreateAt(){return getString(KEY_CREATED_AT);}
    public void setDescription(String description){
        put(KEY_DESCRIPTION, description);
    }
    public void setContentImage(ParseFile parseFile){
        put(KEY_CONTENT_IMAGE, parseFile);
    }
    public void setUser(ParseUser user){
        put(KEY_USER,user);
    }
    public void setReview(String review){put(KEY_REVIEW,review);}
    public void setCategory(String category){put(KEY_CATEGORY,category);}
    public void setContentTitle(String contentTitle){put(KEY_CONTENT_TITLE,contentTitle);}
    public String getContentTitle() {
        return getString( KEY_CONTENT_TITLE);
    }




}
</file>

<file path="app/src/main/java/com/example/fludde/SignupActivity.java">
package com.example.fludde;

import android.content.Intent;
import android.os.Bundle;
import android.util.Log;
import android.widget.Button;
import android.widget.EditText;
import android.widget.Toast;
import androidx.appcompat.app.AppCompatActivity;

public class SignupActivity extends AppCompatActivity {
    private static final String TAG = "SignupActivity";

    private EditText etUsername;
    private EditText etPassword;
    private EditText etEmail;
    private Button btnSignup;
    private Button btnCancel;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_signup);

        etUsername = findViewById(R.id.etUsername);
        etPassword = findViewById(R.id.etPassword);
        etEmail = findViewById(R.id.etEmail);
        btnSignup = findViewById(R.id.btnSignup);
        btnCancel = findViewById(R.id.btnCancel);

        btnSignup.setOnClickListener(v -> attemptSignup());
        btnCancel.setOnClickListener(v -> {
            finish();
            Log.d(TAG, "Signup cancelled and activity closed");
        });
    }

    private void attemptSignup() {
        try {
            String username = etUsername.getText().toString().trim();
            String password = etPassword.getText().toString().trim();
            String email = etEmail.getText().toString().trim();

            if (username.isEmpty() || password.isEmpty() || email.isEmpty()) {
                Toast.makeText(this, "Please fill in all fields", Toast.LENGTH_SHORT).show();
                Log.w(TAG, "Signup attempt with empty fields");
                return;
            }

            if (username.equals("admin")) {
                Log.e(TAG, "Signup failed: Username already taken: " + username);
                Toast.makeText(this, "Signup failed. Username already taken.", Toast.LENGTH_SHORT).show();
            } else {
                Log.d(TAG, "Signup successful for user: " + username);
                navigateToMain();
            }
        } catch (Exception e) {
            Log.e(TAG, "Error during signup attempt", e);
            Toast.makeText(this, "An error occurred during signup. Please try again.", Toast.LENGTH_SHORT).show();
        }
    }

    private void navigateToMain() {
        try {
            Intent intent = new Intent(SignupActivity.this, MainActivity.class);
            startActivity(intent);
            finish();
            Log.d(TAG, "Navigated to MainActivity after signup");
        } catch (Exception e) {
            Log.e(TAG, "Error navigating to MainActivity", e);
            Toast.makeText(this, "An error occurred while navigating to the main screen.", Toast.LENGTH_SHORT).show();
        }
    }
}
</file>

<file path="app/src/main/res/color/card_bg_selector.xml">
<?xml version="1.0" encoding="utf-8"?>
<selector xmlns:android="http://schemas.android.com/apk/res/android">
    <!-- Selected → emphasize with PrimaryContainer -->
    <item android:state_checked="true" android:color="?attr/colorPrimaryContainer"/>
    <!-- Pressed/hovered → use a widely supported surface variant -->
    <item android:state_pressed="true" android:color="?attr/colorSurfaceVariant"/>
    <!-- Default -->
    <item android:color="?attr/colorSurface"/>
</selector>
</file>

<file path="app/src/main/res/layout/fragment_post.xml">
<?xml version="1.0" encoding="utf-8"?>
<androidx.constraintlayout.widget.ConstraintLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    android:layout_width="match_parent"
    android:layout_height="match_parent">

    <!-- Inline, non-blocking error with retry.
         IMPORTANT: Give the <include> its OWN id so the parent can find it. -->
    <include
        android:id="@+id/inlineError"
        layout="@layout/include_inline_error"
        app:layout_constraintTop_toTopOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent" />

    <androidx.recyclerview.widget.RecyclerView
        android:id="@+id/rvPost"
        android:layout_width="0dp"
        android:layout_height="0dp"
        android:clipToPadding="false"
        android:padding="1dp"
        app:layout_constraintTop_toBottomOf="@id/inlineError"
        app:layout_constraintBottom_toBottomOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent" />

    <!-- Shimmer skeleton overlay -->
    <com.facebook.shimmer.ShimmerFrameLayout
        android:id="@+id/shimmerContainer"
        android:visibility="gone"
        android:layout_width="0dp"
        android:layout_height="0dp"
        app:layout_constraintTop_toBottomOf="@id/inlineError"
        app:layout_constraintBottom_toBottomOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent">

        <LinearLayout
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:orientation="vertical">

            <include layout="@layout/item_post_skeleton"/>
            <include layout="@layout/item_post_skeleton"/>
            <include layout="@layout/item_post_skeleton"/>
        </LinearLayout>
    </com.facebook.shimmer.ShimmerFrameLayout>
</androidx.constraintlayout.widget.ConstraintLayout>
</file>

<file path="app/src/main/res/layout/item_post_skeleton.xml">
<?xml version="1.0" encoding="utf-8"?>
<com.google.android.material.card.MaterialCardView
    xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    android:layout_marginStart="@dimen/space_8"
    android:layout_marginEnd="@dimen/space_8"
    android:layout_marginTop="@dimen/space_8"
    app:cardUseCompatPadding="true">

    <androidx.constraintlayout.widget.ConstraintLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:padding="@dimen/space_16">

        <!-- Poster block -->
        <View
            android:id="@+id/skPoster"
            android:layout_width="@dimen/poster_md_w"
            android:layout_height="@dimen/poster_md_h"
            android:background="?attr/colorSurfaceVariant"
            android:alpha="0.7"
            app:layout_constraintTop_toTopOf="parent"
            app:layout_constraintStart_toStartOf="parent" />

        <!-- Title bar -->
        <View
            android:id="@+id/skTitle"
            android:layout_width="@dimen/poster_md_w"
            android:layout_height="14dp"
            android:background="?attr/colorSurfaceVariant"
            android:alpha="0.7"
            app:layout_constraintTop_toBottomOf="@id/skPoster"
            app:layout_constraintStart_toStartOf="@id/skPoster"
            android:layout_marginTop="@dimen/space_8" />

        <!-- Category chip line -->
        <View
            android:id="@+id/skCategory"
            android:layout_width="64dp"
            android:layout_height="12dp"
            android:background="?attr/colorSurfaceVariant"
            android:alpha="0.7"
            app:layout_constraintTop_toTopOf="@id/skPoster"
            app:layout_constraintStart_toEndOf="@id/skPoster"
            android:layout_marginStart="@dimen/space_16" />

        <!-- Description lines -->
        <View
            android:id="@+id/skDesc1"
            android:layout_width="0dp"
            android:layout_height="12dp"
            android:background="?attr/colorSurfaceVariant"
            android:alpha="0.7"
            app:layout_constraintStart_toEndOf="@id/skPoster"
            app:layout_constraintEnd_toEndOf="parent"
            app:layout_constraintTop_toBottomOf="@id/skCategory"
            android:layout_marginStart="@dimen/space_16"
            android:layout_marginTop="@dimen/space_8" />

        <View
            android:id="@+id/skDesc2"
            android:layout_width="0dp"
            android:layout_height="12dp"
            android:background="?attr/colorSurfaceVariant"
            android:alpha="0.7"
            app:layout_constraintStart_toStartOf="@id/skDesc1"
            app:layout_constraintEnd_toEndOf="@id/skDesc1"
            app:layout_constraintTop_toBottomOf="@id/skDesc1"
            android:layout_marginTop="@dimen/space_8" />

        <View
            android:id="@+id/skDesc3"
            android:layout_width="0dp"
            android:layout_height="12dp"
            android:background="?attr/colorSurfaceVariant"
            android:alpha="0.7"
            app:layout_constraintStart_toStartOf="@id/skDesc1"
            app:layout_constraintEnd_toEndOf="@id/skDesc1"
            app:layout_constraintTop_toBottomOf="@id/skDesc2"
            android:layout_marginTop="@dimen/space_8" />

        <!-- Avatar circle -->
        <View
            android:id="@+id/skAvatar"
            android:layout_width="@dimen/avatar_md"
            android:layout_height="@dimen/avatar_md"
            android:background="?attr/colorSurfaceVariant"
            android:alpha="0.7"
            android:layout_marginTop="@dimen/space_16"
            app:layout_constraintTop_toBottomOf="@id/skTitle"
            app:layout_constraintStart_toStartOf="parent" />

    </androidx.constraintlayout.widget.ConstraintLayout>
</com.google.android.material.card.MaterialCardView>
</file>

<file path="app/src/main/res/menu/menu_bottom_navigation.xml">
<?xml version="1.0" encoding="utf-8"?>
<menu xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:android="http://schemas.android.com/apk/res/android">

    <item
        android:id="@+id/action_home"
        android:icon="@drawable/ic_home_24"
        android:title="@string/nav_home"
        app:showAsAction="always" />

    <item
        android:id="@+id/action_feed"
        android:icon="@drawable/ic_dynamic_feed_24"
        android:title="@string/nav_timeline"
        app:showAsAction="always" />

    <item
        android:id="@+id/action_compose"
        android:icon="@drawable/ic_add_comment_24"
        android:title="@string/nav_compose"
        app:showAsAction="always" />

    <item
        android:id="@+id/action_search"
        android:icon="@drawable/ic_search_24"
        android:title="@string/nav_search"
        app:showAsAction="always" />

    <item
        android:id="@+id/action_profile"
        android:icon="@drawable/ic_person_24"
        android:title="@string/nav_profile"
        app:showAsAction="always" />
</menu>
</file>

<file path="app/src/main/res/mipmap-anydpi-v26/ic_launcher.xml">
<?xml version="1.0" encoding="utf-8"?>
<adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">
    <background android:drawable="@drawable/ic_launcher_background" />
    <foreground android:drawable="@drawable/ic_launcher_foreground" />
    <!-- Monochrome layer for Android 13+ (dark/light adaptive) -->
    <monochrome android:drawable="@drawable/ic_launcher_monochrome" />
</adaptive-icon>
</file>

<file path="app/src/main/res/values/dimens.xml">
<?xml version="1.0" encoding="utf-8"?>
<!-- app/src/main/res/values/dimens.xml -->
<resources>

    <!-- ───────── Spacing scale (8dp baseline; 4dp for tight alignments) ───────── -->
    <dimen name="space_4">4dp</dimen>
    <dimen name="space_8">8dp</dimen>
    <dimen name="space_12">12dp</dimen>
    <dimen name="space_16">16dp</dimen>
    <dimen name="space_24">24dp</dimen>
    <dimen name="space_32">32dp</dimen>

    <!-- Optional semantic aliases (use either these or the numeric names) -->
    <dimen name="space_xs">@dimen/space_4</dimen>
    <dimen name="space_sm">@dimen/space_8</dimen>
    <dimen name="space_md">@dimen/space_12</dimen>
    <dimen name="space_lg">@dimen/space_16</dimen>
    <dimen name="space_xl">@dimen/space_24</dimen>
    <dimen name="space_2xl">@dimen/space_32</dimen>

    <!-- Edge-to-edge safe insets (baseline page padding) -->
    <dimen name="inset_screen">@dimen/space_16</dimen>

    <!-- ───────── Interaction + icons ───────── -->
    <!-- Minimum touch target for tappable controls -->
    <dimen name="touch_target_min">48dp</dimen>
    <!-- Common icon sizes -->
    <dimen name="icon_size_sm">24dp</dimen>
    <dimen name="icon_size_md">36dp</dimen>
    <dimen name="icon_size_lg">48dp</dimen>

    <!-- ───────── Image sizes (stable aspect ratios) ───────── -->
    <!-- Square thumbnails (covers, avatars in grids, etc.) -->
    <dimen name="image_square_sm">96dp</dimen>
    <dimen name="image_square_md">120dp</dimen>
    <dimen name="image_square_lg">160dp</dimen>

    <!-- Poster / book cover (2:3 aspect) -->
    <dimen name="poster_sm_w">96dp</dimen>
    <dimen name="poster_sm_h">144dp</dimen>
    <dimen name="poster_md_w">120dp</dimen>
    <dimen name="poster_md_h">180dp</dimen>
    <dimen name="poster_lg_w">160dp</dimen>
    <dimen name="poster_lg_h">240dp</dimen>

    <!-- Avatars (circular/squircle) -->
    <dimen name="avatar_sm">40dp</dimen>
    <dimen name="avatar_md">48dp</dimen>
    <dimen name="avatar_lg">56dp</dimen>
    <dimen name="avatar_xl">64dp</dimen>

    <!-- ───────── Common radii (align with M3 shape theming) ───────── -->
    <dimen name="radius_xs">4dp</dimen>
    <dimen name="radius_sm">8dp</dimen>
    <dimen name="radius_md">12dp</dimen>
    <dimen name="radius_lg">16dp</dimen>
    <dimen name="radius_xl">20dp</dimen>

    <!-- Useful misc -->
    <dimen name="card_content_padding">@dimen/space_16</dimen>
    <dimen name="divider_thin">1dp</dimen>

</resources>
</file>

<file path="app/src/main/res/values/preloaded_fonts.xml">
<?xml version="1.0" encoding="utf-8"?>
<resources>
    <array name="preloaded_fonts" translatable="false">
        <item>@font/acme</item>
        <item>@font/black_han_sans</item>
    </array>
</resources>
</file>

<file path="app/src/main/res/values-v31/themes.xml">
<?xml version="1.0" encoding="utf-8"?>
<resources>
    <!-- API 31+: keep Dynamic Color (Material 3). -->
    <style name="Theme.Fludde" parent="Theme.Material3.DynamicColors.DayNight.NoActionBar">
        <item name="shapeAppearanceSmallComponent">@style/ShapeAppearance.Fludde.Medium</item>
        <item name="shapeAppearanceMediumComponent">@style/ShapeAppearance.Fludde.Medium</item>
        <item name="shapeAppearanceLargeComponent">@style/ShapeAppearance.Fludde.Large</item>

        <!-- System bars (transparent for edge-to-edge) -->
        <item name="android:statusBarColor">@android:color/transparent</item>
        <item name="android:navigationBarColor">@android:color/transparent</item>
        <item name="android:windowLightStatusBar">true</item>
        <item name="android:windowLightNavigationBar">true</item>

        <!-- Material widgets -->
        <item name="materialCardViewStyle">@style/Widget.Fludde.Card</item>
        <!-- ⛔ Do not set navigationBarStyle or floatingActionButtonStyle here -->
    </style>
</resources>
</file>

<file path="app/src/test/java/com/example/fludde/utils/ApiUtilsTest.java">
package com.example.fludde.utils;

import com.loopj.android.http.JsonHttpResponseHandler;

import org.junit.Before;
import org.junit.Test;
import org.mockito.Mockito;

import cz.msebera.android.httpclient.Header;

import static org.junit.Assert.*;

public class ApiUtilsTest {

    @Before
    public void setUp() throws Exception {
    }

    @Test
    public void testGetRequest() {
        JsonHttpResponseHandler responseHandler = Mockito.mock(JsonHttpResponseHandler.class);
        ApiUtils.get("", responseHandler);
        Mockito.verify(responseHandler, Mockito.atLeast(0))
                .onSuccess(Mockito.anyInt(), Mockito.<Header[]>any(), Mockito.any());
    }

    @Test
    public void testSetApiKey() {
        String apiKey = "";
        ApiUtils.setApiKey(apiKey);
        assertTrue(true);
    }

    @Test
    public void testHandleFailure() {
        int statusCode = 404;
        Throwable throwable = new Throwable("Not Found");
        ApiUtils.handleFailure(statusCode, throwable);
        assertTrue(true);
    }
}
</file>

<file path="app/src/test/java/com/example/fludde/ExampleUnitTest.java">
package com.example.fludde;

import org.junit.Test;

import static org.junit.Assert.*;

public class ExampleUnitTest {
    @Test
    public void addition_isCorrect() {
        assertEquals(4, 2 + 2);
    }
}
</file>

<file path="config/gradle.properties">
# Project-wide Gradle settings.
# IDE users: Gradle settings configured through the IDE can override this file.

# JVM args for the Gradle Daemon (3 GB heap + consistent encoding)
org.gradle.jvmargs=-Xmx3g -Dfile.encoding=UTF-8

# AndroidX / Jetifier / non-transitive R flags
android.useAndroidX=true
android.enableJetifier=true
android.nonTransitiveRClass=true
</file>

<file path=".repomixignore">
*.webp
TUTORIAL.md
OUTLINE.md
app/src/main/res/values/font_certs.xml
*.zsh
</file>

<file path="settings.gradle">
pluginManagement {
  repositories {
    // Where Gradle finds plugins like the Android Gradle Plugin (AGP)
    google()
    mavenCentral()
    gradlePluginPortal()
  }
}

dependencyResolutionManagement {
  // Prefer repositories declared here (modern Gradle/AGP practice)
  repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS)
  repositories {
    // Primary repos for Android projects
    google()
    mavenCentral()

    // Needed for Parse Android SDK 4.x (com.github.parse-community)
    // Keep JitPack LAST so Gradle checks the standard repos first.
    maven { url "https://www.jitpack.io" }
  }
}

rootProject.name = "Fludde"
include(":app")
</file>

<file path="app/src/main/java/com/example/fludde/adapters/MusicChildAdapter.java">
package com.example.fludde.adapters;

import android.content.Context;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.TextView;

import androidx.annotation.NonNull;
import androidx.recyclerview.widget.RecyclerView;

import com.example.fludde.R;
import com.example.fludde.model.MusicContent;
import com.example.fludde.utils.GlideExtensions;
import com.example.fludde.utils.Haptics;
import com.google.android.material.card.MaterialCardView;

import java.util.List;

public class MusicChildAdapter extends RecyclerView.Adapter<MusicChildAdapter.MusicViewHolder> {

    private final Context context;
    private final List<MusicContent> items;
    private final OnMusicContentListener listener;

    private int selectedPos = RecyclerView.NO_POSITION;

    public MusicChildAdapter(@NonNull Context context,
                             @NonNull List<MusicContent> items,
                             @NonNull OnMusicContentListener listener) {
        this.context = context;
        this.items = items;
        this.listener = listener;
        setHasStableIds(true);
    }

    @Override
    public long getItemId(int position) {
        String key = items.get(position).getTitle() + items.get(position).getArtist() + position;
        return key.hashCode();
    }

    @NonNull
    @Override
    public MusicViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {
        View v = LayoutInflater.from(context).inflate(R.layout.music_content_post, parent, false);
        v.setBackgroundResource(R.drawable.list_item_bg);
        return new MusicViewHolder(v);
    }

    @Override
    public void onBindViewHolder(@NonNull MusicViewHolder holder, int position) {
        holder.bind(items.get(position), position == selectedPos);
    }

    @Override
    public int getItemCount() { return items.size(); }

    class MusicViewHolder extends RecyclerView.ViewHolder implements View.OnClickListener, View.OnLongClickListener {
        ImageView ivAlbumCoverImage;
        TextView tvSongTitle;
        TextView tvArtistName;

        MusicViewHolder(@NonNull View itemView) {
            super(itemView);
            ivAlbumCoverImage = itemView.findViewById(R.id.ivAlbumCoverImage);
            tvSongTitle = itemView.findViewById(R.id.tvSongTitle);
            tvArtistName = itemView.findViewById(R.id.tvArtistName);
            itemView.setOnClickListener(this);
            itemView.setOnLongClickListener(this);
        }

        void bind(MusicContent data, boolean selected) {
            tvSongTitle.setText(data.getTitle());
            tvArtistName.setText(data.getArtist());
            GlideExtensions.loadSquare(ivAlbumCoverImage, data.getCoverIMGUrl());

            MaterialCardView card = (MaterialCardView) itemView;
            card.setChecked(selected);
            itemView.setSelected(selected);
        }

        @Override
        public void onClick(View v) {
            int pos = getBindingAdapterPosition();
            if (pos == RecyclerView.NO_POSITION) return;
            int old = selectedPos;
            selectedPos = pos;
            if (old != RecyclerView.NO_POSITION) notifyItemChanged(old);
            notifyItemChanged(selectedPos);

            Haptics.tick(v);
            if (listener != null) listener.onMusicContentClick(pos);
        }

        @Override
        public boolean onLongClick(View v) {
            int pos = getBindingAdapterPosition();
            if (pos != RecyclerView.NO_POSITION && listener != null) {
                Haptics.longPress(v);
                listener.onMusicContentLongClick(pos);
                return true;
            }
            return false;
        }
    }

    public interface OnMusicContentListener {
        void onMusicContentClick(int position);
        void onMusicContentLongClick(int position);
    }
}
</file>

<file path="app/src/main/java/com/example/fludde/fragments/ProfileFragment.java">
package com.example.fludde.fragments;

import android.content.Intent;
import android.os.Bundle;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import android.widget.Toast;
import android.widget.TextView;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.fragment.app.Fragment;

import com.bumptech.glide.Glide;
import com.bumptech.glide.load.resource.bitmap.CenterCrop;
import com.bumptech.glide.request.RequestOptions;
import com.example.fludde.BuildConfig;
import com.example.fludde.LoginActivity;
import com.example.fludde.R;
import com.google.android.material.button.MaterialButton;
import com.google.android.material.imageview.ShapeableImageView;
import com.parse.LogOutCallback;
import com.parse.ParseException;
import com.parse.ParseFile;
import com.parse.ParseUser;

/**
 * Profile screen with mock-mode support.
 */
public class ProfileFragment extends Fragment {
    private static final String TAG = "ProfileFragment";

    private ShapeableImageView ivAvatar;
    private TextView tvUsername;
    private TextView tvEmail;
    private MaterialButton btnEditProfile;
    private MaterialButton btnLogout;

    private LinearLayout emptyState;
    private MaterialButton btnCreateFirstPost;

    @Nullable
    @Override
    public View onCreateView(@NonNull LayoutInflater inflater,
                             @Nullable ViewGroup container,
                             @Nullable Bundle savedInstanceState) {
        return inflater.inflate(R.layout.fragment_profile, container, false);
    }

    @Override
    public void onViewCreated(@NonNull View v, @Nullable Bundle savedInstanceState) {
        super.onViewCreated(v, savedInstanceState);

        ivAvatar = v.findViewById(R.id.ivAvatar);
        tvUsername = v.findViewById(R.id.tvUsername);
        tvEmail = v.findViewById(R.id.tvEmail);
        btnEditProfile = v.findViewById(R.id.btnEditProfile);
        btnLogout = v.findViewById(R.id.btnLogout);
        emptyState = v.findViewById(R.id.emptyState);
        btnCreateFirstPost = v.findViewById(R.id.btnCreateFirstPost);

        bindUser();
        wireActions();
    }

    private void bindUser() {
        if (BuildConfig.MOCK_MODE) {
            tvUsername.setText("johndoe2016");
            tvEmail.setText("johndoe@youknow.com");

            Glide.with(this)
                    .load("https://i.pravatar.cc/150?img=12")
                    .apply(new RequestOptions().transform(new CenterCrop()))
                    .placeholder(R.drawable.placeholder_avatar)
                    .error(R.drawable.placeholder_avatar)
                    .into(ivAvatar);
            Log.d(TAG, "Mock profile bound");
            return;
        }

        try {
            ParseUser current = ParseUser.getCurrentUser();
            String username = current != null && current.getUsername() != null ? current.getUsername() : "";
            String email = current != null && current.getEmail() != null ? current.getEmail() : "";

            tvUsername.setText(username);
            tvEmail.setText(email);

            ParseFile avatar = current != null ? current.getParseFile("image") : null;
            Glide.with(this)
                    .load(avatar != null ? avatar.getUrl() : null)
                    .apply(new RequestOptions().transform(new CenterCrop()))
                    .placeholder(R.drawable.placeholder_avatar)
                    .error(R.drawable.placeholder_avatar)
                    .into(ivAvatar);

            Log.d(TAG, "User profile bound");
        } catch (Exception e) {
            Log.e(TAG, "Failed to bind user profile", e);
            Toast.makeText(getContext(), getString(R.string.error_load_profile), Toast.LENGTH_SHORT).show();
        }
    }

    private void wireActions() {
        btnEditProfile.setOnClickListener(v -> {
            Toast.makeText(requireContext(), getString(R.string.action_edit_profile), Toast.LENGTH_SHORT).show();
        });

        btnLogout.setOnClickListener(v -> {
            if (BuildConfig.MOCK_MODE) {
                // In mock mode, just go to login.
                Intent i = new Intent(requireContext(), LoginActivity.class);
                startActivity(i);
                requireActivity().finish();
                return;
            }

            try {
                ParseUser.logOutInBackground(new LogOutCallback() {
                    @Override public void done(ParseException e) {
                        if (e != null) {
                            Log.e(TAG, "Logout failed", e);
                            Toast.makeText(requireContext(), getString(R.string.error_generic), Toast.LENGTH_SHORT).show();
                            return;
                        }
                        Intent i = new Intent(requireContext(), LoginActivity.class);
                        startActivity(i);
                        requireActivity().finish();
                    }
                });
            } catch (Exception ex) {
                Log.e(TAG, "Logout error", ex);
                Toast.makeText(requireContext(), getString(R.string.error_generic), Toast.LENGTH_SHORT).show();
            }
        });

        btnCreateFirstPost.setOnClickListener(v -> {
            Toast.makeText(requireContext(), getString(R.string.nav_compose), Toast.LENGTH_SHORT).show();
        });
    }
}
</file>

<file path="app/src/main/java/com/example/fludde/fragments/SearchFragment.java">
package com.example.fludde.fragments;

import android.content.Context;
import android.os.Bundle;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.fragment.app.Fragment;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;

import android.text.TextUtils;
import android.util.Log;
import android.view.KeyEvent;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.view.inputmethod.EditorInfo;
import android.view.inputmethod.InputMethodManager;
import android.widget.Button;
import android.widget.Toast;

import com.example.fludde.BuildConfig;
import com.example.fludde.R;
import com.example.fludde.adapters.SearchFragmentAdapter;
import com.example.fludde.model.UserUi;
import com.example.fludde.utils.MockData;
import com.google.android.material.textfield.TextInputEditText;
import com.parse.ParseQuery;
import com.parse.ParseUser;

import java.util.ArrayList;
import java.util.List;

public class SearchFragment extends Fragment {

    private static final String TAG = "SearchFragment";

    private RecyclerView rvUserQuery;
    private SearchFragmentAdapter searchFragmentAdapter;
    private final List<UserUi> allUsers = new ArrayList<>();

    private TextInputEditText etSearchFieldUser;
    private Button btSearch;

    private View emptyState;

    public SearchFragment() { }

    public static SearchFragment newInstance(String param1, String param2) {
        SearchFragment fragment = new SearchFragment();
        Bundle args = new Bundle();
        args.putString("param1", param1);
        args.putString("param2", param2);
        fragment.setArguments(args);
        return fragment;
    }

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
                             Bundle savedInstanceState) {
        return inflater.inflate(R.layout.fragment_search, container, false);
    }

    @Override
    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {
        super.onViewCreated(view, savedInstanceState);

        rvUserQuery = view.findViewById(R.id.rvUserQuery);
        etSearchFieldUser = view.findViewById(R.id.etSearchFieldUser);
        btSearch = view.findViewById(R.id.btSearch);
        emptyState = view.findViewById(R.id.emptyState);

        searchFragmentAdapter = new SearchFragmentAdapter(requireContext(), allUsers);
        rvUserQuery.setAdapter(searchFragmentAdapter);
        rvUserQuery.setLayoutManager(new LinearLayoutManager(getContext()));

        btSearch.setOnClickListener(v -> performSearch(getQueryText()));

        etSearchFieldUser.setOnEditorActionListener((tv, actionId, event) -> {
            boolean handled = false;
            if (actionId == EditorInfo.IME_ACTION_SEARCH) {
                performSearch(getQueryText());
                handled = true;
            } else if (event != null
                    && event.getKeyCode() == KeyEvent.KEYCODE_ENTER
                    && event.getAction() == KeyEvent.ACTION_DOWN) {
                performSearch(getQueryText());
                handled = true;
            }
            return handled;
        });

        showEmptyState(true);
    }

    private String getQueryText() {
        String q = etSearchFieldUser.getText() != null ? etSearchFieldUser.getText().toString().trim() : "";
        return q;
    }

    private void performSearch(String userName) {
        hideKeyboard();
        if (TextUtils.isEmpty(userName)) {
            Toast.makeText(getContext(), getString(R.string.hint_search_user), Toast.LENGTH_SHORT).show();
            allUsers.clear();
            searchFragmentAdapter.notifyDataSetChanged();
            showEmptyState(true);
            return;
        }
        lookForUser(userName);
    }

    private void showEmptyState(boolean show) {
        if (emptyState != null) emptyState.setVisibility(show ? View.VISIBLE : View.GONE);
    }

    private void hideKeyboard() {
        try {
            InputMethodManager imm = (InputMethodManager) requireContext().getSystemService(Context.INPUT_METHOD_SERVICE);
            View v = requireActivity().getCurrentFocus();
            if (imm != null && v != null) {
                imm.hideSoftInputFromWindow(v.getWindowToken(), 0);
            }
        } catch (Exception ignore) { }
    }

    private void lookForUser(String userName) {
        if (BuildConfig.MOCK_MODE) {
            allUsers.clear();
            allUsers.addAll(MockData.mockUsers(userName));
            searchFragmentAdapter.notifyDataSetChanged();
            showEmptyState(allUsers.isEmpty());
            return;
        }

        ParseQuery<ParseUser> query = ParseUser.getQuery();
        query.whereContains("username", userName);
        query.setLimit(50);

        query.findInBackground((users, e) -> {
            if (e != null) {
                Log.e(TAG, "Search failed", e);
                Toast.makeText(getContext(), getString(R.string.error_search), Toast.LENGTH_SHORT).show();
                allUsers.clear();
                searchFragmentAdapter.notifyDataSetChanged();
                showEmptyState(true);
                return;
            }

            allUsers.clear();
            if (users != null) {
                for (ParseUser pu : users) {
                    String username = pu.getUsername() != null ? pu.getUsername() : "";
                    String imageUrl = "";
                    try {
                        if (pu.getParseFile("image") != null && pu.getParseFile("image").getUrl() != null) {
                            imageUrl = pu.getParseFile("image").getUrl();
                        }
                    } catch (Exception ignore) {}
                    allUsers.add(new UserUi(username, imageUrl));
                }
            }
            searchFragmentAdapter.notifyDataSetChanged();
            showEmptyState(allUsers.isEmpty());
        });
    }
}
</file>

<file path="app/src/main/java/com/example/fludde/LoginActivity.java">
package com.example.fludde;

import android.content.Intent;
import android.os.Bundle;
import android.util.Log;
import android.widget.Button;
import android.widget.EditText;
import android.widget.Toast;
import androidx.appcompat.app.AppCompatActivity;

public class LoginActivity extends AppCompatActivity {
    private static final String TAG = "LoginActivity";

    private EditText etUsername;
    private EditText etPassword;
    private Button btnLogin;
    private Button btnSignup;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_login);

        etUsername = findViewById(R.id.etUsername);
        etPassword = findViewById(R.id.etPassword);
        btnLogin = findViewById(R.id.btnLogin);
        btnSignup = findViewById(R.id.btnSignup);

        btnLogin.setOnClickListener(v -> attemptLogin());
        btnSignup.setOnClickListener(v -> {
            Intent intent = new Intent(LoginActivity.this, SignupActivity.class);
            startActivity(intent);
            Log.d(TAG, "Navigated to SignupActivity");
        });
    }

    private void attemptLogin() {
        try {
            String username = etUsername.getText().toString().trim();
            String password = etPassword.getText().toString().trim();

            if (username.isEmpty() || password.isEmpty()) {
                Toast.makeText(this, "Please enter both username and password", Toast.LENGTH_SHORT).show();
                Log.w(TAG, "Login attempt with empty fields");
                return;
            }

            if (username.equals("admin") && password.equals("admin")) {
                Log.d(TAG, "Login successful for user: " + username);
                navigateToMain();
            } else {
                Log.e(TAG, "Login failed for user: " + username);
                Toast.makeText(this, "Login failed. Incorrect username or password.", Toast.LENGTH_SHORT).show();
            }
        } catch (Exception e) {
            Log.e(TAG, "Error during login attempt", e);
            Toast.makeText(this, "An error occurred during login. Please try again.", Toast.LENGTH_SHORT).show();
        }
    }

    private void navigateToMain() {
        try {
            Intent intent = new Intent(LoginActivity.this, MainActivity.class);
            startActivity(intent);
            finish();
            Log.d(TAG, "Navigated to MainActivity");
        } catch (Exception e) {
            Log.e(TAG, "Error navigating to MainActivity", e);
            Toast.makeText(this, "An error occurred while navigating to the main screen.", Toast.LENGTH_SHORT).show();
        }
    }
}
</file>

<file path="app/src/main/res/layout/activity_login.xml">
<?xml version="1.0" encoding="utf-8"?>
<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    tools:context=".LoginActivity">

    <EditText
        android:id="@+id/etUsername"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:layout_marginStart="@dimen/space_16"
        android:layout_marginEnd="@dimen/space_16"
        android:hint="@string/hint_username"
        android:inputType="text"
        app:layout_constraintTop_toTopOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintHorizontal_bias="0.5"
        app:layout_constraintVertical_bias="0.3" />

    <EditText
        android:id="@+id/etPassword"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:layout_marginTop="@dimen/space_16"
        android:layout_marginStart="@dimen/space_16"
        android:layout_marginEnd="@dimen/space_16"
        android:hint="@string/hint_password"
        android:inputType="textPassword"
        app:layout_constraintTop_toBottomOf="@id/etUsername"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintHorizontal_bias="0.5" />

    <Button
        android:id="@+id/btnLogin"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:layout_marginTop="@dimen/space_16"
        android:layout_marginStart="@dimen/space_16"
        android:layout_marginEnd="@dimen/space_16"
        android:text="@string/action_login"
        app:layout_constraintTop_toBottomOf="@id/etPassword"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintHorizontal_bias="0.5" />

    <Button
        android:id="@+id/btnSignup"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:layout_marginTop="@dimen/space_16"
        android:layout_marginStart="@dimen/space_16"
        android:layout_marginEnd="@dimen/space_16"
        android:text="@string/action_signup"
        app:layout_constraintTop_toBottomOf="@id/btnLogin"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintHorizontal_bias="0.5" />

</androidx.constraintlayout.widget.ConstraintLayout>
</file>

<file path="app/src/main/res/layout/activity_main.xml">
<?xml version="1.0" encoding="utf-8"?>
<RelativeLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    tools:context=".MainActivity">

    <!-- Edge-to-edge container; insets applied in code (InsetsUtils) -->
    <FrameLayout
        android:id="@+id/flContainer"
        android:layout_width="match_parent"
        android:layout_height="match_parent" />

    <!-- Bottom nav uses the component’s own container styling from theme;
         no opaque system bars behind. Always show labels (Material guidance).
         Uses a clear Material 3 active indicator. -->
    <com.google.android.material.bottomnavigation.BottomNavigationView
        android:id="@+id/bottomNavigation"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:layout_alignParentBottom="true"
        app:menu="@menu/menu_bottom_navigation"
        app:labelVisibilityMode="labeled"
        app:itemActiveIndicatorStyle="@style/Widget.Fludde.NavigationBar.ActiveIndicator" />

</RelativeLayout>
</file>

<file path="app/src/main/res/layout/activity_signup.xml">
<?xml version="1.0" encoding="utf-8"?>
<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    tools:context=".SignupActivity">

    <EditText
        android:id="@+id/etUsername"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:layout_marginStart="@dimen/space_16"
        android:layout_marginEnd="@dimen/space_16"
        android:hint="@string/hint_username"
        android:inputType="text"
        app:layout_constraintTop_toTopOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintHorizontal_bias="0.5"
        app:layout_constraintVertical_bias="0.3" />

    <EditText
        android:id="@+id/etPassword"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:layout_marginTop="@dimen/space_16"
        android:layout_marginStart="@dimen/space_16"
        android:layout_marginEnd="@dimen/space_16"
        android:hint="@string/hint_password"
        android:inputType="textPassword"
        app:layout_constraintTop_toBottomOf="@id/etUsername"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintHorizontal_bias="0.5" />

    <EditText
        android:id="@+id/etEmail"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:layout_marginTop="@dimen/space_16"
        android:layout_marginStart="@dimen/space_16"
        android:layout_marginEnd="@dimen/space_16"
        android:hint="@string/hint_email"
        android:inputType="textEmailAddress"
        app:layout_constraintTop_toBottomOf="@id/etPassword"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintHorizontal_bias="0.5" />

    <Button
        android:id="@+id/btnSignup"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:layout_marginTop="@dimen/space_16"
        android:layout_marginStart="@dimen/space_16"
        android:layout_marginEnd="@dimen/space_16"
        android:text="@string/action_signup"
        app:layout_constraintTop_toBottomOf="@id/etEmail"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintHorizontal_bias="0.5" />

    <Button
        android:id="@+id/btnCancel"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:layout_marginTop="@dimen/space_16"
        android:layout_marginStart="@dimen/space_16"
        android:layout_marginEnd="@dimen/space_16"
        android:text="@string/action_cancel"
        app:layout_constraintTop_toBottomOf="@id/btnSignup"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintHorizontal_bias="0.5" />

</androidx.constraintlayout.widget.ConstraintLayout>
</file>

<file path="app/src/main/res/layout/fragment_child_book.xml">
<?xml version="1.0" encoding="utf-8"?>
<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    tools:context=".fragments.child.BookChildFragment">

    <androidx.recyclerview.widget.RecyclerView
        android:id="@+id/rvBookHorizontalView"
        android:layout_width="0dp"
        android:layout_height="0dp"
        app:layout_constraintTop_toTopOf="parent"
        app:layout_constraintBottom_toBottomOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent" />

    <ProgressBar
        android:id="@+id/progressBar"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:visibility="gone"
        app:layout_constraintTop_toTopOf="parent"
        app:layout_constraintBottom_toBottomOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent" />

</androidx.constraintlayout.widget.ConstraintLayout>
</file>

<file path="app/src/main/res/layout/fragment_child_movie.xml">
<?xml version="1.0" encoding="utf-8"?>
<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    tools:context=".fragments.child.MovieChildFragment">

    <androidx.recyclerview.widget.RecyclerView
        android:id="@+id/rvMovieHorizontalView"
        android:layout_width="0dp"
        android:layout_height="0dp"
        app:layout_constraintTop_toTopOf="parent"
        app:layout_constraintBottom_toBottomOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent" />

    <ProgressBar
        android:id="@+id/progressBar"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:visibility="gone"
        app:layout_constraintTop_toTopOf="parent"
        app:layout_constraintBottom_toBottomOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent" />

</androidx.constraintlayout.widget.ConstraintLayout>
</file>

<file path="app/src/main/res/layout/fragment_child_music.xml">
<?xml version="1.0" encoding="utf-8"?>
<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    tools:context=".fragments.child.MusicChildFragment">

    <androidx.recyclerview.widget.RecyclerView
        android:id="@+id/rvMusicHorizontalView"
        android:layout_width="0dp"
        android:layout_height="0dp"
        app:layout_constraintTop_toTopOf="parent"
        app:layout_constraintBottom_toBottomOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent" />

    <ProgressBar
        android:id="@+id/progressBar"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:visibility="gone"
        app:layout_constraintTop_toTopOf="parent"
        app:layout_constraintBottom_toBottomOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent" />

</androidx.constraintlayout.widget.ConstraintLayout>
</file>

<file path="app/src/main/res/layout/fragment_compose_parent.xml">
<?xml version="1.0" encoding="utf-8"?>
<androidx.constraintlayout.widget.ConstraintLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    android:layout_width="match_parent"
    android:layout_height="match_parent">

    <!-- Exposed Dropdown (replaces Spinner) -->
    <com.google.android.material.textfield.TextInputLayout
        android:id="@+id/tilCategory"
        style="@style/Widget.Fludde.TextField.Filled"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:layout_margin="@dimen/space_16"
        app:endIconMode="dropdown_menu"
        app:layout_constraintTop_toTopOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent">

        <com.google.android.material.textfield.MaterialAutoCompleteTextView
            android:id="@+id/actCategory"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:hint="@string/label_category"
            android:inputType="none"
            android:ellipsize="end"
            android:maxLines="1"/>
    </com.google.android.material.textfield.TextInputLayout>

    <FrameLayout
        android:id="@+id/child_fragment_container"
        android:layout_width="0dp"
        android:layout_height="0dp"
        android:layout_margin="@dimen/space_8"
        app:layout_constraintTop_toBottomOf="@id/tilCategory"
        app:layout_constraintBottom_toBottomOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent"/>
</androidx.constraintlayout.widget.ConstraintLayout>
</file>

<file path="app/src/main/res/layout/fragment_search.xml">
<?xml version="1.0" encoding="utf-8"?>
<androidx.constraintlayout.widget.ConstraintLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    tools:context=".fragments.SearchFragment">

    <!-- Prominent search field -->
    <com.google.android.material.textfield.TextInputLayout
        android:id="@+id/tilSearch"
        style="@style/Widget.Fludde.TextField.Outlined"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:layout_marginStart="@dimen/space_16"
        android:layout_marginEnd="@dimen/space_8"
        android:layout_marginTop="@dimen/space_16"
        app:placeholderText="@string/hint_search_user"
        app:startIconDrawable="@drawable/ic_search_24"
        app:layout_constraintTop_toTopOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toStartOf="@id/btSearch">

        <com.google.android.material.textfield.TextInputEditText
            android:id="@+id/etSearchFieldUser"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:hint="@string/hint_search_user"
            android:imeOptions="actionSearch"
            android:inputType="textPersonName"
            android:maxLines="1"
            android:singleLine="true" />
    </com.google.android.material.textfield.TextInputLayout>

    <!-- Consistent primary action button -->
    <com.google.android.material.button.MaterialButton
        android:id="@+id/btSearch"
        style="@style/Widget.Fludde.Button.Primary"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_marginEnd="@dimen/space_16"
        android:layout_marginTop="@dimen/space_16"
        android:text="@string/action_search"
        android:contentDescription="@string/action_search"
        app:layout_constraintTop_toTopOf="parent"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintBottom_toBottomOf="@id/tilSearch" />

    <!-- Friendly empty state (shows when no results) -->
    <LinearLayout
        android:id="@+id/emptyState"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:orientation="vertical"
        android:gravity="center_horizontal"
        android:padding="@dimen/space_16"
        android:visibility="gone"
        app:layout_constraintTop_toBottomOf="@id/tilSearch"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent">

        <ImageView
            android:layout_width="@dimen/icon_size_lg"
            android:layout_height="@dimen/icon_size_lg"
            android:contentDescription="@string/empty_search_title"
            android:src="@drawable/ic_search_24"
            android:tint="?attr/colorOutline" />

        <TextView
            android:id="@+id/tvEmptyTitle"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:layout_marginTop="@dimen/space_8"
            android:text="@string/empty_search_title"
            android:textAppearance="@style/TextAppearance.Material3.TitleMedium" />

        <TextView
            android:id="@+id/tvEmptyMessage"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:layout_marginTop="@dimen/space_4"
            android:text="@string/empty_search_message"
            android:textAppearance="@style/TextAppearance.Material3.BodyMedium" />
    </LinearLayout>

    <!-- Results list: consistent thumbnail + title layout via users_query.xml -->
    <androidx.recyclerview.widget.RecyclerView
        android:id="@+id/rvUserQuery"
        android:layout_width="0dp"
        android:layout_height="0dp"
        android:layout_marginTop="@dimen/space_12"
        android:clipToPadding="false"
        android:padding="@dimen/space_8"
        app:layout_constraintTop_toBottomOf="@id/tilSearch"
        app:layout_constraintBottom_toBottomOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent"
        tools:listitem="@layout/users_query" />

</androidx.constraintlayout.widget.ConstraintLayout>
</file>

<file path="app/src/main/res/layout/music_content_post.xml">
<?xml version="1.0" encoding="utf-8"?>
<com.google.android.material.card.MaterialCardView
    xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:id="@+id/cvMusicPostLayout"
    android:layout_width="wrap_content"
    android:layout_height="wrap_content"
    android:layout_marginStart="@dimen/space_8"
    android:layout_marginTop="@dimen/space_8"
    android:layout_marginBottom="@dimen/space_8"
    android:clickable="true"
    android:focusable="true"
    android:checkable="true"
    app:cardUseCompatPadding="true"
    app:cardBackgroundColor="@color/card_bg_selector"
    app:strokeColor="@color/card_stroke_selector"
    app:strokeWidth="@dimen/divider_thin"
    app:rippleColor="@color/ripple_stateful">

    <androidx.constraintlayout.widget.ConstraintLayout
        android:id="@+id/ccMusicFrameLayout"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:padding="@dimen/space_8">

        <com.google.android.material.imageview.ShapeableImageView
            android:id="@+id/ivAlbumCoverImage"
            android:layout_width="@dimen/image_square_sm"
            android:layout_height="@dimen/image_square_sm"
            android:contentDescription="@string/cd_album_cover"
            android:scaleType="centerCrop"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintTop_toTopOf="parent"
            app:shapeAppearanceOverlay="@style/ShapeAppearance.Fludde.Medium"
            tools:srcCompat="@drawable/placeholder_square" />

        <TextView
            android:id="@+id/tvSongTitle"
            android:layout_width="@dimen/image_square_sm"
            android:layout_height="wrap_content"
            android:layout_marginTop="@dimen/space_4"
            android:ellipsize="end"
            android:maxLines="2"
            android:textAlignment="center"
            android:textAppearance="@style/TextAppearance.Material3.TitleSmall"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintTop_toBottomOf="@id/ivAlbumCoverImage"
            tools:text="Some Very Long Song Title That Truncates…" />

        <TextView
            android:id="@+id/tvArtistName"
            android:layout_width="@dimen/image_square_sm"
            android:layout_height="wrap_content"
            android:ellipsize="end"
            android:maxLines="1"
            android:textAlignment="center"
            android:textAppearance="@style/TextAppearance.Material3.LabelMedium"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintTop_toBottomOf="@id/tvSongTitle"
            tools:text="Artist" />
    </androidx.constraintlayout.widget.ConstraintLayout>
</com.google.android.material.card.MaterialCardView>
</file>

<file path="app/src/main/res/layout/user_profile.xml">
<?xml version="1.0" encoding="utf-8"?>
<androidx.constraintlayout.widget.ConstraintLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent">

    <com.google.android.material.imageview.ShapeableImageView
        android:id="@+id/ivProfilePic"
        android:layout_width="@dimen/avatar_xl"
        android:layout_height="@dimen/avatar_xl"
        android:contentDescription="@string/cd_profile_picture"
        app:shapeAppearanceOverlay="@style/ShapeAppearance.Fludde.Circular"
        app:layout_constraintTop_toTopOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent"
        android:layout_marginTop="@dimen/space_24"
        tools:srcCompat="@drawable/placeholder_avatar" />

    <TextView
        android:id="@+id/tvUserName"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:textAppearance="@style/TextAppearance.Material3.TitleMedium"
        app:layout_constraintTop_toBottomOf="@id/ivProfilePic"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent"
        android:layout_marginTop="@dimen/space_12"
        android:hint="@string/johndoe2016" />

    <TextView
        android:id="@+id/tvEmail"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:textAppearance="@style/TextAppearance.Material3.BodyMedium"
        app:layout_constraintTop_toBottomOf="@id/tvUserName"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent"
        android:layout_marginTop="@dimen/space_4"
        android:hint="@string/johndoe_youknow_com" />

    <ImageButton
        android:id="@+id/ibtnLogout"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:contentDescription="@string/action_logout"
        android:src="@drawable/ic_person_24"
        app:layout_constraintBottom_toBottomOf="parent"
        app:layout_constraintEnd_toEndOf="parent"
        android:layout_marginEnd="@dimen/space_16"
        android:layout_marginBottom="@dimen/space_16" />
</androidx.constraintlayout.widget.ConstraintLayout>
</file>

<file path="app/src/main/res/values/themes.xml">
<?xml version="1.0" encoding="utf-8"?>
<resources xmlns:tools="http://schemas.android.com/tools">

    <!-- Material 3 base theme (Views). Keep it simple so aapt can resolve everything. -->
    <style name="Theme.Fludde" parent="Theme.Material3.DayNight.NoActionBar">

        <!-- Primary brand colors (light fallback) -->
        <item name="colorPrimary">@color/md_theme_light_primary</item>
        <item name="colorOnPrimary">@color/md_theme_light_onPrimary</item>
        <item name="colorPrimaryContainer">@color/md_theme_light_primaryContainer</item>
        <item name="colorOnPrimaryContainer">@color/md_theme_light_onPrimaryContainer</item>

        <item name="colorSecondary">@color/md_theme_light_secondary</item>
        <item name="colorOnSecondary">@color/md_theme_light_onSecondary</item>
        <item name="colorSecondaryContainer">@color/md_theme_light_secondaryContainer</item>
        <item name="colorOnSecondaryContainer">@color/md_theme_light_onSecondaryContainer</item>

        <item name="colorTertiary">@color/md_theme_light_tertiary</item>
        <item name="colorOnTertiary">@color/md_theme_light_onTertiary</item>
        <item name="colorTertiaryContainer">@color/md_theme_light_tertiaryContainer</item>
        <item name="colorOnTertiaryContainer">@color/md_theme_light_onTertiaryContainer</item>

        <item name="colorError">@color/md_theme_light_error</item>
        <item name="colorOnError">@color/md_theme_light_onError</item>
        <item name="colorErrorContainer">@color/md_theme_light_errorContainer</item>
        <item name="colorOnErrorContainer">@color/md_theme_light_onErrorContainer</item>

        <item name="colorSurface">@color/md_theme_light_surface</item>
        <item name="colorOnSurface">@color/md_theme_light_onSurface</item>
        <item name="colorSurfaceVariant">@color/md_theme_light_surfaceVariant</item>
        <item name="colorOnSurfaceVariant">@color/md_theme_light_onSurfaceVariant</item>
        <item name="colorOutline">@color/md_theme_light_outline</item>

        <!-- ⛔ Removed problem attrs to stop AAPT errors:
             - colorBackground
             - colorInverseSurface / colorInverseOnSurface / colorInversePrimary / colorScrim
             - materialColorSurfaceContainer* tokens
             - navigationBarStyle
             - floatingActionButtonStyle
        -->

        <!-- Shapes -->
        <item name="shapeAppearanceSmallComponent">@style/ShapeAppearance.Fludde.Medium</item>
        <item name="shapeAppearanceMediumComponent">@style/ShapeAppearance.Fludde.Medium</item>
        <item name="shapeAppearanceLargeComponent">@style/ShapeAppearance.Fludde.Large</item>

        <!-- Default widget styles that are safe to set globally -->
        <item name="materialButtonStyle">@style/Widget.Material3.Button</item>
        <item name="chipStyle">@style/Widget.Material3.Chip.Assist</item>
        <item name="materialCardViewStyle">@style/Widget.Fludde.Card</item>
        <item name="textInputStyle">@style/Widget.Material3.TextInputLayout.FilledBox</item>

        <!-- Edge-to-edge system bars -->
        <item name="android:statusBarColor">@android:color/transparent</item>
        <item name="android:navigationBarColor">@android:color/transparent</item>
        <item name="android:navigationBarDividerColor">@android:color/transparent</item>
        <item name="android:windowLightStatusBar">true</item>
        <item name="android:windowLightNavigationBar">true</item>
        <item name="android:enforceStatusBarContrast">false</item>
        <item name="android:enforceNavigationBarContrast">false</item>
        <item name="android:windowLayoutInDisplayCutoutMode">shortEdges</item>
        <item name="android:windowDrawsSystemBarBackgrounds">true</item>
        <item name="android:windowIsTranslucent">false</item>
        <item name="android:colorControlHighlight">?attr/colorPrimary</item>
        <item name="android:forceDarkAllowed">false</item>
    </style>

</resources>
</file>

<file path="app/src/main/res/values-night/themes.xml">
<?xml version="1.0" encoding="utf-8"?>
<resources xmlns:tools="http://schemas.android.com/tools">

    <style name="Theme.Fludde" parent="Theme.Material3.DayNight.NoActionBar">

        <!-- Primary brand colors (dark fallback) -->
        <item name="colorPrimary">@color/md_theme_dark_primary</item>
        <item name="colorOnPrimary">@color/md_theme_dark_onPrimary</item>
        <item name="colorPrimaryContainer">@color/md_theme_dark_primaryContainer</item>
        <item name="colorOnPrimaryContainer">@color/md_theme_dark_onPrimaryContainer</item>

        <item name="colorSecondary">@color/md_theme_dark_secondary</item>
        <item name="colorOnSecondary">@color/md_theme_dark_onSecondary</item>
        <item name="colorSecondaryContainer">@color/md_theme_dark_secondaryContainer</item>
        <item name="colorOnSecondaryContainer">@color/md_theme_dark_onSecondaryContainer</item>

        <item name="colorTertiary">@color/md_theme_dark_tertiary</item>
        <item name="colorOnTertiary">@color/md_theme_dark_onTertiary</item>
        <item name="colorTertiaryContainer">@color/md_theme_dark_tertiaryContainer</item>
        <item name="colorOnTertiaryContainer">@color/md_theme_dark_onTertiaryContainer</item>

        <item name="colorError">@color/md_theme_dark_error</item>
        <item name="colorOnError">@color/md_theme_dark_onError</item>
        <item name="colorErrorContainer">@color/md_theme_dark_errorContainer</item>
        <item name="colorOnErrorContainer">@color/md_theme_dark_onErrorContainer</item>

        <item name="colorSurface">@color/md_theme_dark_surface</item>
        <item name="colorOnSurface">@color/md_theme_dark_onSurface</item>
        <item name="colorSurfaceVariant">@color/md_theme_dark_surfaceVariant</item>
        <item name="colorOnSurfaceVariant">@color/md_theme_dark_onSurfaceVariant</item>
        <item name="colorOutline">@color/md_theme_dark_outline</item>

        <!-- Same removals as light theme (see notes there). -->

        <!-- Shapes -->
        <item name="shapeAppearanceSmallComponent">@style/ShapeAppearance.Fludde.Medium</item>
        <item name="shapeAppearanceMediumComponent">@style/ShapeAppearance.Fludde.Medium</item>
        <item name="shapeAppearanceLargeComponent">@style/ShapeAppearance.Fludde.Large</item>

        <!-- Default widget styles -->
        <item name="materialButtonStyle">@style/Widget.Material3.Button</item>
        <item name="chipStyle">@style/Widget.Material3.Chip.Assist</item>
        <item name="materialCardViewStyle">@style/Widget.Fludde.Card</item>
        <item name="textInputStyle">@style/Widget.Material3.TextInputLayout.FilledBox</item>

        <!-- Edge-to-edge (light icons on dark bars) -->
        <item name="android:statusBarColor">@android:color/transparent</item>
        <item name="android:navigationBarColor">@android:color/transparent</item>
        <item name="android:navigationBarDividerColor">@android:color/transparent</item>
        <item name="android:windowLightStatusBar">false</item>
        <item name="android:windowLightNavigationBar">false</item>
        <item name="android:enforceStatusBarContrast">false</item>
        <item name="android:enforceNavigationBarContrast">false</item>
        <item name="android:windowLayoutInDisplayCutoutMode">shortEdges</item>
        <item name="android:windowDrawsSystemBarBackgrounds">true</item>
        <item name="android:windowIsTranslucent">false</item>
        <item name="android:colorControlHighlight">?attr/colorPrimary</item>
        <item name="android:forceDarkAllowed">false</item>
    </style>

</resources>
</file>

<file path="gradle/wrapper/gradle-wrapper.properties">
distributionBase=GRADLE_USER_HOME
distributionPath=wrapper/dists
distributionSha256Sum=d725d707bfabd4dfdc958c624003b3c80accc03f7037b5122c4b1d0ef15cecab
distributionUrl=https\://services.gradle.org/distributions/gradle-8.9-bin.zip
networkTimeout=10000
validateDistributionUrl=true
zipStoreBase=GRADLE_USER_HOME
zipStorePath=wrapper/dists
</file>

<file path="gradlew">
#!/bin/sh

#
# Copyright © 2015-2021 the original authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# SPDX-License-Identifier: Apache-2.0
#

##############################################################################
#
#   Gradle start up script for POSIX generated by Gradle.
#
#   Important for running:
#
#   (1) You need a POSIX-compliant shell to run this script. If your /bin/sh is
#       noncompliant, but you have some other compliant shell such as ksh or
#       bash, then to run this script, type that shell name before the whole
#       command line, like:
#
#           ksh Gradle
#
#       Busybox and similar reduced shells will NOT work, because this script
#       requires all of these POSIX shell features:
#         * functions;
#         * expansions «$var», «${var}», «${var:-default}», «${var+SET}»,
#           «${var#prefix}», «${var%suffix}», and «$( cmd )»;
#         * compound commands having a testable exit status, especially «case»;
#         * various built-in commands including «command», «set», and «ulimit».
#
#   Important for patching:
#
#   (2) This script targets any POSIX shell, so it avoids extensions provided
#       by Bash, Ksh, etc; in particular arrays are avoided.
#
#       The "traditional" practice of packing multiple parameters into a
#       space-separated string is a well documented source of bugs and security
#       problems, so this is (mostly) avoided, by progressively accumulating
#       options in "$@", and eventually passing that to Java.
#
#       Where the inherited environment variables (DEFAULT_JVM_OPTS, JAVA_OPTS,
#       and GRADLE_OPTS) rely on word-splitting, this is performed explicitly;
#       see the in-line comments for details.
#
#       There are tweaks for specific operating systems such as AIX, CygWin,
#       Darwin, MinGW, and NonStop.
#
#   (3) This script is generated from the Groovy template
#       https://github.com/gradle/gradle/blob/HEAD/platforms/jvm/plugins-application/src/main/resources/org/gradle/api/internal/plugins/unixStartScript.txt
#       within the Gradle project.
#
#       You can find Gradle at https://github.com/gradle/gradle/.
#
##############################################################################

# Attempt to set APP_HOME

# Resolve links: $0 may be a link
app_path=$0

# Need this for daisy-chained symlinks.
while
    APP_HOME=${app_path%"${app_path##*/}"}  # leaves a trailing /; empty if no leading path
    [ -h "$app_path" ]
do
    ls=$( ls -ld "$app_path" )
    link=${ls#*' -> '}
    case $link in             #(
      /*)   app_path=$link ;; #(
      *)    app_path=$APP_HOME$link ;;
    esac
done

# This is normally unused
# shellcheck disable=SC2034
APP_BASE_NAME=${0##*/}
# Discard cd standard output in case $CDPATH is set (https://github.com/gradle/gradle/issues/25036)
APP_HOME=$( cd -P "${APP_HOME:-./}" > /dev/null && printf '%s
' "$PWD" ) || exit

# Use the maximum available, or set MAX_FD != -1 to use that value.
MAX_FD=maximum

warn () {
    echo "$*"
} >&2

die () {
    echo
    echo "$*"
    echo
    exit 1
} >&2

# OS specific support (must be 'true' or 'false').
cygwin=false
msys=false
darwin=false
nonstop=false
case "$( uname )" in                #(
  CYGWIN* )         cygwin=true  ;; #(
  Darwin* )         darwin=true  ;; #(
  MSYS* | MINGW* )  msys=true    ;; #(
  NONSTOP* )        nonstop=true ;;
esac

CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar


# Determine the Java command to use to start the JVM.
if [ -n "$JAVA_HOME" ] ; then
    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
        # IBM's JDK on AIX uses strange locations for the executables
        JAVACMD=$JAVA_HOME/jre/sh/java
    else
        JAVACMD=$JAVA_HOME/bin/java
    fi
    if [ ! -x "$JAVACMD" ] ; then
        die "ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME

Please set the JAVA_HOME variable in your environment to match the
location of your Java installation."
    fi
else
    JAVACMD=java
    if ! command -v java >/dev/null 2>&1
    then
        die "ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.

Please set the JAVA_HOME variable in your environment to match the
location of your Java installation."
    fi
fi

# Increase the maximum file descriptors if we can.
if ! "$cygwin" && ! "$darwin" && ! "$nonstop" ; then
    case $MAX_FD in #(
      max*)
        # In POSIX sh, ulimit -H is undefined. That's why the result is checked to see if it worked.
        # shellcheck disable=SC2039,SC3045
        MAX_FD=$( ulimit -H -n ) ||
            warn "Could not query maximum file descriptor limit"
    esac
    case $MAX_FD in  #(
      '' | soft) :;; #(
      *)
        # In POSIX sh, ulimit -n is undefined. That's why the result is checked to see if it worked.
        # shellcheck disable=SC2039,SC3045
        ulimit -n "$MAX_FD" ||
            warn "Could not set maximum file descriptor limit to $MAX_FD"
    esac
fi

# Collect all arguments for the java command, stacking in reverse order:
#   * args from the command line
#   * the main class name
#   * -classpath
#   * -D...appname settings
#   * --module-path (only if needed)
#   * DEFAULT_JVM_OPTS, JAVA_OPTS, and GRADLE_OPTS environment variables.

# For Cygwin or MSYS, switch paths to Windows format before running java
if "$cygwin" || "$msys" ; then
    APP_HOME=$( cygpath --path --mixed "$APP_HOME" )
    CLASSPATH=$( cygpath --path --mixed "$CLASSPATH" )

    JAVACMD=$( cygpath --unix "$JAVACMD" )

    # Now convert the arguments - kludge to limit ourselves to /bin/sh
    for arg do
        if
            case $arg in                                #(
              -*)   false ;;                            # don't mess with options #(
              /?*)  t=${arg#/} t=/${t%%/*}              # looks like a POSIX filepath
                    [ -e "$t" ] ;;                      #(
              *)    false ;;
            esac
        then
            arg=$( cygpath --path --ignore --mixed "$arg" )
        fi
        # Roll the args list around exactly as many times as the number of
        # args, so each arg winds up back in the position where it started, but
        # possibly modified.
        #
        # NB: a `for` loop captures its iteration list before it begins, so
        # changing the positional parameters here affects neither the number of
        # iterations, nor the values presented in `arg`.
        shift                   # remove old arg
        set -- "$@" "$arg"      # push replacement arg
    done
fi


# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
DEFAULT_JVM_OPTS='"-Xmx64m" "-Xms64m"'

# Collect all arguments for the java command:
#   * DEFAULT_JVM_OPTS, JAVA_OPTS, JAVA_OPTS, and optsEnvironmentVar are not allowed to contain shell fragments,
#     and any embedded shellness will be escaped.
#   * For example: A user cannot expect ${Hostname} to be expanded, as it is an environment variable and will be
#     treated as '${Hostname}' itself on the command line.

set -- \
        "-Dorg.gradle.appname=$APP_BASE_NAME" \
        -classpath "$CLASSPATH" \
        org.gradle.wrapper.GradleWrapperMain \
        "$@"

# Stop when "xargs" is not available.
if ! command -v xargs >/dev/null 2>&1
then
    die "xargs is not available"
fi

# Use "xargs" to parse quoted args.
#
# With -n1 it outputs one arg per line, with the quotes and backslashes removed.
#
# In Bash we could simply go:
#
#   readarray ARGS < <( xargs -n1 <<<"$var" ) &&
#   set -- "${ARGS[@]}" "$@"
#
# but POSIX shell has neither arrays nor command substitution, so instead we
# post-process each arg (as a line of input to sed) to backslash-escape any
# character that might be a shell metacharacter, then use eval to reverse
# that process (while maintaining the separation between arguments), and wrap
# the whole thing up as a single "set" statement.
#
# This will of course break if any of these variables contains a newline or
# an unmatched quote.
#

eval "set -- $(
        printf '%s\n' "$DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS" |
        xargs -n1 |
        sed ' s~[^-[:alnum:]+,./:=@_]~\\&~g; ' |
        tr '\n' ' '
    )" '"$@"'

exec "$JAVACMD" "$@"
</file>

<file path="gradlew.bat">
@rem
@rem Copyright 2015 the original author or authors.
@rem
@rem Licensed under the Apache License, Version 2.0 (the "License");
@rem you may not use this file except in compliance with the License.
@rem You may obtain a copy of the License at
@rem
@rem      https://www.apache.org/licenses/LICENSE-2.0
@rem
@rem Unless required by applicable law or agreed to in writing, software
@rem distributed under the License is distributed on an "AS IS" BASIS,
@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@rem See the License for the specific language governing permissions and
@rem limitations under the License.
@rem
@rem SPDX-License-Identifier: Apache-2.0
@rem

@if "%DEBUG%"=="" @echo off
@rem ##########################################################################
@rem
@rem  Gradle startup script for Windows
@rem
@rem ##########################################################################

@rem Set local scope for the variables with windows NT shell
if "%OS%"=="Windows_NT" setlocal

set DIRNAME=%~dp0
if "%DIRNAME%"=="" set DIRNAME=.
@rem This is normally unused
set APP_BASE_NAME=%~n0
set APP_HOME=%DIRNAME%

@rem Resolve any "." and ".." in APP_HOME to make it shorter.
for %%i in ("%APP_HOME%") do set APP_HOME=%%~fi

@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
set DEFAULT_JVM_OPTS="-Xmx64m" "-Xms64m"

@rem Find java.exe
if defined JAVA_HOME goto findJavaFromJavaHome

set JAVA_EXE=java.exe
%JAVA_EXE% -version >NUL 2>&1
if %ERRORLEVEL% equ 0 goto execute

echo. 1>&2
echo ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH. 1>&2
echo. 1>&2
echo Please set the JAVA_HOME variable in your environment to match the 1>&2
echo location of your Java installation. 1>&2

goto fail

:findJavaFromJavaHome
set JAVA_HOME=%JAVA_HOME:"=%
set JAVA_EXE=%JAVA_HOME%/bin/java.exe

if exist "%JAVA_EXE%" goto execute

echo. 1>&2
echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME% 1>&2
echo. 1>&2
echo Please set the JAVA_HOME variable in your environment to match the 1>&2
echo location of your Java installation. 1>&2

goto fail

:execute
@rem Setup the command line

set CLASSPATH=%APP_HOME%\gradle\wrapper\gradle-wrapper.jar


@rem Execute Gradle
"%JAVA_EXE%" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% "-Dorg.gradle.appname=%APP_BASE_NAME%" -classpath "%CLASSPATH%" org.gradle.wrapper.GradleWrapperMain %*

:end
@rem End local scope for the variables with windows NT shell
if %ERRORLEVEL% equ 0 goto mainEnd

:fail
rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of
rem the _cmd.exe /c_ return code!
set EXIT_CODE=%ERRORLEVEL%
if %EXIT_CODE% equ 0 set EXIT_CODE=1
if not ""=="%GRADLE_EXIT_CONSOLE%" exit %EXIT_CODE%
exit /b %EXIT_CODE%

:mainEnd
if "%OS%"=="Windows_NT" endlocal

:omega
</file>

<file path="app/src/main/java/com/example/fludde/adapters/PostAdapter.java">
package com.example.fludde.adapters;

import android.content.Context;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.TextView;

import androidx.annotation.NonNull;
import androidx.recyclerview.widget.RecyclerView;

import com.example.fludde.R;
import com.example.fludde.model.PostUi;
import com.example.fludde.utils.GlideExtensions;

import java.util.List;

public class PostAdapter extends RecyclerView.Adapter<PostAdapter.ViewHolder> {

    private final Context context;
    private final List<PostUi> posts;

    public PostAdapter(Context context, List<PostUi> posts) {
        this.context = context;
        this.posts = posts;
        setHasStableIds(true);
    }

    @Override
    public long getItemId(int position) {
        String key = posts.get(position).getTitle() + "|" + posts.get(position).getUserName() + "|" + position;
        return key.hashCode();
    }

    @NonNull
    @Override
    public ViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {
        View view= LayoutInflater.from(context).inflate(R.layout.item_post, parent, false);
        view.setBackgroundResource(R.drawable.list_item_bg);
        return new ViewHolder(view);
    }

    @Override
    public void onBindViewHolder(@NonNull ViewHolder holder, int position) {
        holder.bind(posts.get(position));
    }

    @Override
    public int getItemCount() { return posts.size(); }

    class ViewHolder extends RecyclerView.ViewHolder{
        private final TextView tvContentCategory;
        private final TextView tvContentDescription;
        private final TextView tvContentTitle;
        private final TextView tvUsername;
        private final TextView tvReview;
        private final ImageView ivUserPic;
        private final ImageView ivContent;

        ViewHolder(@NonNull View itemView) {
            super(itemView);
            tvContentCategory = itemView.findViewById(R.id.tvContentCategory);
            tvContentDescription = itemView.findViewById(R.id.tvContentDescription);
            tvContentTitle = itemView.findViewById(R.id.tvContentTitle);
            tvUsername = itemView.findViewById(R.id.tvUsername);
            tvReview = itemView.findViewById(R.id.tvReview);
            ivUserPic = itemView.findViewById(R.id.ivUserPic);
            ivContent = itemView.findViewById(R.id.ivContent);

            itemView.setOnLongClickListener(v -> {
                com.example.fludde.utils.Haptics.longPress(v);
                return false;
            });
        }

        void bind(PostUi post) {
            tvContentCategory.setText(post.getCategory());
            tvContentDescription.setText(post.getDescription());
            tvContentTitle.setText(post.getTitle());
            tvReview.setText(post.getReview());
            tvUsername.setText(post.getUserName());

            GlideExtensions.loadPoster(ivContent, post.getContentImageUrl());
            GlideExtensions.loadAvatar(ivUserPic, post.getUserImageUrl());
        }
    }
}
</file>

<file path="app/src/main/java/com/example/fludde/fragments/PostFragment.java">
package com.example.fludde.fragments;

import android.annotation.SuppressLint;
import android.os.Bundle;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.fragment.app.Fragment;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;

import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.TextView;

import com.example.fludde.BuildConfig;
import com.example.fludde.Post;
import com.example.fludde.R;
import com.example.fludde.adapters.PostAdapter;
import com.example.fludde.model.PostUi;
import com.example.fludde.utils.MockData;
import com.facebook.shimmer.ShimmerFrameLayout;
import com.parse.FindCallback;
import com.parse.ParseException;
import com.parse.ParseFile;
import com.parse.ParseQuery;
import com.parse.ParseUser;

import java.util.ArrayList;
import java.util.List;

/**
 * Timeline / feed fragment with very defensive view lookups and detailed logging.
 * We scope child lookups under the included error card to avoid nulls from <include>.
 */
public class PostFragment extends Fragment {

    private static final String TAG = "PostFragment";

    private RecyclerView rvPost;
    protected PostAdapter adapter;
    protected final List<PostUi> allPosts = new ArrayList<>();

    private ShimmerFrameLayout shimmer;
    private View errorCard;          // root of the included error layout
    private TextView tvErrorMessage; // found under errorCard
    private Button btnRetry;         // found under errorCard

    public PostFragment() {}

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
                             Bundle savedInstanceState) {
        Log.d(TAG, "onCreateView() inflating fragment_post");
        View v = inflater.inflate(R.layout.fragment_post, container, false);
        Log.d(TAG, "onCreateView() inflate OK, view=" + v);
        return v;
    }

    @Override
    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {
        Log.d(TAG, "onViewCreated() start");
        super.onViewCreated(view, savedInstanceState);

        // --- find views ---
        rvPost = view.findViewById(R.id.rvPost);
        shimmer = view.findViewById(R.id.shimmerContainer);

        // Included error card root (android:id set on <include> tag)
        errorCard = view.findViewById(R.id.inlineError);
        if (errorCard == null) {
            Log.e(TAG, "onViewCreated(): errorCard is NULL (inlineError not found). " +
                    "Check fragment_post.xml <include> has android:id='@id/inlineError'.");
        } else {
            // Scope lookups to the included root to avoid accidental nulls
            tvErrorMessage = errorCard.findViewById(R.id.tvErrorMessage);
            btnRetry = errorCard.findViewById(R.id.btnRetry);
            Log.d(TAG, "onViewCreated(): errorCard=" + idName(errorCard) +
                    " tvErrorMessage=" + idName(tvErrorMessage) +
                    " btnRetry=" + idName(btnRetry));
        }

        // --- recycler setup ---
        adapter = new PostAdapter(requireContext(), allPosts);
        rvPost.setAdapter(adapter);
        rvPost.setLayoutManager(new LinearLayoutManager(getContext()));
        rvPost.setHasFixedSize(true);
        Log.d(TAG, "onViewCreated(): RecyclerView + adapter wired, items=" + allPosts.size());

        if (btnRetry != null) {
            btnRetry.setOnClickListener(v -> {
                Log.d(TAG, "Retry tapped");
                queryPosts();
            });
        } else {
            Log.w(TAG, "onViewCreated(): btnRetry null; retry won’t work");
        }

        // Initial state
        showError(false, null);
        showLoading(true);
        queryPosts();
        Log.d(TAG, "onViewCreated() end (query issued)");
    }

    private void showLoading(boolean show) {
        Log.d(TAG, "showLoading(" + show + ")");
        if (shimmer == null || rvPost == null) {
            Log.w(TAG, "showLoading(): shimmer or rvPost null; shimmer=" + (shimmer != null) + " rv=" + (rvPost != null));
            return;
        }
        try {
            if (show) {
                shimmer.setVisibility(View.VISIBLE);
                shimmer.startShimmer();
                rvPost.setAlpha(0f);
                Log.d(TAG, "showLoading(): shimmer started");
            } else {
                shimmer.stopShimmer();
                shimmer.setVisibility(View.GONE);
                rvPost.setAlpha(1f);
                Log.d(TAG, "showLoading(): shimmer stopped and hidden");
            }
        } catch (Throwable t) {
            Log.e(TAG, "showLoading(): error toggling shimmer", t);
        }
    }

    private void showError(boolean show, @Nullable String message) {
        Log.d(TAG, "showError(show=" + show + ", msg=" + (message == null ? "<null>" : message) + ")");
        try {
            if (errorCard != null) {
                errorCard.setVisibility(show ? View.VISIBLE : View.GONE);
                Log.d(TAG, "showError(): errorCard visibility set to " + (show ? "VISIBLE" : "GONE"));
            } else {
                Log.w(TAG, "showError(): errorCard null (cannot change visibility)");
            }

            if (show) {
                if (tvErrorMessage != null) {
                    tvErrorMessage.setText(message != null ? message : getString(R.string.error_load_feed));
                    Log.d(TAG, "showError(): tvErrorMessage updated");
                } else {
                    Log.e(TAG, "showError(): tvErrorMessage is NULL — cannot set text");
                }
            }
        } catch (Throwable t) {
            Log.e(TAG, "showError(): unexpected error", t);
        }
    }

    protected void queryPosts() {
        Log.d(TAG, "queryPosts(): begin; MOCK_MODE=" + BuildConfig.MOCK_MODE);
        showError(false, null);
        showLoading(true);

        if (BuildConfig.MOCK_MODE) {
            Log.d(TAG, "queryPosts(): using MockData");
            allPosts.clear();
            allPosts.addAll(MockData.mockPosts());
            Log.d(TAG, "queryPosts(): mock items loaded count=" + allPosts.size());
            adapter.notifyDataSetChanged();
            showLoading(false);
            return;
        }

        ParseQuery<Post> query = ParseQuery.getQuery(Post.class);
        query.include(Post.KEY_USER);
        query.setLimit(20);
        query.addAscendingOrder(Post.KEY_CREATED_AT);
        Log.d(TAG, "queryPosts(): dispatching Parse query; limit=20 sort=createdAt ASC");

        query.findInBackground(new FindCallback<Post>() {
            @SuppressLint("NotifyDataSetChanged")
            @Override
            public void done(List<Post> posts, ParseException e) {
                Log.d(TAG, "queryPosts(): callback; e=" + e + " postsCount=" + (posts == null ? -1 : posts.size()));
                showLoading(false);
                if (e != null) {
                    Log.e(TAG, "queryPosts(): Parse error", e);
                    showError(true, getString(R.string.error_load_feed));
                    return;
                }
                allPosts.clear();
                if (posts != null) {
                    for (Post p : posts) {
                        PostUi ui = mapToUi(p);
                        allPosts.add(ui);
                    }
                }
                Log.d(TAG, "queryPosts(): mapped UI items=" + allPosts.size());
                adapter.notifyDataSetChanged();
            }
        });
    }

    private PostUi mapToUi(Post p) {
        if (p == null) {
            Log.w(TAG, "mapToUi(): post null; returning empty");
            return new PostUi("", "", "", "", "", "", "");
        }
        String cat = safe(p.getCategory());
        String desc = safe(p.getDescription());
        String title = safe(p.getContentTitle());
        String rev = safe(p.getReview());

        String contentUrl = "";
        try {
            ParseFile f = p.getContentImage();
            if (f != null && f.getUrl() != null) contentUrl = f.getUrl();
        } catch (Exception ex) {
            Log.w(TAG, "mapToUi(): content image error", ex);
        }

        String username = "";
        String userUrl = "";
        try {
            ParseUser u = p.getUser();
            if (u != null) {
                if (u.getUsername() != null) username = u.getUsername();
                ParseFile avatar = u.getParseFile("image");
                if (avatar != null && avatar.getUrl() != null) userUrl = avatar.getUrl();
            }
        } catch (Exception ex) {
            Log.w(TAG, "mapToUi(): user/avatar error", ex);
        }

        Log.d(TAG, "mapToUi(): title=\"" + title + "\" user=\"" + username + "\" img?=" + (!contentUrl.isEmpty()));
        return new PostUi(cat, desc, title, rev, contentUrl, username, userUrl);
    }

    private static String safe(String s) { return s == null ? "" : s; }

    /** Pretty id name for logging (null-safe). */
    private String idName(View v) {
        if (v == null) return "null";
        try {
            int id = v.getId();
            if (id == View.NO_ID) return v.getClass().getSimpleName() + "(no-id)";
            return v.getClass().getSimpleName() + "(@" + getResources().getResourceEntryName(id) + ")";
        } catch (Exception ignore) {
            return v.getClass().getSimpleName() + "(id?)";
        }
    }
}
</file>

<file path="app/src/main/java/com/example/fludde/ParseApplication.java">
package com.example.fludde;

import android.app.Application;
import android.text.TextUtils;
import android.util.Log;

import com.parse.Parse;
import com.parse.ParseInstallation;
import com.parse.ParseObject;

import java.net.MalformedURLException;
import java.net.URL;

/**
 * Parse bootstrapping with defensive URL validation and MOCK_MODE support.
 */
public class ParseApplication extends Application {

    private static final String TAG = "ParseApplication";

    @Override
    public void onCreate() {
        super.onCreate();

        if (BuildConfig.MOCK_MODE) {
            Log.i(TAG, "MOCK_MODE=true → Skipping Parse.initialize() entirely.");
            // Still register subclasses so code referencing them compiles/loads fine (not required in mock though)
            try {
                ParseObject.registerSubclass(Post.class);
                ParseObject.registerSubclass(User.class);
            } catch (Throwable ignored) {}
            return;
        }

        final String appId = getString(R.string.back4app_app_id);
        final String clientKey = getString(R.string.back4app_client_key);
        final String serverUrl = getString(R.string.back4app_server_url);

        try {
            URL url = new URL(serverUrl);
            if (!("http".equals(url.getProtocol()) || "https".equals(url.getProtocol()))) {
                throw new MalformedURLException("Server URL must start with http or https");
            }
        } catch (MalformedURLException e) {
            throw new IllegalStateException(
                    "Invalid PARSE server URL: \"" + serverUrl + "\". " +
                            "It must be a full URL like https://parseapi.back4app.com/ .", e);
        }

        ParseObject.registerSubclass(Post.class);
        ParseObject.registerSubclass(User.class);

        Parse.setLogLevel(Parse.LOG_LEVEL_DEBUG);

        try {
            Parse.initialize(new Parse.Configuration.Builder(this)
                    .applicationId(appId)
                    .clientKey(clientKey)
                    .server(serverUrl)
                    .build());
            Log.i(TAG, "Parse.initialize ✓ server=" + serverUrl);

            boolean hasTmdbKey = !TextUtils.isEmpty(BuildConfig.TMDB_API_KEY);
            Log.i(TAG, "BuildConfig.TMDB_API_KEY present=" + hasTmdbKey +
                       (hasTmdbKey ? " (len=" + BuildConfig.TMDB_API_KEY.length() + ")" : ""));
        } catch (Throwable t) {
            Log.e(TAG, "Parse.initialize ✗", t);
            throw t instanceof RuntimeException ? (RuntimeException) t : new RuntimeException(t);
        }

        try {
            ParseInstallation.getCurrentInstallation().saveInBackground();
        } catch (Throwable t) {
            Log.w(TAG, "ParseInstallation save failed (non-fatal): " + t.getMessage());
        }
    }
}
</file>

<file path="app/src/main/res/layout/content_post_img.xml">
<?xml version="1.0" encoding="utf-8"?>
<com.google.android.material.card.MaterialCardView
    xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:id="@+id/cvContentPostLayout"
    android:layout_width="wrap_content"
    android:layout_height="wrap_content"
    android:layout_marginStart="@dimen/space_8"
    android:layout_marginTop="@dimen/space_8"
    android:layout_marginBottom="@dimen/space_8"
    android:clickable="true"
    android:focusable="true"
    android:checkable="true"
    app:cardUseCompatPadding="true"
    app:cardBackgroundColor="@color/card_bg_selector"
    app:strokeColor="@color/card_stroke_selector"
    app:strokeWidth="@dimen/divider_thin"
    app:rippleColor="@color/ripple_stateful">

    <androidx.constraintlayout.widget.ConstraintLayout
        android:id="@+id/ccContentFrameLayout"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:padding="@dimen/space_8">

        <com.google.android.material.imageview.ShapeableImageView
            android:id="@+id/ivContentImage"
            android:layout_width="@dimen/poster_md_w"
            android:layout_height="@dimen/poster_md_h"
            android:contentDescription="@string/cd_content_image"
            android:scaleType="centerCrop"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintTop_toTopOf="parent"
            app:shapeAppearanceOverlay="@style/ShapeAppearance.Fludde.Medium"
            tools:srcCompat="@drawable/placeholder_poster" />

        <TextView
            android:id="@+id/tvImageContentTitle"
            android:layout_width="@dimen/poster_md_w"
            android:layout_height="wrap_content"
            android:layout_marginTop="@dimen/space_4"
            android:textAlignment="center"
            android:maxLines="2"
            android:ellipsize="end"
            android:textAppearance="@style/TextAppearance.Material3.LabelMedium"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintTop_toBottomOf="@id/ivContentImage"
            tools:text="Bad Boys II" />
    </androidx.constraintlayout.widget.ConstraintLayout>
</com.google.android.material.card.MaterialCardView>
</file>

<file path="app/src/main/res/layout/fragment_home.xml">
<?xml version="1.0" encoding="utf-8"?>
<androidx.constraintlayout.widget.ConstraintLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    android:id="@+id/home_root"
    android:layout_width="match_parent"
    android:layout_height="match_parent">

    <!-- Your feed list -->
    <androidx.recyclerview.widget.RecyclerView
        android:id="@+id/rvHomeFeed"
        android:layout_width="0dp"
        android:layout_height="0dp"
        android:clipToPadding="false"
        android:paddingStart="16dp"
        android:paddingEnd="16dp"
        app:layoutManager="androidx.recyclerview.widget.LinearLayoutManager"
        app:layout_constraintTop_toTopOf="parent"
        app:layout_constraintBottom_toTopOf="@+id/inlineError"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent"/>

    <!-- Simple progress indicator (optional; keep if your code uses it) -->
    <ProgressBar
        android:id="@+id/progress"
        style="?android:attr/progressBarStyleLarge"
        android:layout_width="48dp"
        android:layout_height="48dp"
        android:visibility="gone"
        app:layout_constraintTop_toTopOf="parent"
        app:layout_constraintBottom_toBottomOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent"/>

    <!-- Inline error card expected by HomeFragment.showError(...) -->
    <LinearLayout
        android:id="@+id/inlineError"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:orientation="vertical"
        android:padding="16dp"
        android:background="?attr/colorErrorContainer"
        android:visibility="gone"
        app:layout_constraintTop_toBottomOf="@+id/rvHomeFeed"
        app:layout_constraintBottom_toBottomOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent">

        <TextView
            android:id="@+id/tvErrorMessage"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:text="@string/generic_error_message"
            android:textAppearance="?attr/textAppearanceBodyLarge"
            android:paddingBottom="8dp"/>

        <Button
            android:id="@+id/btnRetry"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="@string/retry"/>
    </LinearLayout>

</androidx.constraintlayout.widget.ConstraintLayout>
</file>

<file path="app/src/main/res/layout/fragment_profile.xml">
<?xml version="1.0" encoding="utf-8"?>
<androidx.constraintlayout.widget.ConstraintLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    tools:context=".fragments.ProfileFragment">

    <!-- ───────────── Profile header (large top area) ───────────── -->
    <LinearLayout
        android:id="@+id/profileHeader"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:orientation="vertical"
        android:gravity="center_horizontal"
        android:padding="@dimen/space_24"
        app:layout_constraintTop_toTopOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent">

        <com.google.android.material.imageview.ShapeableImageView
            android:id="@+id/ivAvatar"
            android:layout_width="@dimen/avatar_xl"
            android:layout_height="@dimen/avatar_xl"
            android:contentDescription="@string/cd_profile_picture"
            app:shapeAppearanceOverlay="@style/ShapeAppearance.Fludde.Circular"
            tools:srcCompat="@drawable/placeholder_avatar" />

        <TextView
            android:id="@+id/tvUsername"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:layout_marginTop="@dimen/space_12"
            android:textAppearance="@style/TextAppearance.Material3.HeadlineSmall"
            tools:text="johndoe2016" />

        <TextView
            android:id="@+id/tvEmail"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:layout_marginTop="@dimen/space_4"
            android:textAppearance="@style/TextAppearance.Material3.BodyMedium"
            android:textColor="?attr/colorOnSurfaceVariant"
            tools:text="johndoe@youknow.com" />
    </LinearLayout>

    <!-- ───────────── Secondary actions: Edit / Logout ───────────── -->
    <LinearLayout
        android:id="@+id/headerActions"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:orientation="horizontal"
        android:gravity="center"
        android:paddingStart="@dimen/space_16"
        android:paddingEnd="@dimen/space_16"
        app:layout_constraintTop_toBottomOf="@id/profileHeader"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent">

        <com.google.android.material.button.MaterialButton
            android:id="@+id/btnEditProfile"
            style="@style/Widget.Fludde.Button.Tonal"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_marginEnd="@dimen/space_8"
            android:layout_weight="1"
            android:text="@string/action_edit_profile" />

        <com.google.android.material.button.MaterialButton
            android:id="@+id/btnLogout"
            style="@style/Widget.Fludde.Button.Outlined"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_marginStart="@dimen/space_8"
            android:layout_weight="1"
            android:text="@string/action_logout"
            android:contentDescription="@string/action_logout" />
    </LinearLayout>

    <!-- ───────────── Empty state (visible by default, until posts wired) ───────────── -->
    <LinearLayout
        android:id="@+id/emptyState"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:orientation="vertical"
        android:gravity="center_horizontal"
        android:padding="@dimen/space_24"
        app:layout_constraintTop_toBottomOf="@id/headerActions"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent">

        <ImageView
            android:layout_width="@dimen/icon_size_lg"
            android:layout_height="@dimen/icon_size_lg"
            android:contentDescription="@string/empty_profile_title"
            android:src="@drawable/ic_add_comment_24"
            android:tint="?attr/colorOutline" />

        <TextView
            android:id="@+id/tvEmptyTitle"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:layout_marginTop="@dimen/space_8"
            android:text="@string/empty_profile_title"
            android:textAppearance="@style/TextAppearance.Material3.TitleMedium" />

        <TextView
            android:id="@+id/tvEmptyMessage"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:layout_marginTop="@dimen/space_4"
            android:text="@string/empty_profile_message"
            android:textAppearance="@style/TextAppearance.Material3.BodyMedium" />

        <com.google.android.material.button.MaterialButton
            android:id="@+id/btnCreateFirstPost"
            style="@style/Widget.Fludde.Button.Primary"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:layout_marginTop="@dimen/space_16"
            android:text="@string/nav_compose" />
    </LinearLayout>

    <!-- Posts list placeholder (hidden) -->
    <androidx.recyclerview.widget.RecyclerView
        android:id="@+id/rvProfilePosts"
        android:layout_width="0dp"
        android:layout_height="0dp"
        android:visibility="gone"
        android:clipToPadding="false"
        android:paddingStart="@dimen/space_8"
        android:paddingEnd="@dimen/space_8"
        app:layout_constraintTop_toBottomOf="@id/headerActions"
        app:layout_constraintBottom_toBottomOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent"
        tools:listitem="@layout/item_post" />

</androidx.constraintlayout.widget.ConstraintLayout>
</file>

<file path="app/src/main/res/layout/item_post.xml">
<?xml version="1.0" encoding="utf-8"?>
<com.google.android.material.card.MaterialCardView
    xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    android:id="@+id/cvContent"
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    android:layout_marginStart="@dimen/space_8"
    android:layout_marginEnd="@dimen/space_8"
    android:layout_marginTop="@dimen/space_8"
    app:cardUseCompatPadding="true"
    app:rippleColor="@color/ripple_stateful">

    <androidx.constraintlayout.widget.ConstraintLayout
        android:id="@+id/cvLayout"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:padding="@dimen/space_16">

        <com.google.android.material.imageview.ShapeableImageView
            android:id="@+id/ivContent"
            android:layout_width="@dimen/poster_md_w"
            android:layout_height="@dimen/poster_md_h"
            android:contentDescription="@string/cd_content_image"
            android:scaleType="centerCrop"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintTop_toTopOf="parent"
            app:shapeAppearanceOverlay="@style/ShapeAppearance.Fludde.Medium"
            tools:srcCompat="@drawable/placeholder_poster" />

        <TextView
            android:id="@+id/tvContentTitle"
            android:layout_width="@dimen/poster_md_w"
            android:layout_height="wrap_content"
            android:layout_marginTop="@dimen/space_8"
            android:textAlignment="center"
            android:maxLines="1"
            android:ellipsize="end"
            android:textAppearance="@style/TextAppearance.Material3.TitleMedium"
            app:layout_constraintTop_toBottomOf="@+id/ivContent"
            app:layout_constraintStart_toStartOf="@+id/ivContent"
            tools:text="Bad Boys II" />

        <TextView
            android:id="@+id/tvContentCategory"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_marginStart="@dimen/space_16"
            android:layout_marginTop="@dimen/space_16"
            android:maxLines="1"
            android:ellipsize="end"
            android:textAppearance="@style/TextAppearance.Material3.LabelSmall"
            app:layout_constraintStart_toEndOf="@id/ivContent"
            app:layout_constraintTop_toTopOf="@id/ivContent"
            app:layout_constraintEnd_toEndOf="parent"
            tools:text="Movie" />

        <TextView
            android:id="@+id/tvContentDescription"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_marginTop="@dimen/space_8"
            android:layout_marginStart="@dimen/space_16"
            android:maxLines="4"
            android:ellipsize="end"
            android:textAppearance="@style/TextAppearance.Material3.BodyMedium"
            app:layout_constraintStart_toEndOf="@id/ivContent"
            app:layout_constraintTop_toBottomOf="@id/tvContentCategory"
            app:layout_constraintEnd_toEndOf="parent"
            tools:text="The drug ecstasy is flowing into Miami..." />

        <TextView
            android:id="@+id/tvReview"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_marginTop="@dimen/space_8"
            android:layout_marginStart="@dimen/space_16"
            android:maxLines="3"
            android:ellipsize="end"
            android:textAppearance="@style/TextAppearance.Material3.BodyMedium"
            app:layout_constraintStart_toEndOf="@id/ivContent"
            app:layout_constraintTop_toBottomOf="@id/tvContentDescription"
            app:layout_constraintEnd_toEndOf="parent"
            tools:text="Short personal review snippet goes here..." />

        <com.google.android.material.imageview.ShapeableImageView
            android:id="@+id/ivUserPic"
            android:layout_width="@dimen/avatar_md"
            android:layout_height="@dimen/avatar_md"
            android:layout_marginTop="@dimen/space_16"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintTop_toBottomOf="@id/tvContentTitle"
            app:shapeAppearanceOverlay="@style/ShapeAppearance.Fludde.Circular"
            android:contentDescription="@string/cd_user_avatar"
            tools:srcCompat="@drawable/placeholder_avatar" />

        <TextView
            android:id="@+id/tvUsername"
            android:layout_width="@dimen/avatar_md"
            android:layout_height="wrap_content"
            android:layout_marginTop="@dimen/space_4"
            android:gravity="center"
            android:textAppearance="@style/TextAppearance.Material3.LabelMedium"
            app:layout_constraintTop_toBottomOf="@+id/ivUserPic"
            app:layout_constraintStart_toStartOf="@+id/ivUserPic"
            tools:text="JohnDoe" />
    </androidx.constraintlayout.widget.ConstraintLayout>
</com.google.android.material.card.MaterialCardView>
</file>

<file path="app/src/main/res/layout/users_query.xml">
<?xml version="1.0" encoding="utf-8"?>
<com.google.android.material.card.MaterialCardView
    xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    android:layout_marginTop="@dimen/space_8"
    android:layout_marginEnd="@dimen/space_8"
    app:cardUseCompatPadding="true"
    app:rippleColor="@color/ripple_stateful"
    android:focusable="true"
    android:clickable="true">

    <RelativeLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:padding="@dimen/space_8">

        <com.google.android.material.imageview.ShapeableImageView
            android:id="@+id/ivUserImage"
            android:layout_width="@dimen/avatar_lg"
            android:layout_height="@dimen/avatar_lg"
            android:contentDescription="@string/cd_user_avatar"
            app:shapeAppearanceOverlay="@style/ShapeAppearance.Fludde.Circular"
            tools:srcCompat="@drawable/placeholder_avatar" />

        <TextView
            android:id="@+id/tvUName"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:layout_marginStart="@dimen/space_16"
            android:layout_toEndOf="@id/ivUserImage"
            android:layout_centerVertical="true"
            android:maxLines="1"
            android:ellipsize="end"
            android:textAppearance="@style/TextAppearance.Material3.TitleSmall"
            tools:text="John Doe" />
    </RelativeLayout>
</com.google.android.material.card.MaterialCardView>
</file>

<file path="app/src/main/res/values/colors.xml">
<resources>
    <!--
      Material 3 brand fallback palette for Views (Light & Dark).
      On Android 12+ your values-v31 Theme.Fludde inherits DynamicColors,
      so these act as stable fallbacks when dynamic color isn't available.
      Use theme roles (e.g., ?attr/colorPrimary) — do not hardcode hex in layouts/views.
    -->

    <!-- ───────────── Light scheme (brand accents + neutrals) ───────────── -->
    <!-- Primary -->
    <color name="md_theme_light_primary">#6750A4</color>
    <color name="md_theme_light_onPrimary">#FFFFFF</color>
    <color name="md_theme_light_primaryContainer">#EADDFF</color>
    <color name="md_theme_light_onPrimaryContainer">#21005D</color>

    <!-- Secondary -->
    <color name="md_theme_light_secondary">#625B71</color>
    <color name="md_theme_light_onSecondary">#FFFFFF</color>
    <color name="md_theme_light_secondaryContainer">#E8DEF8</color>
    <color name="md_theme_light_onSecondaryContainer">#1D192B</color>

    <!-- Tertiary -->
    <color name="md_theme_light_tertiary">#7D5260</color>
    <color name="md_theme_light_onTertiary">#FFFFFF</color>
    <color name="md_theme_light_tertiaryContainer">#FFD8E4</color>
    <color name="md_theme_light_onTertiaryContainer">#31111D</color>

    <!-- Error -->
    <color name="md_theme_light_error">#BA1A1A</color>
    <color name="md_theme_light_onError">#FFFFFF</color>
    <color name="md_theme_light_errorContainer">#FFDAD6</color>
    <color name="md_theme_light_onErrorContainer">#410002</color>

    <!-- Neutrals / surfaces -->
    <color name="md_theme_light_background">#FFFBFE</color>
    <color name="md_theme_light_onBackground">#1C1B1F</color>
    <color name="md_theme_light_surface">#FFFBFE</color>
    <color name="md_theme_light_onSurface">#1C1B1F</color>
    <color name="md_theme_light_surfaceVariant">#E7E0EC</color>
    <color name="md_theme_light_onSurfaceVariant">#49454F</color>
    <color name="md_theme_light_outline">#79747E</color>
    <color name="md_theme_light_outlineVariant">#CAC4D0</color>
    <color name="md_theme_light_inverseSurface">#313033</color>
    <color name="md_theme_light_inverseOnSurface">#F4EFF4</color>
    <color name="md_theme_light_inversePrimary">#D0BCFF</color>
    <color name="md_theme_light_scrim">#000000</color>

    <!-- Surface container tokens (used by Theme.Fludde) -->
    <color name="surfaceContainerLowest">#F7F2FA</color>
    <color name="surfaceContainerLow">#F3EDF7</color>
    <color name="surfaceContainer">#ECE6F0</color>
    <color name="surfaceContainerHigh">#E6E0E9</color>
    <color name="surfaceContainerHighest">#E0DAE3</color>

    <!-- ───────────── Dark scheme (brand accents + neutrals) ───────────── -->
    <!-- Primary -->
    <color name="md_theme_dark_primary">#D0BCFF</color>
    <color name="md_theme_dark_onPrimary">#381E72</color>
    <color name="md_theme_dark_primaryContainer">#4F378B</color>
    <color name="md_theme_dark_onPrimaryContainer">#EADDFF</color>

    <!-- Secondary -->
    <color name="md_theme_dark_secondary">#CCC2DC</color>
    <color name="md_theme_dark_onSecondary">#332D41</color>
    <color name="md_theme_dark_secondaryContainer">#4A4458</color>
    <color name="md_theme_dark_onSecondaryContainer">#E8DEF8</color>

    <!-- Tertiary -->
    <color name="md_theme_dark_tertiary">#EFB8C8</color>
    <color name="md_theme_dark_onTertiary">#492532</color>
    <color name="md_theme_dark_tertiaryContainer">#633B48</color>
    <color name="md_theme_dark_onTertiaryContainer">#FFD8E4</color>

    <!-- Error -->
    <color name="md_theme_dark_error">#FFB4AB</color>
    <color name="md_theme_dark_onError">#690005</color>
    <color name="md_theme_dark_errorContainer">#93000A</color>
    <color name="md_theme_dark_onErrorContainer">#FFDAD6</color>

    <!-- Neutrals / surfaces -->
    <color name="md_theme_dark_background">#1C1B1F</color>
    <color name="md_theme_dark_onBackground">#E6E1E5</color>
    <color name="md_theme_dark_surface">#1C1B1F</color>
    <color name="md_theme_dark_onSurface">#E6E1E5</color>
    <color name="md_theme_dark_surfaceVariant">#49454F</color>
    <color name="md_theme_dark_onSurfaceVariant">#CAC4D0</color>
    <color name="md_theme_dark_outline">#938F99</color>
    <color name="md_theme_dark_outlineVariant">#49454F</color>
    <color name="md_theme_dark_inverseSurface">#E6E1E5</color>
    <color name="md_theme_dark_inverseOnSurface">#313033</color>
    <color name="md_theme_dark_inversePrimary">#6750A4</color>
    <color name="md_theme_dark_scrim">#000000</color>
</resources>
</file>

<file path="app/src/main/res/values/styles.xml">
<!-- app/src/main/res/values/styles.xml -->
<resources>

    <!-- ✅ Minimal "do-nothing" base so any accidental style="@style/Widget" resolves -->
    <style name="Widget" />

    <!-- Keep this tiny alias so any accidental style="Text" compiles safely -->
    <style name="Text" parent="TextAppearance.Material3.BodyMedium" />

    <!-- ───────────────────────────── Text fields ───────────────────────────── -->
    <style name="Widget.Fludde.TextField.Filled" parent="Widget.Material3.TextInputLayout.FilledBox">
        <item name="shapeAppearanceOverlay">@style/ShapeAppearance.Fludde.Medium</item>
        <item name="boxStrokeWidth">1dp</item>
        <item name="boxStrokeWidthFocused">2dp</item>
    </style>

    <style name="Widget.Fludde.TextField.Outlined" parent="Widget.Material3.TextInputLayout.OutlinedBox">
        <item name="shapeAppearanceOverlay">@style/ShapeAppearance.Fludde.Medium</item>
        <item name="boxStrokeWidth">1dp</item>
        <item name="boxStrokeWidthFocused">2dp</item>
    </style>

    <style name="TextLimitError" parent="TextAppearance.Material3.LabelSmall">
        <item name="android:textColor">?attr/colorError</item>
    </style>

    <style name="Text.NoAllCaps">
        <item name="android:textAllCaps">false</item>
    </style>

    <!-- ─────────────────────────────── Buttons ─────────────────────────────── -->
    <style name="Widget.Fludde.Button.Primary" parent="Widget.Material3.Button">
        <item name="android:minHeight">@dimen/touch_target_min</item>
        <item name="android:paddingHorizontal">24dp</item>
        <item name="iconPadding">8dp</item>
        <item name="android:textAllCaps">false</item>
        <item name="shapeAppearanceOverlay">@style/ShapeAppearance.Fludde.Medium</item>
        <item name="rippleColor">@color/ripple_stateful</item>
    </style>

    <style name="Widget.Fludde.Button.Tonal" parent="Widget.Material3.Button.TonalButton">
        <item name="android:minHeight">@dimen/touch_target_min</item>
        <item name="android:paddingHorizontal">24dp</item>
        <item name="iconPadding">8dp</item>
        <item name="android:textAllCaps">false</item>
        <item name="shapeAppearanceOverlay">@style/ShapeAppearance.Fludde.Medium</item>
        <item name="rippleColor">@color/ripple_stateful</item>
    </style>

    <style name="Widget.Fludde.Button.Outlined" parent="Widget.Material3.Button.OutlinedButton">
        <item name="android:minHeight">@dimen/touch_target_min</item>
        <item name="android:paddingHorizontal">24dp</item>
        <item name="iconPadding">8dp</item>
        <item name="android:textAllCaps">false</item>
        <item name="shapeAppearanceOverlay">@style/ShapeAppearance.Fludde.Medium</item>
        <item name="rippleColor">@color/ripple_stateful</item>
    </style>

    <style name="Widget.Fludde.Button.Text" parent="Widget.Material3.Button.TextButton">
        <item name="android:minHeight">@dimen/touch_target_min</item>
        <item name="android:paddingHorizontal">16dp</item>
        <item name="iconPadding">6dp</item>
        <item name="android:textAllCaps">false</item>
        <item name="shapeAppearanceOverlay">@style/ShapeAppearance.Fludde.Medium</item>
        <item name="rippleColor">@color/ripple_stateful</item>
    </style>

    <style name="Widget.Fludde.Button.Elevated" parent="Widget.Material3.Button.ElevatedButton">
        <item name="android:minHeight">@dimen/touch_target_min</item>
        <item name="android:paddingHorizontal">24dp</item>
        <item name="iconPadding">8dp</item>
        <item name="android:textAllCaps">false</item>
        <item name="shapeAppearanceOverlay">@style/ShapeAppearance.Fludde.Medium</item>
        <item name="rippleColor">@color/ripple_stateful</item>
    </style>

    <!-- ─────────────────────────────── Chips ───────────────────────────────── -->
    <style name="Widget.Fludde.Chip.Base" parent="Widget.Material3.Chip.Assist">
        <item name="shapeAppearanceOverlay">@style/ShapeAppearance.Fludde.Medium</item>
        <item name="ensureMinTouchTargetSize">true</item>
        <item name="chipMinTouchTargetSize">@dimen/touch_target_min</item>
        <item name="android:textAllCaps">false</item>
        <item name="rippleColor">@color/ripple_stateful</item>
    </style>
    <style name="Widget.Fludde.Chip.Assist" parent="Widget.Fludde.Chip.Base" />
    <style name="Widget.Fludde.Chip.Filter" parent="Widget.Fludde.Chip.Base" />
    <style name="Widget.Fludde.Chip.Input" parent="Widget.Fludde.Chip.Base" />
    <style name="Widget.Fludde.Chip.Suggestion" parent="Widget.Fludde.Chip.Base" />

    <!-- ─────────────────────────────── Cards ───────────────────────────────── -->
    <style name="Widget.Fludde.Card" parent="Widget.Material3.CardView.Elevated">
        <item name="shapeAppearanceOverlay">@style/ShapeAppearance.Fludde.Medium</item>
        <item name="cardUseCompatPadding">true</item>
        <item name="cardBackgroundColor">@color/card_bg_selector</item>
        <item name="strokeColor">@color/card_stroke_selector</item>
        <item name="strokeWidth">@dimen/divider_thin</item>
        <item name="rippleColor">@color/ripple_stateful</item>
    </style>

    <!-- ───────────────────── BottomNavigation (M3, correct parents) ───────────────────── -->
    <!-- Tiny base so any legacy references resolve -->
    <style name="Widget.Fludde" />

    <style name="Widget.Fludde.NavigationBar" parent="Widget.Material3.BottomNavigationView">
        <item name="labelVisibilityMode">labeled</item>
        <item name="itemActiveIndicatorStyle">@style/Widget.Fludde.NavigationBar.ActiveIndicator</item>
    </style>

    <style name="Widget.Fludde.NavigationBar.ActiveIndicator"
        parent="Widget.Material3.BottomNavigationView.ActiveIndicator">
        <item name="android:color">?attr/colorSecondaryContainer</item>
        <item name="shapeAppearanceOverlay">@style/ShapeAppearance.Fludde.Medium</item>
    </style>

    <!-- ───────────────────────────── Pressable helpers ───────────────────────────── -->
    <style name="Widget.Fludde.Pressable">
        <item name="android:background">@drawable/list_item_bg</item>
        <item name="android:clickable">true</item>
        <item name="android:focusable">true</item>
    </style>

</resources>
</file>

<file path=".gitignore">
# Ignore Mac system files
.DS_Store

# Ignore the local configuration file
local.properties

# Ignore API keys and sensitive configuration files
apikey.properties
apikey.properties.bak

# Ignore Gradle files
.gradle/
build/


# Ignore Android Studio specific files
.idea/
*.iml

# Ignore log files
*.log

# Ignore build output directories
app/build/

# Ignore generated files (e.g., R.java, compiled classes)
app/build/
app/src/main/gen/
app/src/main/res/drawable/

# Ignore miscellaneous files
*.bak
*.swp

# Ignore generated images and videos
*.gif
*.mp4
*.mov
*.avi
*.flv

# Ignore any other environment-specific or temporary files
tmp/
temp/
*.tmp
*.temp

# Ignore the entire scripts directory if it contains only build-related files
scripts/gradlew
scripts/gradlew.bat
</file>

<file path="build.gradle">
plugins {
    id("com.android.application") version "8.7.0" apply false
}
</file>

<file path="gradle.properties">
# JVM args for the Gradle Daemon (3 GB heap + consistent encoding)
# Also enables native access to silence JDK 24 restricted-method warnings during Gradle runs.
org.gradle.jvmargs=-Xmx3g -Dfile.encoding=UTF-8 --enable-native-access=ALL-UNNAMED

# AndroidX / Jetifier / non-transitive R flags
android.useAndroidX=true
android.enableJetifier=true
android.nonTransitiveRClass=true
</file>

<file path="app/src/main/java/com/example/fludde/fragments/child/MusicChildFragment.java">
package com.example.fludde.fragments.child;

import android.os.Bundle;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ProgressBar;
import android.widget.Toast;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.fragment.app.Fragment;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.LinearSnapHelper;
import androidx.recyclerview.widget.RecyclerView;

import com.example.fludde.R;
import com.example.fludde.adapters.MusicChildAdapter;
import com.example.fludde.model.MusicContent;
import com.example.fludde.utils.ApiUtils;
import com.example.fludde.utils.SpacesItemDecoration;
import com.loopj.android.http.JsonHttpResponseHandler;

import org.json.JSONArray;
import org.json.JSONObject;

import java.util.ArrayList;
import java.util.List;

import cz.msebera.android.httpclient.Header;

public class MusicChildFragment extends Fragment {

    private static final String TAG = "MusicChildFragment";

    private static final String ITUNES_URL =
            "https://itunes.apple.com/search?term=pop&entity=song&limit=20";

    private RecyclerView rv;
    private ProgressBar progress;
    private MusicChildAdapter adapter;
    private final List<MusicContent> items = new ArrayList<>();

    @Nullable
    @Override
    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
        return inflater.inflate(R.layout.fragment_child_music, container, false);
    }

    @Override
    public void onViewCreated(@NonNull View v, @Nullable Bundle savedInstanceState) {
        super.onViewCreated(v, savedInstanceState);

        rv = v.findViewById(R.id.rvMusicHorizontalView);
        progress = v.findViewById(R.id.progressBar);

        rv.setLayoutManager(new LinearLayoutManager(requireContext(), LinearLayoutManager.HORIZONTAL, false));
        adapter = new MusicChildAdapter(requireContext(), items, new MusicChildAdapter.OnMusicContentListener() {
            @Override public void onMusicContentClick(int position) {}
            @Override public void onMusicContentLongClick(int position) {}
        });
        rv.setAdapter(adapter);

        final int itemSpace = getResources().getDimensionPixelSize(R.dimen.space_12);
        final int edgePeek = getResources().getDimensionPixelSize(R.dimen.space_24);
        rv.setClipToPadding(false);
        rv.setPadding(edgePeek, 0, edgePeek, 0);
        rv.addItemDecoration(new SpacesItemDecoration(itemSpace));
        new LinearSnapHelper().attachToRecyclerView(rv);

        fetchMusic();
    }

    private void setLoading(boolean show) {
        if (progress != null) progress.setVisibility(show ? View.VISIBLE : View.GONE);
        if (rv != null) rv.setAlpha(show ? 0.3f : 1f);
    }

    private void fetchMusic() {
        setLoading(true);
        Log.d(TAG, "Fetching music: " + ITUNES_URL);

        ApiUtils.get(ITUNES_URL, new JsonHttpResponseHandler() {
            @Override
            public void onSuccess(int statusCode, Header[] headers, JSONObject response) {
                try {
                    JSONArray results = response.optJSONArray("results");
                    items.clear();
                    if (results != null) {
                        items.addAll(MusicContent.fromJsonArray(results));
                    }
                    adapter.notifyDataSetChanged();

                    Log.d(TAG, "Music loaded ✓ count=" + items.size());
                    if (items.isEmpty()) {
                        Toast.makeText(requireContext(), getString(R.string.empty_music_message), Toast.LENGTH_SHORT).show();
                    }
                } catch (Exception e) {
                    Log.e(TAG, "Parse error (music)", e);
                    Toast.makeText(requireContext(), getString(R.string.error_load_content), Toast.LENGTH_SHORT).show();
                } finally {
                    setLoading(false);
                }
            }

            @Override
            public void onFailure(int statusCode, Header[] headers, Throwable throwable, JSONObject errorResponse) {
                setLoading(false);
                ApiUtils.handleFailure(statusCode, throwable);
                Toast.makeText(requireContext(), getString(R.string.error_load_content), Toast.LENGTH_SHORT).show();
            }
        });
    }
}
</file>

<file path="app/src/main/java/com/example/fludde/fragments/child/MovieChildFragment.java">
package com.example.fludde.fragments.child;

import android.os.Bundle;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ProgressBar;
import android.widget.Toast;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.fragment.app.Fragment;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.LinearSnapHelper;
import androidx.recyclerview.widget.RecyclerView;

import com.example.fludde.BuildConfig;
import com.example.fludde.R;
import com.example.fludde.adapters.MovieChildAdapter;
import com.example.fludde.model.MovieContent;
import com.example.fludde.utils.ApiUtils;
import com.example.fludde.utils.SpacesItemDecoration;
import com.loopj.android.http.JsonHttpResponseHandler;

import org.json.JSONArray;
import org.json.JSONObject;

import java.util.ArrayList;
import java.util.List;

import cz.msebera.android.httpclient.Header;

public class MovieChildFragment extends Fragment {

    private static final String TAG = "MovieChildFragment";

    private RecyclerView rv;
    private ProgressBar progress;
    private MovieChildAdapter adapter;
    private final List<MovieContent> items = new ArrayList<>();

    @Nullable
    @Override
    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
        return inflater.inflate(R.layout.fragment_child_movie, container, false);
    }

    @Override
    public void onViewCreated(@NonNull View v, @Nullable Bundle savedInstanceState) {
        super.onViewCreated(v, savedInstanceState);

        rv = v.findViewById(R.id.rvMovieHorizontalView);
        progress = v.findViewById(R.id.progressBar);

        rv.setLayoutManager(new LinearLayoutManager(requireContext(), LinearLayoutManager.HORIZONTAL, false));
        adapter = new MovieChildAdapter(requireContext(), items, new MovieChildAdapter.OnMovieContentListener() {
            @Override public void onMovieContentClick(int position) {}
            @Override public void onMovieContentLongClick(int position) {}
        });
        rv.setAdapter(adapter);

        final int itemSpace = getResources().getDimensionPixelSize(R.dimen.space_12);
        final int edgePeek = getResources().getDimensionPixelSize(R.dimen.space_24);
        rv.setClipToPadding(false);
        rv.setPadding(edgePeek, 0, edgePeek, 0);
        rv.addItemDecoration(new SpacesItemDecoration(itemSpace));
        new LinearSnapHelper().attachToRecyclerView(rv);

        fetchMovies();
    }

    private void setLoading(boolean show) {
        if (progress != null) progress.setVisibility(show ? View.VISIBLE : View.GONE);
        if (rv != null) rv.setAlpha(show ? 0.3f : 1f);
    }

    private void fetchMovies() {
        String url = "https://api.themoviedb.org/3/trending/movie/day?api_key=" + BuildConfig.TMDB_API_KEY;
        setLoading(true);
        Log.d(TAG, "Fetching movies: " + url + " (keyPresent=" + (BuildConfig.TMDB_API_KEY != null && !BuildConfig.TMDB_API_KEY.isEmpty()) + ")");

        ApiUtils.get(url, new JsonHttpResponseHandler() {
            @Override
            public void onSuccess(int statusCode, Header[] headers, JSONObject response) {
                try {
                    JSONArray results = response.optJSONArray("results");
                    items.clear();
                    if (results != null) {
                        items.addAll(MovieContent.fromJsonArray(results));
                    }
                    adapter.notifyDataSetChanged();
                    Log.d(TAG, "Movies loaded ✓ count=" + items.size());
                    if (items.isEmpty()) {
                        Toast.makeText(requireContext(), getString(R.string.empty_movies_message), Toast.LENGTH_SHORT).show();
                    }
                } catch (Exception e) {
                    Log.e(TAG, "Parse error (movies)", e);
                    Toast.makeText(requireContext(), getString(R.string.error_load_content), Toast.LENGTH_SHORT).show();
                } finally {
                    setLoading(false);
                }
            }

            @Override
            public void onFailure(int statusCode, Header[] headers, Throwable throwable, JSONObject errorResponse) {
                setLoading(false);
                ApiUtils.handleFailure(statusCode, throwable);
                Toast.makeText(requireContext(), getString(R.string.error_load_content), Toast.LENGTH_SHORT).show();
            }
        });
    }
}
</file>

<file path="app/src/main/java/com/example/fludde/fragments/HomeFragment.java">
package com.example.fludde.fragments;

import android.os.Bundle;
import android.view.View;
import android.widget.TextView;
import android.widget.Button;
import android.widget.ProgressBar;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.fragment.app.Fragment;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;

import android.view.LayoutInflater;
import android.view.ViewGroup;
import android.util.Log;

import com.example.fludde.BuildConfig;
import com.example.fludde.Post;
import com.example.fludde.R;
import com.example.fludde.adapters.PostAdapter;
import com.example.fludde.model.PostUi;
import com.example.fludde.utils.MockData;
import com.parse.FindCallback;
import com.parse.ParseException;
import com.parse.ParseFile;
import com.parse.ParseQuery;
import com.parse.ParseUser;

import java.util.ArrayList;
import java.util.List;

public class HomeFragment extends Fragment {
    private RecyclerView rvHomeFeed;
    private PostAdapter adapter;
    private final List<PostUi> posts = new ArrayList<>();

    private ProgressBar progress;
    private View errorCard;
    private TextView tvErrorMessage;
    private Button btnRetry;

    @Nullable
    @Override
    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
        return inflater.inflate(R.layout.fragment_home, container, false);
    }

    @Override
    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {
        super.onViewCreated(view, savedInstanceState);
        rvHomeFeed = view.findViewById(R.id.rvHomeFeed);
        progress = view.findViewById(R.id.progress);
        errorCard = view.findViewById(R.id.inlineError);
        tvErrorMessage = view.findViewById(R.id.tvErrorMessage);
        btnRetry = view.findViewById(R.id.btnRetry);

        adapter = new PostAdapter(requireContext(), posts);
        rvHomeFeed.setAdapter(adapter);
        rvHomeFeed.setLayoutManager(new LinearLayoutManager(requireContext()));
        rvHomeFeed.setHasFixedSize(true);

        btnRetry.setOnClickListener(v -> loadFeed());

        showError(false, null);
        showLoading(true);
        loadFeed();
    }

    private void showLoading(boolean show) {
        if (progress != null) progress.setVisibility(show ? View.VISIBLE : View.GONE);
        if (rvHomeFeed != null) rvHomeFeed.setAlpha(show ? 0.3f : 1f);
    }

    private void showError(boolean show, @Nullable String message) {
        if (errorCard != null) errorCard.setVisibility(show ? View.VISIBLE : View.GONE);
        if (show && tvErrorMessage != null) {
            tvErrorMessage.setText(message != null ? message : getString(R.string.error_load_feed));
        }
    }

    private void loadFeed() {
        showError(false, null);
        showLoading(true);

        if (BuildConfig.MOCK_MODE) {
            posts.clear();
            posts.addAll(MockData.mockPosts());
            adapter.notifyDataSetChanged();
            showLoading(false);
            return;
        }

        ParseQuery<Post> query = ParseQuery.getQuery(Post.class);
        query.include(Post.KEY_USER);
        query.setLimit(20);
        query.addDescendingOrder(Post.KEY_CREATED_AT);
        query.findInBackground(new FindCallback<Post>() {
            @Override
            public void done(List<Post> result, ParseException e) {
                showLoading(false);
                if (e != null) {
                    Log.e("HomeFragment", "Failed to load posts", e);
                    showError(true, getString(R.string.error_load_feed));
                    return;
                }
                posts.clear();
                if (result != null) {
                    for (Post p : result) {
                        posts.add(mapToUi(p));
                    }
                }
                adapter.notifyDataSetChanged();
            }
        });
    }

    private PostUi mapToUi(Post p) {
        String cat = safe(p.getCategory());
        String desc = safe(p.getDescription());
        String title = safe(p.getContentTitle());
        String rev = safe(p.getReview());

        String contentUrl = "";
        try {
            ParseFile f = p.getContentImage();
            if (f != null && f.getUrl() != null) contentUrl = f.getUrl();
        } catch (Exception ignore) {}

        String username = "";
        String userUrl = "";
        try {
            ParseUser u = p.getUser();
            if (u != null) {
                if (u.getUsername() != null) username = u.getUsername();
                ParseFile avatar = u.getParseFile("image");
                if (avatar != null && avatar.getUrl() != null) userUrl = avatar.getUrl();
            }
        } catch (Exception ignore) {}

        return new PostUi(cat, desc, title, rev, contentUrl, username, userUrl);
    }

    private static String safe(String s) { return s == null ? "" : s; }
}
</file>

<file path="app/src/main/res/values/strings.xml">
<?xml version="1.0" encoding="utf-8"?>
<resources>
    <string name="app_name">Fludde</string>

    <!-- Navigation -->
    <string name="nav_home">Home</string>
    <string name="nav_timeline">Timeline</string>
    <string name="nav_compose">Compose</string>
    <string name="nav_search">Search</string>
    <string name="nav_profile">Profile</string>

    <!-- Actions -->
    <string name="action_login">Log in</string>
    <string name="action_logout">Log out</string>
    <string name="action_signup">Sign up</string>
    <string name="action_cancel">Cancel</string>
    <string name="action_retry">Retry</string>
    <string name="action_try_again">Try again</string>
    <string name="action_edit_profile">Edit profile</string>
    <string name="action_search">Search</string>

    <!-- Labels & hints -->
    <string name="label_username">Username</string>
    <string name="label_password">Password</string>
    <string name="label_email">Email</string>
    <string name="label_title">Title</string>
    <string name="label_category">Category</string>
    <string name="label_review">Review</string>

    <string name="hint_username">Enter your username</string>
    <string name="hint_password">Enter your password</string>
    <string name="hint_email">Enter your email</string>
    <string name="hint_search_user">Search for a user</string>
    <string name="hint_content_description">Add a short description</string>
    <string name="hint_review">Share what you think</string>

    <!-- Content descriptions -->
    <string name="cd_user_avatar">User avatar</string>
    <string name="cd_profile_picture">Profile picture</string>
    <string name="cd_content_image">Content image</string>
    <string name="cd_movie_poster">Movie poster</string>
    <string name="cd_book_cover">Book cover</string>
    <string name="cd_album_cover">Album cover</string>
    <string name="cd_nav_home">Home</string>
    <string name="cd_nav_timeline">Timeline</string>
    <string name="cd_nav_compose">Compose</string>
    <string name="cd_nav_search">Search</string>
    <string name="cd_nav_profile">Profile</string>
    <string name="cd_logout">Log out</string>
    <string name="cd_loading">Loading</string>

    <!-- Loading -->
    <string name="loading_generic">Loading…</string>
    <string name="loading_feed">Loading posts…</string>
    <string name="loading_content">Loading content…</string>

    <!-- Empty states -->
    <string name="empty_feed_title">No posts yet</string>
    <string name="empty_feed_message">Follow people to see posts here.</string>

    <string name="empty_profile_title">No posts yet</string>
    <string name="empty_profile_message">Create your first post.</string>

    <string name="empty_search_title">No users found</string>
    <string name="empty_search_message">Try a different name.</string>

    <string name="empty_movies_title">No movies right now</string>
    <string name="empty_movies_message">Check back later for trending picks.</string>

    <string name="empty_books_title">No books right now</string>
    <string name="empty_books_message">Try again in a bit.</string>

    <string name="empty_music_title">No music right now</string>
    <string name="empty_music_message">Try again in a bit.</string>

    <!-- Errors -->
    <string name="error_generic">Something went wrong.</string>
    <string name="error_network">You’re offline.</string>
    <string name="error_timeout">This is taking too long.</string>
    <string name="error_api_limit">Service is busy. Try again later.</string>
    <string name="error_load_profile">Couldn’t load profile.</string>
    <string name="error_load_feed">Couldn’t load posts.</string>
    <string name="error_load_content">Couldn’t load content.</string>
    <string name="error_search">Couldn’t search right now.</string>
    <string name="error_required_fields">Please fill in all fields.</string>
    <string name="error_incorrect_login">Incorrect username or password.</string>
    <string name="error_auth_required">Sign in to continue.</string>

    <!-- Plurals -->
    <plurals name="search_results_count">
        <item quantity="one">%d result</item>
        <item quantity="other">%d results</item>
    </plurals>

    <!-- Samples -->
    <string name="johndoe2016" translatable="false">johndoe2016</string>
    <string name="johndoe_youknow_com" translatable="false">johndoe@youknow.com</string>
        <!-- Back4App / Parse credentials -->
    <string name="back4app_app_id">PASTE_YOUR_APP_ID_HERE</string>
    <string name="back4app_client_key">PASTE_YOUR_CLIENT_KEY_HERE</string>
    <!-- IMPORTANT: must be a full URL with protocol -->
    <string name="back4app_server_url">https://parseapi.back4app.com/</string>

    <!-- UI text used by the inline error block (fragment_home.xml) -->
    <string name="generic_error_title">Something went wrong</string>
    <string name="generic_error_message">We couldn’t load the feed. Please try again.</string>
    <string name="retry">Retry</string>
</resources>
</file>

<file path="app/src/main/AndroidManifest.xml">
<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android">

    <!-- Keep permissions minimal. INTERNET is required for Parse + API calls. -->
    <uses-permission android:name="android.permission.INTERNET" />

    <application
        android:name=".ParseApplication"
        android:allowBackup="true"
        android:icon="@mipmap/ic_launcher"
        android:label="@string/app_name"
        android:supportsRtl="true"
        android:theme="@style/Theme.Fludde">

        <!-- Main (single-activity) host that owns bottom navigation & fragment swaps -->
        <activity
            android:name=".MainActivity"
            android:exported="true">
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />
                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
        </activity>

        <!-- Auth flow screens (no UI theming here; all styling via themes/styles) -->
        <activity
            android:name=".LoginActivity"
            android:exported="false" />
        <activity
            android:name=".SignupActivity"
            android:exported="false" />

        <!-- Note: FileProvider is omitted (keep manifest minimal) since we are not
             currently attaching images from local storage. Add it only when needed. -->
    </application>
</manifest>
</file>

<file path="app/src/main/java/com/example/fludde/MainActivity.java">
package com.example.fludde;

import android.os.Bundle;

import androidx.activity.OnBackPressedCallback;
import androidx.annotation.IdRes;
import androidx.annotation.NonNull;
import androidx.appcompat.app.AppCompatActivity;
import androidx.fragment.app.Fragment;
import androidx.fragment.app.FragmentTransaction;

import com.example.fludde.fragments.HomeFragment;
import com.example.fludde.fragments.PostFragment;
import com.example.fludde.fragments.ProfileFragment;
import com.example.fludde.fragments.SearchFragment;
import com.example.fludde.fragments.ComposeParentFragment;
import com.example.fludde.utils.FragmentTransitions;
import com.example.fludde.utils.InsetsUtils;
import com.google.android.material.bottomnavigation.BottomNavigationView;

import java.util.HashMap;
import java.util.Map;

/**
 * Single-activity host:
 * - Owns bottom navigation and fragment swaps.
 * - No styling hardcodes; all appearance driven by theme/styles.
 * - Edge-to-edge insets handled centrally via InsetsUtils (WindowCompat + ViewCompat).
 * - Predictable back behavior:
 *      * If not on Home, back selects Home.
 *      * If on Home, back finishes Activity.
 *      * (Per-component back stacks can be added later if a tab pushes details.)
 */
public class MainActivity extends AppCompatActivity {

    private static final String STATE_SELECTED_TAB = "state:selected_tab";

    private BottomNavigationView bottomNav;

    // Keep fragments by tag to avoid re-creating on tab switch.
    private final Map<Integer, String> tagsById = new HashMap<>();
    private int currentItemId = 0;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        bottomNav = findViewById(R.id.bottomNavigation);

        // Edge-to-edge: pad the container and bottom nav for system bars.
        InsetsUtils.applyEdgeToEdge(
                this,
                findViewById(R.id.flContainer),
                bottomNav
        );

        // Map menu IDs to stable fragment tags
        tagsById.put(R.id.action_home, "tab:home");
        tagsById.put(R.id.action_feed, "tab:feed");
        tagsById.put(R.id.action_compose, "tab:compose");
        tagsById.put(R.id.action_search, "tab:search");
        tagsById.put(R.id.action_profile, "tab:profile");

        bottomNav.setOnItemSelectedListener(item -> {
            switchTo(item.getItemId());
            return true;
        });

        // Re-selection: pop child back stack or scroll-to-top could go here later.
        bottomNav.setOnItemReselectedListener(item -> {
            Fragment f = getSupportFragmentManager().findFragmentByTag(tagsById.get(item.getItemId()));
            if (f != null) {
                // If a tab uses a nested stack later, you can do:
                // f.getChildFragmentManager().popBackStack(null, FragmentManager.POP_BACK_STACK_INCLUSIVE);
                // For now, no-op to keep behavior simple and predictable.
            }
        });

        // Back: if not on Home, go Home. If on Home, finish.
        getOnBackPressedDispatcher().addCallback(this, new OnBackPressedCallback(true) {
            @Override public void handleOnBackPressed() {
                if (currentItemId != R.id.action_home) {
                    bottomNav.setSelectedItemId(R.id.action_home);
                } else {
                    setEnabled(false);
                    onBackPressed(); // default finish()
                }
            }
        });

        final int startTab = savedInstanceState != null
                ? savedInstanceState.getInt(STATE_SELECTED_TAB, R.id.action_home)
                : R.id.action_home;

        bottomNav.setSelectedItemId(startTab);
        switchTo(startTab);
    }

    @Override
    protected void onSaveInstanceState(@NonNull Bundle outState) {
        super.onSaveInstanceState(outState);
        outState.putInt(STATE_SELECTED_TAB, currentItemId);
    }

    private void switchTo(@IdRes int itemId) {
        if (currentItemId == itemId) return;
        currentItemId = itemId;

        final String tag = tagsById.get(itemId);
        FragmentTransaction tx = getSupportFragmentManager().beginTransaction();
        FragmentTransitions.applyFastFade(tx);

        // Hide all current fragments
        for (Map.Entry<Integer, String> e : tagsById.entrySet()) {
            Fragment f = getSupportFragmentManager().findFragmentByTag(e.getValue());
            if (f != null && !f.isHidden()) {
                tx.hide(f);
            }
        }

        Fragment target = getSupportFragmentManager().findFragmentByTag(tag);
        if (target == null) {
            target = createFragmentFor(itemId);
            tx.add(R.id.flContainer, target, tag);
        } else {
            tx.show(target);
        }

        tx.commit();
    }

    private Fragment createFragmentFor(@IdRes int itemId) {
        if (itemId == R.id.action_home) return new HomeFragment();
        if (itemId == R.id.action_feed) return new PostFragment();
        if (itemId == R.id.action_compose) return new ComposeParentFragment();
        if (itemId == R.id.action_search) return new SearchFragment();
        if (itemId == R.id.action_profile) return new ProfileFragment();
        // Fallback
        return new HomeFragment();
    }
}
</file>

<file path="app/build.gradle">
plugins {
    id 'com.android.application'
}

android {
    namespace 'com.example.fludde'
    compileSdk 35

    defaultConfig {
        applicationId "com.example.fludde"
        minSdk 24
        targetSdk 35
        versionCode 1
        versionName "1.0"

        // If you already had custom BuildConfig fields, keep them here.
        // These are examples that match usages in the codebase:
        //   - BuildConfig.MOCK_MODE
        //   - BuildConfig.TMDB_API_KEY
        def props = new Properties()
        def propsFile = rootProject.file("apikey.properties")
        if (propsFile.exists()) {
            props.load(new FileInputStream(propsFile))
        }

        boolean mockMode = (props.getProperty("MOCK_MODE", "true")).toBoolean()
        String tmdbKey = props.getProperty("TMDB_API_KEY", "")

        buildConfigField "boolean", "MOCK_MODE", String.valueOf(mockMode)
        buildConfigField "String", "TMDB_API_KEY", "\"${tmdbKey}\""
    }

    // ✅ Fix for the AGP error: explicitly enable BuildConfig generation
    buildFeatures {
        buildConfig true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    packaging {
        resources {
            excludes += [ "META-INF/DEPENDENCIES", "META-INF/LICENSE*", "META-INF/NOTICE*", "META-INF/*.kotlin_module" ]
        }
    }
}

dependencies {
    // AndroidX
    implementation 'androidx.appcompat:appcompat:1.7.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'androidx.recyclerview:recyclerview:1.3.2'
    implementation 'com.google.android.material:material:1.12.0'

    // Glide (image loading)
    implementation 'com.github.bumptech.glide:glide:4.16.0'
    annotationProcessor 'com.github.bumptech.glide:compiler:4.16.0'

    // Async HTTP client used by ApiUtils
    implementation 'com.loopj.android:android-async-http:1.4.11'

    // Facebook Shimmer used by PostFragment skeletons
    implementation 'com.facebook.shimmer:shimmer:0.5.0'

    // Parse Android SDK (JitPack repo is already in settings.gradle)
    implementation 'com.github.parse-community.Parse-SDK-Android:parse:4.2.1'

    // Unit tests
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.2.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.6.1'
}
</file>

<file path="app/src/main/java/com/example/fludde/fragments/child/BookChildFragment.java">
package com.example.fludde.fragments.child;

import android.os.Bundle;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ProgressBar;
import android.widget.Toast;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.fragment.app.Fragment;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.LinearSnapHelper;
import androidx.recyclerview.widget.RecyclerView;

import com.example.fludde.R;
import com.example.fludde.adapters.BookChildAdapter;
import com.example.fludde.model.BooksContent;
import com.example.fludde.utils.ApiUtils;
import com.example.fludde.utils.SpacesItemDecoration;
import com.loopj.android.http.JsonHttpResponseHandler;

import org.json.JSONArray;
import org.json.JSONObject;

import java.util.ArrayList;
import java.util.List;

import cz.msebera.android.httpclient.Header;

/**
 * Books tab carousel with defensive parsing + noisy logs.
 */
public class BookChildFragment extends Fragment {

    private static final String TAG = "BookChildFragment";

    // Public Google Books query with friendly defaults (no key required).
    private static final String BOOKS_URL =
            "https://www.googleapis.com/books/v1/volumes?q=subject:fiction&maxResults=20";

    private RecyclerView rv;
    private ProgressBar progress;
    private BookChildAdapter adapter;
    private final List<BooksContent> items = new ArrayList<>();

    @Nullable
    @Override
    public View onCreateView(@NonNull LayoutInflater inflater,
                             @Nullable ViewGroup container,
                             @Nullable Bundle savedInstanceState) {
        return inflater.inflate(R.layout.fragment_child_book, container, false);
    }

    @Override
    public void onViewCreated(@NonNull View v, @Nullable Bundle savedInstanceState) {
        super.onViewCreated(v, savedInstanceState);

        rv = v.findViewById(R.id.rvBookHorizontalView);
        progress = v.findViewById(R.id.progressBar);

        rv.setLayoutManager(new LinearLayoutManager(requireContext(), LinearLayoutManager.HORIZONTAL, false));
        adapter = new BookChildAdapter(requireContext(), items, new BookChildAdapter.OnBookContentListener() {
            @Override public void onBookContentClick(int position) {}
            @Override public void onBookContentLongClick(int position) {}
        });
        rv.setAdapter(adapter);

        // Carousel affordance: peeking edges + per-item snap
        final int itemSpace = getResources().getDimensionPixelSize(R.dimen.space_12);
        final int edgePeek = getResources().getDimensionPixelSize(R.dimen.space_24);
        rv.setClipToPadding(false);
        rv.setPadding(edgePeek, 0, edgePeek, 0);
        rv.addItemDecoration(new SpacesItemDecoration(itemSpace));
        new LinearSnapHelper().attachToRecyclerView(rv);

        fetchBooks();
    }

    private void setLoading(boolean show) {
        if (progress != null) progress.setVisibility(show ? View.VISIBLE : View.GONE);
        if (rv != null) rv.setAlpha(show ? 0.3f : 1f);
    }

    private void fetchBooks() {
        setLoading(true);
        Log.d(TAG, "Fetching books: " + BOOKS_URL);

        ApiUtils.get(BOOKS_URL, new JsonHttpResponseHandler() {
            @Override
            public void onSuccess(int statusCode, Header[] headers, JSONObject response) {
                try {
                    JSONArray arr = response.optJSONArray("items");
                    items.clear();
                    items.addAll(BooksContent.fromGoogleBooks(arr));
                    adapter.notifyDataSetChanged();

                    Log.d(TAG, "Books loaded ✓ count=" + items.size());
                    if (items.isEmpty()) {
                        Toast.makeText(requireContext(), getString(R.string.empty_books_message), Toast.LENGTH_SHORT).show();
                    }
                } catch (Exception e) {
                    Log.e(TAG, "Parse error (books)", e);
                    Toast.makeText(requireContext(), getString(R.string.error_load_content), Toast.LENGTH_SHORT).show();
                } finally {
                    setLoading(false);
                }
            }

            @Override
            public void onFailure(int statusCode, Header[] headers, Throwable throwable, JSONObject errorResponse) {
                setLoading(false);
                ApiUtils.handleFailure(statusCode, throwable);
                Toast.makeText(requireContext(), getString(R.string.error_load_content), Toast.LENGTH_SHORT).show();
            }
        });
    }
}
</file>

<file path="app/src/main/java/com/example/fludde/model/BooksContent.java">
package com.example.fludde.model;

import org.json.JSONArray;
import org.json.JSONObject;

import java.util.ArrayList;
import java.util.List;

/**
 * Minimal model for Google Books "volumes" response used by the carousel.
 */
public class BooksContent {
    private final String title;
    private final String imageURL;

    public BooksContent(String title, String imageURL) {
        this.title = title != null ? title : "";
        this.imageURL = imageURL;
    }

    public String getTitle() { return title; }
    public String getImageURL() { return imageURL; }

    /**
     * Parse a Google Books "items" array.
     */
    public static List<BooksContent> fromGoogleBooks(JSONArray items) {
        List<BooksContent> out = new ArrayList<>();
        if (items == null) return out;

        for (int i = 0; i < items.length(); i++) {
            try {
                JSONObject item = items.optJSONObject(i);
                if (item == null) continue;
                JSONObject vol = item.optJSONObject("volumeInfo");
                if (vol == null) continue;

                String title = vol.optString("title", "");
                String thumb = null;
                JSONObject imgs = vol.optJSONObject("imageLinks");
                if (imgs != null) {
                    // Prefer medium/thumbnail if available
                    thumb = coalesce(
                            imgs.optString("medium", null),
                            imgs.optString("thumbnail", null),
                            imgs.optString("smallThumbnail", null)
                    );
                    // Normalize http → https for mixed content issues
                    if (thumb != null && thumb.startsWith("http://")) {
                        thumb = "https://" + thumb.substring("http://".length());
                    }
                }
                out.add(new BooksContent(title, thumb));
            } catch (Exception ignore) { }
        }
        return out;
    }

    private static String coalesce(String a, String b, String c) {
        return a != null ? a : (b != null ? b : c);
    }
}
</file>

<file path="README.md">
# Fludde

## Table of Contents
1. [Overview](#Overview)
2. [Features](#Features)
3. [Installation](#Installation)
4. [Usage](#Usage)
5. [Schema](#Schema)
6. [Wireframes](#Wireframes)

## Overview

### Description

Fludde is a social platform that allows users to share and review various forms of content, such as books, music, and movies. Users can follow others, create posts, and view a personalized timeline filled with reviews from the users they follow. The platform integrates with various APIs to enhance the multimedia experience.

### App Evaluation
- **Category:** Social Networking 
- **Platform:** Mobile-first experience, primarily for Android.
- **Purpose:** To provide users with a space to share their opinions on different types of content and explore reviews from their network.
- **Target Audience:** Anyone interested in sharing their thoughts on content and discovering reviews from others.
- **Scope:** Initially focusing on movies, music, and books, with potential expansion to other forms of media like TV shows, comics, and video games.

## Features

### Core Features

- User Registration: Users can sign up and create an account.
- User Authentication: Users can log in and out of their accounts securely.
- Home Timeline: Users can view a feed of reviews from the people they follow.
- Content Search: Users can search for content or other users.
- User Profiles: Users can view their own profile, which includes all their reviews.
- Review Creation: Users can create and share reviews of content, categorized by type (e.g., movie, music, book).

### Future Enhancements

- Content Information: Users can view additional information about the content in reviews.
- Favorite Content: Users can favorite content for quick access later.
- Social Sharing: Users can reshare reviews, similar to a retweet.
- Advanced Search: Users can search specifically for reviews or detailed content information (e.g., trailers, descriptions).

## Installation

### Prerequisites

- Android Studio
- A configured Android device or emulator

### Setup

1. **Clone the Repository:**

   ```bash
   git clone https://github.com/josuejero/Fludde.git
   ```

2. **Navigate to the Project Directory:**

   ```bash
   cd fludde
   ```

3. **Configure API Keys:**

   Create a file named `apikey.properties` in the root of the project and add your API keys:

   ```
   NY_TIMES_API_KEY=your-nytimes-api-key-here
   SPOTIFY_KEY=your-spotify-api-key-here
   TMDB_API_KEY=your-tmdb-api-key-here
   ```

4. **Open the Project in Android Studio:**

   Open Android Studio, then go to `File > Open` and select the `fludde` directory.

5. **Build and Run:**

   Build and run the app on your device or emulator by clicking the "Run" button in Android Studio.

## Usage

Once the app is running, you can:

- **Sign Up or Log In:** Create an account or log in to your existing account.
- **View Timeline:** Explore the timeline filled with reviews from users you follow.
- **Search Content:** Search for specific content or users to see their reviews.
- **Create Reviews:** Share your thoughts on movies, music, or books.

## Schema

### Models

#### Post

| Property     | Type            | Description                                      |
| ------------ | --------------- | ------------------------------------------------ |
| `objectId`   | String          | Unique id for the post (default field)           |
| `author`     | Pointer to User | The user who created the review                  |
| `createdAt`  | DateTime        | Date when the post was created (default field)   |
| `description`| String          | Description or title of the content              |
| `review`     | String          | Review text authored by the user                 |
| `category`   | String          | Type of content (e.g., movie, book, music)       |

### Networking

#### Login Screen
- **GET**: Verify if the user is already logged in.
  ```java
  if (ParseUser.getCurrentUser() != null) {
      goMainActivity();
  }
  ```

- **POST**: Authenticate user credentials.
  ```java
  ParseUser.logInInBackground(username, password, new LogInCallback() {
      @Override
      public void done(ParseUser user, ParseException e) {
          if (e != null) {

          } else {

          }
      }
  });
  ```

#### SignUp Screen
- **POST**: Create a new user account.
  ```java
  newUser.setUsername(userName);
  newUser.setEmail(userEmail);
  newUser.setPassword(userPass);

  newUser.signUpInBackground(new SignUpCallback() {
      @Override
      public void done(ParseException e) {
          if (e != null) {

          } else {

          }
      }
  });
  ```

#### Home Timeline Screen
- **GET**: Fetch posts from users the current user follows.
- **POST**: Create a new post with a review and rating.

#### Search Screen
- **GET**: Search for users or reviews based on content or categories.

#### User Profile Screen
- **GET**: Fetch all posts created by the user.
- **POST**: Create a new post directly from the profile.

## Wireframes
<img src="https://i.imgur.com/BNGuswR.jpg" width=600>


This is the current status of the app. The content information is available when making the review.



---

## Contributing

Fludde is an open-source project and contributions are welcome! Whether it's bug fixes, feature requests, or improvements, feel free to open an issue or submit a pull request.

## License

This project is licensed under the MIT License. See the [LICENSE](LICENSE) file for more details.
</file>

</files>
