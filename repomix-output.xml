This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
app/
  src/
    androidTest/
      java/
        com/
          example/
            fludde/
              ExampleInstrumentedTest.java
    main/
      java/
        com/
          example/
            fludde/
              adapters/
                BookChildAdapter.java
                MovieChildAdapter.java
                MusicChildAdapter.java
                PostAdapter.java
                SearchFragmentAdapter.java
              fragments/
                child/
                  BookChildFragment.java
                  MovieChildFragment.java
                  MusicChildFragment.java
                ComposeParentFragment.java
                HomeFragment.java
                PostFragment.java
                ProfileFragment.java
                SearchFragment.java
              model/
                BookDetails.java
                BooksContent.java
                ContentsClick.java
                MovieContent.java
                MusicContent.java
                PostUi.java
                UserUi.java
              utils/
                ApiUtils.java
                ErrorHandler.java
                FragmentTransitions.java
                GlideExtensions.java
                Haptics.java
                InsetsUtils.java
                MockData.java
                MockSessionManager.java
                SpacesItemDecoration.java
              LoginActivity.java
              MainActivity.java
              ParseApplication.java
              Post.java
              SignupActivity.java
              User.java
      res/
        anim/
          fade_in_fast.xml
          fade_out_fast.xml
          hold.xml
          press_ripple.xml
        animator/
          image_fade_in.xml
        color/
          card_bg_selector.xml
          card_stroke_selector.xml
          ripple_stateful.xml
        drawable-v24/
          ic_launcher_foreground.xml
        font/
          acme.xml
          black_han_sans.xml
        layout/
          activity_login.xml
          activity_main.xml
          activity_signup.xml
          content_post_img.xml
          fragment_child_book.xml
          fragment_child_movie.xml
          fragment_child_music.xml
          fragment_compose_parent.xml
          fragment_home.xml
          fragment_post.xml
          fragment_profile.xml
          fragment_search.xml
          include_inline_error.xml
          item_post_skeleton.xml
          item_post.xml
          music_content_post.xml
          user_profile.xml
          users_query.xml
        menu/
          menu_bottom_navigation.xml
        mipmap-anydpi-v26/
          ic_launcher_round.xml
          ic_launcher.xml
        values/
          anim.xml
          colors.xml
          dimens.xml
          ids.xml
          preloaded_fonts.xml
          shapes.xml
          strings.xml
          styles.xml
          themes.xml
        values-night/
          themes.xml
        values-v31/
          themes.xml
        xml/
          fileprovider.xml
      AndroidManifest.xml
    test/
      java/
        com/
          example/
            fludde/
              utils/
                ApiUtilsTest.java
              ExampleUnitTest.java
  .gitignore
  build.gradle
  proguard-rules.pro
config/
  gradle.properties
gradle/
  wrapper/
    gradle-wrapper.jar
    gradle-wrapper.properties
scripts/
  android-run.sh
.gitignore
.repomixignore
auto_fix.sh
build.gradle
gradle.properties
gradlew
gradlew.bat
LICENSE
README.md
settings.gradle
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="app/src/main/java/com/example/fludde/utils/ErrorHandler.java">
package com.example.fludde.utils;

import android.content.Context;
import android.util.Log;
import android.view.View;
import android.widget.TextView;
import android.widget.Toast;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.annotation.StringRes;

import com.example.fludde.R;

/**
 * Centralized error handling utility for the Fludde app.
 * Provides methods for displaying toasts, inline errors, and logging.
 */
public final class ErrorHandler {
    private static final String TAG = "ErrorHandler";

    private ErrorHandler() {}

    /* ---------------------- Toast helpers ---------------------- */

    public static void showToast(@NonNull Context context, @StringRes int resId) {
        Toast.makeText(context, resId, Toast.LENGTH_SHORT).show();
    }

    public static void showToast(@NonNull Context context, @NonNull String message) {
        Toast.makeText(context, message, Toast.LENGTH_SHORT).show();
    }

    public static void showToast(@NonNull Context context, @NonNull String message, int length) {
        Toast.makeText(context, message, length).show();
    }

    public static void showToastLong(@NonNull Context context, @StringRes int resId) {
        Toast.makeText(context, resId, Toast.LENGTH_LONG).show();
    }

    public static void showToastLong(@NonNull Context context, @NonNull String message) {
        Toast.makeText(context, message, Toast.LENGTH_LONG).show();
    }

    /* -------------------- Inline error helpers -------------------- */

    public static void showInlineError(@Nullable View cardView, @StringRes int messageResId) {
        if (cardView == null) return;
        TextView tv = cardView.findViewById(R.id.tvErrorMessage);
        if (tv != null) tv.setText(messageResId);
        cardView.setVisibility(View.VISIBLE);
    }

    public static void hideInlineError(@Nullable View cardView) {
        if (cardView != null) cardView.setVisibility(View.GONE);
    }

    /* -------------------- Domain-specific helpers -------------------- */

    public static void showAuthError(@NonNull Context context, @StringRes int resId) {
        showToast(context, resId);
    }

    public static void showAuthError(@NonNull Context context, @NonNull String message) {
        showToast(context, message);
    }

    public static void showValidationError(@NonNull Context context, @StringRes int resId) {
        showToast(context, resId);
    }

    public static void showValidationError(@NonNull Context context, @NonNull String message) {
        showToast(context, message);
    }

    public static void showNetworkError(@NonNull Context context, @StringRes int resId) {
        showToast(context, resId);
    }

    public static void showNetworkError(@NonNull Context context, @NonNull String message) {
        showToast(context, message);
    }

    /* -------------------- API error logging -------------------- */

    public static void handleApiError(int statusCode, @Nullable Throwable t) {
        if (t != null) {
            Log.e(TAG, "HTTP " + statusCode, t);
        } else {
            Log.e(TAG, "HTTP " + statusCode + " (no throwable)");
        }
    }

    /* -------------------- NEW: Logging helpers -------------------- */

    /**
     * Log a warning message
     * @param tag The log tag
     * @param message The warning message
     */
    public static void logWarning(@NonNull String tag, @NonNull String message) {
        Log.w(tag, message);
    }

    /**
     * Log an error with exception
     * @param tag The log tag
     * @param message The error message
     * @param throwable The exception that occurred
     */
    public static void logError(@NonNull String tag, @NonNull String message, @Nullable Throwable throwable) {
        if (throwable != null) {
            Log.e(tag, message, throwable);
        } else {
            Log.e(tag, message);
        }
    }

    /**
     * Log an error without exception
     * @param tag The log tag
     * @param message The error message
     */
    public static void logError(@NonNull String tag, @NonNull String message) {
        Log.e(tag, message);
    }
}
</file>

<file path="app/src/main/java/com/example/fludde/utils/MockSessionManager.java">
package com.example.fludde.utils;

import android.content.Context;
import android.content.SharedPreferences;

/**
 * Manages mock authentication sessions using SharedPreferences.
 * Only used when BuildConfig.MOCK_MODE is true.
 */
public final class MockSessionManager {
    
    private static final String PREFS_NAME = "FluddeMock";
    private static final String KEY_IS_LOGGED_IN = "isLoggedIn";
    private static final String KEY_USERNAME = "currentUser";
    
    private MockSessionManager() {
        // Prevent instantiation
    }
    
    /**
     * Check if user is logged in (mock mode).
     */
    public static boolean isLoggedIn(Context context) {
        return getPrefs(context).getBoolean(KEY_IS_LOGGED_IN, false);
    }
    
    /**
     * Save login session for mock user.
     */
    public static void login(Context context, String username) {
        getPrefs(context).edit()
            .putBoolean(KEY_IS_LOGGED_IN, true)
            .putString(KEY_USERNAME, username)
            .apply();
    }
    
    /**
     * Get current logged in username.
     */
    public static String getCurrentUsername(Context context) {
        return getPrefs(context).getString(KEY_USERNAME, "");
    }
    
    /**
     * Logout user.
     */
    public static void logout(Context context) {
        getPrefs(context).edit().clear().apply();
    }
    
    /**
     * Get current user's full profile.
     */
    public static MockData.MockProfile getCurrentUserProfile(Context context) {
        String username = getCurrentUsername(context);
        if (username.isEmpty()) {
            return null;
        }
        return MockData.mockUserProfile(username);
    }
    
    private static SharedPreferences getPrefs(Context context) {
        return context.getSharedPreferences(PREFS_NAME, Context.MODE_PRIVATE);
    }
}
</file>

<file path="auto_fix.sh">
#!/bin/bash

# Automated Fix Script for Fludde Android Project Compilation Errors
# Run this from the project root directory

echo "=========================================="
echo "Fludde Build Fixes - Automated Script"
echo "=========================================="
echo ""

# Check if we're in the right directory
if [ ! -d "app/src/main/java/com/example/fludde" ]; then
    echo "❌ Error: Not in the correct directory!"
    echo "Please run this script from the project root (fludde/)"
    exit 1
fi

echo "✓ Found project structure"
echo ""

# Fix 1: Rename Errorhandler.java to ErrorHandler.java
echo "[1/3] Renaming Errorhandler.java to ErrorHandler.java..."
if [ -f "app/src/main/java/com/example/fludde/utils/Errorhandler.java" ]; then
    mv app/src/main/java/com/example/fludde/utils/Errorhandler.java app/src/main/java/com/example/fludde/utils/ErrorHandler.java
    echo "  ✓ File renamed successfully"
else
    echo "  ⚠ Errorhandler.java not found or already renamed"
fi
echo ""

# Fix 2: Add package declaration to User.java
echo "[2/3] Fixing User.java package declaration..."
USER_FILE="app/src/main/java/com/example/fludde/User.java"
if [ -f "$USER_FILE" ]; then
    # Check if package declaration is missing
    if ! grep -q "^package com.example.fludde;" "$USER_FILE"; then
        # Add package declaration at the beginning
        echo "package com.example.fludde;" | cat - "$USER_FILE" > temp && mv temp "$USER_FILE"
        echo "  ✓ Package declaration added"
    else
        echo "  ⚠ Package declaration already exists"
    fi
else
    echo "  ⚠ User.java not found"
fi
echo ""

# Fix 3: Fix ComposeParentFragment container ID
echo "[3/3] Fixing ComposeParentFragment.java container ID..."
COMPOSE_FILE="app/src/main/java/com/example/fludde/fragments/ComposeParentFragment.java"
if [ -f "$COMPOSE_FILE" ]; then
    sed -i.bak 's/R\.id\.flChildContainer/R.id.child_fragment_container/g' "$COMPOSE_FILE"
    rm -f "${COMPOSE_FILE}.bak"
    echo "  ✓ Container ID fixed"
else
    echo "  ⚠ ComposeParentFragment.java not found"
fi
echo ""

echo "=========================================="
echo "Automated fixes complete!"
echo "=========================================="
echo ""
echo "⚠️  MANUAL FIXES STILL REQUIRED:"
echo ""
echo "1. Replace MockData.java with the provided fixed version"
echo "2. Fix adapter files (3 files):"
echo "   - Change getBindingAdapterPosition() to getAdapterPosition()"
echo "3. Fix LoginActivity.java ErrorHandler calls"
echo "4. Fix SignupActivity.java ErrorHandler calls"
echo "5. Fix SearchFragment.java mockUsers() call"
echo ""
echo "See JAVA_COMPILATION_FIXES.md for detailed instructions."
echo ""
echo "After fixing, run:"
echo "  ./gradlew clean"
echo "  ./gradlew build"
echo ""
</file>

<file path="app/src/main/java/com/example/fludde/model/ContentsClick.java">
package com.example.fludde.model;

public interface ContentsClick {

     void OnContentClick(int pos);
}
</file>

<file path="app/src/main/java/com/example/fludde/model/PostUi.java">
package com.example.fludde.model;

/** Minimal UI model so the feed can render with or without Parse. */
public final class PostUi {
    private final String category;
    private final String description;
    private final String title;
    private final String review;
    private final String contentImageUrl;
    private final String userName;
    private final String userImageUrl;

    public PostUi(String category, String description, String title, String review,
                  String contentImageUrl, String userName, String userImageUrl) {
        this.category = nz(category);
        this.description = nz(description);
        this.title = nz(title);
        this.review = nz(review);
        this.contentImageUrl = nz(contentImageUrl);
        this.userName = nz(userName);
        this.userImageUrl = nz(userImageUrl);
    }

    public String getCategory() { return category; }
    public String getDescription() { return description; }
    public String getTitle() { return title; }
    public String getReview() { return review; }
    public String getContentImageUrl() { return contentImageUrl; }
    public String getUserName() { return userName; }
    public String getUserImageUrl() { return userImageUrl; }

    private static String nz(String s) { return s == null ? "" : s; }
}
</file>

<file path="app/src/main/java/com/example/fludde/model/UserUi.java">
package com.example.fludde.model;

/** Minimal UI model for search results so we don't depend on Parse in mock mode. */
public final class UserUi {
    private final String username;
    private final String imageUrl;

    public UserUi(String username, String imageUrl) {
        this.username = username == null ? "" : username;
        this.imageUrl = imageUrl == null ? "" : imageUrl;
    }

    public String getUsername() { return username; }
    public String getImageUrl() { return imageUrl; }
}
</file>

<file path="app/src/main/java/com/example/fludde/utils/FragmentTransitions.java">
package com.example.fludde.utils;

import androidx.annotation.AnimRes;
import androidx.fragment.app.FragmentTransaction;

import com.example.fludde.R;

/** Applies subtle, fast transitions when swapping fragments/tabs. */
public final class FragmentTransitions {
    private FragmentTransitions(){}

    public static void applyFastFade(FragmentTransaction tx) {
        if (tx == null) return;
        tx.setCustomAnimations(
                R.anim.fade_in_fast,   // enter
                R.anim.fade_out_fast,  // exit
                R.anim.fade_in_fast,   // pop enter
                R.anim.fade_out_fast   // pop exit
        );
    }
}
</file>

<file path="app/src/main/java/com/example/fludde/utils/GlideExtensions.java">
package com.example.fludde.utils;

import android.widget.ImageView;

import com.bumptech.glide.Glide;
import com.bumptech.glide.load.resource.drawable.DrawableTransitionOptions;
import com.bumptech.glide.request.RequestOptions;
import com.bumptech.glide.load.resource.bitmap.CenterCrop;
import com.example.fludde.R;

/** Centralized image loading with fade-in to avoid pop-in. */
public final class GlideExtensions {
    private GlideExtensions() {}

    public static void loadPoster(ImageView target, String url) {
        if (target == null) return;
        Glide.with(target.getContext())
                .load(url)
                .apply(new RequestOptions().transform(new CenterCrop()))
                .placeholder(R.drawable.placeholder_poster)
                .error(R.drawable.placeholder_poster)
                .transition(DrawableTransitionOptions.withCrossFade(140)) // match fast anim
                .into(target);
    }

    public static void loadSquare(ImageView target, String url) {
        if (target == null) return;
        Glide.with(target.getContext())
                .load(url)
                .apply(new RequestOptions().transform(new CenterCrop()))
                .placeholder(R.drawable.placeholder_square)
                .error(R.drawable.placeholder_square)
                .transition(DrawableTransitionOptions.withCrossFade(140))
                .into(target);
    }

    public static void loadAvatar(ImageView target, String urlOrNull) {
        if (target == null) return;
        Glide.with(target.getContext())
                .load(urlOrNull)
                .apply(new RequestOptions().transform(new CenterCrop()))
                .placeholder(R.drawable.placeholder_avatar)
                .error(R.drawable.placeholder_avatar)
                .transition(DrawableTransitionOptions.withCrossFade(140))
                .into(target);
    }
}
</file>

<file path="app/src/main/java/com/example/fludde/utils/Haptics.java">
package com.example.fludde.utils;

import android.content.Context;
import android.os.Build;
import android.view.HapticFeedbackConstants;
import android.view.View;

/** Small helpers to provide discoverable, consistent haptics. */
public final class Haptics {
    private Haptics() {}

    /** Light haptic for long-press (discoverability). */
    public static void longPress(View v) {
        if (v == null) return;
        v.performHapticFeedback(HapticFeedbackConstants.LONG_PRESS);
    }

    /** Subtle confirmation haptic (e.g., successful toggle). */
    public static void tick(View v) {
        if (v == null) return;
        if (Build.VERSION.SDK_INT >= 21) {
            v.performHapticFeedback(HapticFeedbackConstants.VIRTUAL_KEY);
        }
    }

    /** Error/denied haptic. */
    public static void error(View v) {
        if (v == null) return;
        v.performHapticFeedback(HapticFeedbackConstants.REJECT);
    }
}
</file>

<file path="app/src/main/java/com/example/fludde/utils/InsetsUtils.java">
package com.example.fludde.utils;

import android.app.Activity;
import android.view.View;

import androidx.core.graphics.Insets;
import androidx.core.view.ViewCompat;
import androidx.core.view.WindowCompat;
import androidx.core.view.WindowInsetsCompat;

import com.google.android.material.bottomnavigation.BottomNavigationView;

/**
 * Centralized, duplicate-free system bar inset handling.
 * - Enables edge-to-edge on the window.
 * - Pads the fragment container by status bar + nav bar insets.
 * - Adds bottom inset to BottomNavigationView so it sits above the gesture area.
 * - Accounts for the BottomNavigationView's measured height so content isn't hidden.
 */
public final class InsetsUtils {

    private InsetsUtils() {}

    private static final class Padding {
        final int l, t, r, b;
        Padding(View v) { l = v.getPaddingLeft(); t = v.getPaddingTop(); r = v.getPaddingRight(); b = v.getPaddingBottom(); }
    }

    public static void applyEdgeToEdge(Activity activity, View container, BottomNavigationView bottomNav) {
        // Tell the system we're handling insets ourselves.
        WindowCompat.setDecorFitsSystemWindows(activity.getWindow(), false);

        final Padding containerBase = new Padding(container);
        final Padding navBase = new Padding(bottomNav);

        ViewCompat.setOnApplyWindowInsetsListener(container, (v, insets) -> {
            Insets sysBars = insets.getInsets(WindowInsetsCompat.Type.systemBars());
            // Add status bar/top insets and left/right for cutouts.
            int top = containerBase.t + sysBars.top;
            int left = containerBase.l + sysBars.left;
            int right = containerBase.r + sysBars.right;
            // Reserve space for both the system navigation area and the bottom nav view height.
            int bottom = containerBase.b + sysBars.bottom + bottomNav.getHeight();
            v.setPadding(left, top, right, bottom);
            return insets;
        });

        ViewCompat.setOnApplyWindowInsetsListener(bottomNav, (v, insets) -> {
            Insets sysBars = insets.getInsets(WindowInsetsCompat.Type.systemBars());
            int left = navBase.l + sysBars.left;
            int right = navBase.r + sysBars.right;
            int bottom = navBase.b + sysBars.bottom;
            v.setPadding(left, navBase.t, right, bottom);
            return insets;
        });

        // If the bottom nav's height changes (first layout, configuration change), re-dispatch insets.
        bottomNav.addOnLayoutChangeListener((v, left, top, right, bottom, oldLeft, oldTop, oldRight, oldBottom) ->
                ViewCompat.requestApplyInsets(container));

        // Kick the first dispatch.
        activity.getWindow().getDecorView().post(() -> {
            ViewCompat.requestApplyInsets(container);
            ViewCompat.requestApplyInsets(bottomNav);
        });
    }
}
</file>

<file path="app/src/main/java/com/example/fludde/utils/SpacesItemDecoration.java">
package com.example.fludde.utils;

import android.graphics.Rect;
import android.view.View;

import androidx.annotation.NonNull;
import androidx.recyclerview.widget.RecyclerView;

/**
 * Simple horizontal spacing between carousel cards.
 * Pair with RecyclerView edge padding + clipToPadding(false) to allow peeking items.
 */
public class SpacesItemDecoration extends RecyclerView.ItemDecoration {
    private final int space;

    public SpacesItemDecoration(int space) { this.space = space; }

    @Override
    public void getItemOffsets(@NonNull Rect outRect, @NonNull View view,
                               @NonNull RecyclerView parent, @NonNull RecyclerView.State state) {
        int pos = parent.getChildAdapterPosition(view);
        if (pos == RecyclerView.NO_POSITION) return;
        // Add space to the end of each item; edge padding on the RecyclerView handles left/right peeks.
        outRect.right = space;
    }
}
</file>

<file path="app/src/main/res/anim/fade_in_fast.xml">
<?xml version="1.0" encoding="utf-8"?>
<alpha xmlns:android="http://schemas.android.com/apk/res/android"
    android:duration="@integer/anim_fast_duration"
    android:fromAlpha="0.0"
    android:toAlpha="1.0"
    android:interpolator="@android:interpolator/linear_out_slow_in"/>
</file>

<file path="app/src/main/res/anim/fade_out_fast.xml">
<?xml version="1.0" encoding="utf-8"?>
<alpha xmlns:android="http://schemas.android.com/apk/res/android"
    android:duration="@integer/anim_fast_duration"
    android:fromAlpha="1.0"
    android:toAlpha="0.0"
    android:interpolator="@android:interpolator/fast_out_linear_in"/>
</file>

<file path="app/src/main/res/anim/hold.xml">
<?xml version="1.0" encoding="utf-8"?>
<alpha xmlns:android="http://schemas.android.com/apk/res/android"
    android:duration="@integer/anim_fast_duration"
    android:fromAlpha="1.0"
    android:toAlpha="1.0"/>
</file>

<file path="app/src/main/res/anim/press_ripple.xml">
<?xml version="1.0" encoding="utf-8"?>
<ripple xmlns:android="http://schemas.android.com/apk/res/android"
    android:color="?attr/colorPrimary"
    android:radius="24dp"> <!-- feels present on light/dark -->
</ripple>
</file>

<file path="app/src/main/res/animator/image_fade_in.xml">
<?xml version="1.0" encoding="utf-8"?>
<objectAnimator xmlns:android="http://schemas.android.com/apk/res/android"
    android:propertyName="alpha"
    android:valueFrom="0"
    android:valueTo="1"
    android:valueType="floatType"
    android:duration="@integer/anim_fast_duration"
    android:interpolator="@android:interpolator/linear_out_slow_in"/>
</file>

<file path="app/src/main/res/color/card_stroke_selector.xml">
<?xml version="1.0" encoding="utf-8"?>
<selector xmlns:android="http://schemas.android.com/apk/res/android">
    <!-- Selected/focused → primary stroke -->
    <item android:state_checked="true" android:color="?attr/colorPrimary"/>
    <item android:state_focused="true" android:color="?attr/colorPrimary"/>
    <!-- Default -->
    <item android:color="?attr/colorOutlineVariant"/>
</selector>
</file>

<file path="app/src/main/res/color/ripple_stateful.xml">
<?xml version="1.0" encoding="utf-8"?>
<selector xmlns:android="http://schemas.android.com/apk/res/android">
    <!-- Disabled: reduce contrast but maintain legibility -->
    <item android:state_enabled="false" android:color="?attr/colorOutlineVariant"/>
    <!-- Default ripple tint -->
    <item android:color="?attr/colorPrimary"/>
</selector>
</file>

<file path="app/src/main/res/drawable-v24/ic_launcher_foreground.xml">
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:aapt="http://schemas.android.com/aapt"
    android:width="108dp"
    android:height="108dp"
    android:viewportWidth="108"
    android:viewportHeight="108">
    <path android:pathData="M31,63.928c0,0 6.4,-11 12.1,-13.1c7.2,-2.6 26,-1.4 26,-1.4l38.1,38.1L107,108.928l-32,-1L31,63.928z">
        <aapt:attr name="android:fillColor">
            <gradient
                android:endX="85.84757"
                android:endY="92.4963"
                android:startX="42.9492"
                android:startY="49.59793"
                android:type="linear">
                <item
                    android:color="#44000000"
                    android:offset="0.0" />
                <item
                    android:color="#00000000"
                    android:offset="1.0" />
            </gradient>
        </aapt:attr>
    </path>
    <path
        android:fillColor="#FFFFFF"
        android:fillType="nonZero"
        android:pathData="M65.3,45.828l3.8,-6.6c0.2,-0.4 0.1,-0.9 -0.3,-1.1c-0.4,-0.2 -0.9,-0.1 -1.1,0.3l-3.9,6.7c-6.3,-2.8 -13.4,-2.8 -19.7,0l-3.9,-6.7c-0.2,-0.4 -0.7,-0.5 -1.1,-0.3C38.8,38.328 38.7,38.828 38.9,39.228l3.8,6.6C36.2,49.428 31.7,56.028 31,63.928h46C76.3,56.028 71.8,49.428 65.3,45.828zM43.4,57.328c-0.8,0 -1.5,-0.5 -1.8,-1.2c-0.3,-0.7 -0.1,-1.5 0.4,-2.1c0.5,-0.5 1.4,-0.7 2.1,-0.4c0.7,0.3 1.2,1 1.2,1.8C45.3,56.528 44.5,57.328 43.4,57.328L43.4,57.328zM64.6,57.328c-0.8,0 -1.5,-0.5 -1.8,-1.2s-0.1,-1.5 0.4,-2.1c0.5,-0.5 1.4,-0.7 2.1,-0.4c0.7,0.3 1.2,1 1.2,1.8C66.5,56.528 65.6,57.328 64.6,57.328L64.6,57.328z"
        android:strokeWidth="1"
        android:strokeColor="#00000000" />
</vector>
</file>

<file path="app/src/main/res/font/acme.xml">
<?xml version="1.0" encoding="utf-8"?>
<font-family xmlns:app="http://schemas.android.com/apk/res-auto"
        app:fontProviderAuthority="com.google.android.gms.fonts"
        app:fontProviderPackage="com.google.android.gms"
        app:fontProviderQuery="Acme"
        app:fontProviderCerts="@array/com_google_android_gms_fonts_certs">
</font-family>
</file>

<file path="app/src/main/res/font/black_han_sans.xml">
<?xml version="1.0" encoding="utf-8"?>
<font-family xmlns:app="http://schemas.android.com/apk/res-auto"
        app:fontProviderAuthority="com.google.android.gms.fonts"
        app:fontProviderPackage="com.google.android.gms"
        app:fontProviderQuery="Black Han Sans"
        app:fontProviderCerts="@array/com_google_android_gms_fonts_certs">
</font-family>
</file>

<file path="app/src/main/res/mipmap-anydpi-v26/ic_launcher_round.xml">
<?xml version="1.0" encoding="utf-8"?>
<adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">
    <background android:drawable="@drawable/ic_launcher_background" />
    <foreground android:drawable="@drawable/ic_launcher_foreground" />
</adaptive-icon>
</file>

<file path="app/src/main/res/values/anim.xml">
<?xml version="1.0" encoding="utf-8"?>
<resources>
    <!-- Very subtle (100–160ms) fades/scales for fragment/tab transitions -->
    <item name="anim_fast_duration" type="integer">140</item>
</resources>
</file>

<file path="app/src/main/res/values/ids.xml">
<?xml version="1.0" encoding="utf-8"?>
<resources>
    <item name="cvLayout" type="id" />
</resources>
</file>

<file path="app/src/main/res/values/shapes.xml">
<resources>
    <!-- Rounded, consistent card/button chips per the design plan -->
    <style name="ShapeAppearance.Fludde.Medium" parent="ShapeAppearance.Material3.Corner.Medium">
        <item name="cornerFamily">rounded</item>
        <item name="cornerSize">16dp</item>
    </style>

    <style name="ShapeAppearance.Fludde.Large" parent="ShapeAppearance.Material3.Corner.Large">
        <item name="cornerFamily">rounded</item>
        <item name="cornerSize">20dp</item>
    </style>

    <!-- NEW: Circular shape for avatars -->
    <style name="ShapeAppearance.Fludde.Circular" parent="ShapeAppearance.Material3.Corner.Full">
        <!-- Full (50%) radius yields a circle for square views -->
        <item name="cornerFamily">rounded</item>
        <item name="cornerSize">50%</item>
    </style>
</resources>
</file>

<file path="app/src/main/res/xml/fileprovider.xml">
<?xml version="1.0" encoding="utf-8"?>
<paths xmlns:android="http://schemas.android.com/apk/res/android">
    <external-files-path name="my_images" path="Pictures" />
</paths>
</file>

<file path="app/.gitignore">
/build
</file>

<file path="app/proguard-rules.pro">
# Add project specific ProGuard rules here.
# You can control the set of applied configuration files using the
# proguardFiles setting in build.gradle.
#
# For more details, see
#   http://developer.android.com/guide/developing/tools/proguard.html

# If your project uses WebView with JS, uncomment the following
# and specify the fully qualified class name to the JavaScript interface
# class:
#-keepclassmembers class fqcn.of.javascript.interface.for.webview {
#   public *;
#}

# Uncomment this to preserve the line number information for
# debugging stack traces.
#-keepattributes SourceFile,LineNumberTable

# If you keep the line number information, uncomment this to
# hide the original source file name.
#-renamesourcefileattribute SourceFile
</file>

<file path="scripts/android-run.sh">
#!/usr/bin/env bash
set -Eeuo pipefail

# ------------------------------------------------------------
# Fludde: build + install the debug APK onto an Android emulator
# then launch the app deterministically with Activity Manager.
# Falls back to a *forced* Monkey app-switch if needed.
# ------------------------------------------------------------
# Usage:
#   ./scripts/android-run.sh                 # uses default APK path & best AVD
#   FLUDDE_AVD=Pixel_7_API_35 ./scripts/android-run.sh
#   ./scripts/android-run.sh path/to/your.apk
# ------------------------------------------------------------

APP_ID="com.example.fludde"
MAIN_ACTIVITY=".MainActivity"
APK="${1:-app/build/outputs/apk/debug/app-debug.apk}"

log() { printf "👉 %s\n" "$*"; }
ok()  { printf "✅ %s\n" "$*"; }
warn(){ printf "⚠️  %s\n" "$*" >&2; }
err() { printf "❌ %s\n" "$*" >&2; }

require_cmd() {
  if ! command -v "$1" >/dev/null 2>&1; then
    err "Missing command: $1 (check your Android SDK install and PATH)"
    exit 1
  fi
}

require_cmd adb
require_cmd emulator

if [[ ! -f "$APK" ]]; then
  err "APK not found at: $APK"
  log "Try: ./gradlew :app:assembleDebug"
  exit 1
fi

pick_avd() {
  local preferred="${FLUDDE_AVD:-}"
  local list
  if ! list="$(emulator -list-avds)"; then
    err "Failed to list AVDs. Create one in Android Studio or with avdmanager."
    exit 1
  fi

  if [[ -n "$preferred" ]]; then
    if grep -Fxq "$preferred" <<<"$list"; then
      echo "$preferred"; return
    else
      err "Requested AVD '$preferred' not found. Available:"
      echo "$list"
      exit 1
    fi
  fi

  if grep -Fxq "Pixel_7_API_35" <<<"$list"; then echo "Pixel_7_API_35"; return; fi
  if grep -Fxq "fluddeApi35"   <<<"$list"; then echo "fluddeApi35";   return; fi

  local first
  first="$(head -n 1 <<<"$list" || true)"
  if [[ -z "$first" ]]; then
    err "No AVDs exist yet."
    cat <<'EOF'
Create an AVD, e.g.:
  sdkmanager --install "platform-tools" "emulator" "platforms;android-35" "system-images;android-35;google_apis;x86_64"
  echo "no" | avdmanager create avd -n fluddeApi35 -k "system-images;android-35;google_apis;x86_64" --device "pixel_7"
EOF
    exit 1
  fi
  echo "$first"
}

avd_name="$(pick_avd)"
ok "Using AVD: $avd_name"

adb_start() {
  adb start-server >/dev/null 2>&1 || true
}

any_device_online() {
  adb devices | awk 'NR>1 && $2=="device"{print $1}' | head -n1
}

start_emulator_if_needed() {
  local dev
  dev="$(any_device_online || true)"
  if [[ -n "$dev" ]]; then
    ok "Device already online: $dev"
    return
  fi

  log "Starting emulator: $avd_name"
  nohup emulator -avd "$avd_name" -no-boot-anim -netdelay none -netspeed full >/dev/null 2>&1 &
  adb wait-for-device
}

wait_for_boot_complete() {
  log "Waiting for Android to finish booting…"
  local boot=""
  until boot="$(adb shell getprop sys.boot_completed 2>/dev/null | tr -d '\r')"; [[ "$boot" == "1" ]]; do
    sleep 1
  done
  until adb shell pm list packages >/dev/null 2>&1; do sleep 1; done
  adb shell input keyevent 82 || true
  ok "Boot complete."
}

install_apk() {
  log "Installing APK: $APK"
  adb install -r -t "$APK" >/dev/null
  ok "Installed."
}

# Deterministic launch with Activity Manager (recommended)
launch_with_am() {
  log "Launching with am start: $APP_ID/$MAIN_ACTIVITY"
  if adb shell am start -n "$APP_ID/$MAIN_ACTIVITY" >/dev/null 2>&1; then
    ok "App launched via am."
    return 0
  fi
  return 1
}

# Fallback: force Monkey to do an app-switch as the *first* event
launch_with_monkey_forced() {
  log "Fallback: launching with Monkey (forced app-switch)…"
  # Force 100% app-switch so the very first event is a launch.
  # Monkey often returns non-zero; treat that as a warning, not a hard fail.
  if adb shell monkey -p "$APP_ID" -c android.intent.category.LAUNCHER --pct-appswitch 100 -v 1 >/dev/null 2>&1; then
    ok "Monkey sent app-switch event."
  else
    warn "Monkey returned non-zero (common). If am launch worked, you can ignore this."
  fi
}

launch_app() {
  if launch_with_am; then
    return
  fi
  launch_with_monkey_forced
}

# ---- Run it all ----
adb_start
start_emulator_if_needed
wait_for_boot_complete
install_apk
launch_app

ok "All done 🎉"
</file>

<file path="LICENSE">
MIT License

Copyright (c) 2024 Fludde-inc

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
</file>

<file path="app/src/androidTest/java/com/example/fludde/ExampleInstrumentedTest.java">
package com.example.fludde;

import android.content.Context;

import androidx.test.platform.app.InstrumentationRegistry;
import androidx.test.ext.junit.runners.AndroidJUnit4;

import org.junit.Test;
import org.junit.runner.RunWith;

import static org.junit.Assert.*;

@RunWith(AndroidJUnit4.class)
public class ExampleInstrumentedTest {
    @Test
    public void useAppContext() {
        Context appContext = InstrumentationRegistry.getInstrumentation().getTargetContext();
        assertEquals("com.example.fludde", appContext.getPackageName());
    }
}
</file>

<file path="app/src/main/java/com/example/fludde/adapters/BookChildAdapter.java">
package com.example.fludde.adapters;

import android.content.Context;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.TextView;

import androidx.annotation.NonNull;
import androidx.recyclerview.widget.RecyclerView;

import com.example.fludde.R;
import com.example.fludde.model.BooksContent;
import com.example.fludde.utils.GlideExtensions;
import com.google.android.material.imageview.ShapeableImageView;

import java.util.List;

public class BookChildAdapter extends RecyclerView.Adapter<BookChildAdapter.BookViewHolder> {

    public interface OnBookContentListener {
        void onBookContentClick(int position);
        void onBookContentLongClick(int position);
    }

    private final Context context;
    private final List<BooksContent> contents;
    private final OnBookContentListener listener;

    public BookChildAdapter(Context context, List<BooksContent> contents, OnBookContentListener listener) {
        this.context = context;
        this.contents = contents;
        this.listener = listener;
        setHasStableIds(true);
    }

    @Override public long getItemId(int position) {
        String key = contents.get(position).getTitle() + "|" + position;
        return key.hashCode();
    }

    @NonNull
    @Override
    public BookViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {
        View v = LayoutInflater.from(context).inflate(R.layout.content_post_img, parent, false);
        v.setBackgroundResource(R.drawable.list_item_bg);
        return new BookViewHolder(v);
    }

    @Override
    public void onBindViewHolder(@NonNull BookViewHolder holder, int position) {
        holder.bind(contents.get(position));
    }

    @Override
    public int getItemCount() { return contents.size(); }

    class BookViewHolder extends RecyclerView.ViewHolder {
        private final ShapeableImageView ivPoster;
        private final TextView tvTitle;

        BookViewHolder(@NonNull View itemView) {
            super(itemView);
            ivPoster = itemView.findViewById(R.id.ivContentImage);
            tvTitle = itemView.findViewById(R.id.tvImageContentTitle);

            itemView.setOnClickListener(v -> {
                int pos = getAdapterPosition(); // <-- fix
                if (pos != RecyclerView.NO_POSITION && listener != null) {
                    listener.onBookContentClick(pos);
                }
            });

            itemView.setOnLongClickListener(v -> {
                int pos = getAdapterPosition(); // <-- fix
                if (pos != RecyclerView.NO_POSITION && listener != null) {
                    listener.onBookContentLongClick(pos);
                }
                return true;
            });
        }

        void bind(BooksContent c) {
            tvTitle.setText(c.getTitle());
            GlideExtensions.loadPoster(ivPoster, c.getImageURL());
        }
    }
}
</file>

<file path="app/src/main/java/com/example/fludde/adapters/MovieChildAdapter.java">
package com.example.fludde.adapters;

import android.content.Context;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.TextView;

import androidx.annotation.NonNull;
import androidx.recyclerview.widget.RecyclerView;

import com.example.fludde.R;
import com.example.fludde.model.MovieContent;
import com.example.fludde.utils.GlideExtensions;
import com.google.android.material.imageview.ShapeableImageView;

import java.util.List;

public class MovieChildAdapter extends RecyclerView.Adapter<MovieChildAdapter.MovieViewHolder> {

    public interface OnMovieContentListener {
        void onMovieContentClick(int position);
        void onMovieContentLongClick(int position);
    }

    private final Context context;
    private final List<MovieContent> contents;
    private final OnMovieContentListener listener;

    public MovieChildAdapter(Context context, List<MovieContent> contents, OnMovieContentListener listener) {
        this.context = context;
        this.contents = contents;
        this.listener = listener;
        setHasStableIds(true);
    }

    @Override public long getItemId(int position) {
        String key = contents.get(position).getTitle() + "|" + position;
        return key.hashCode();
    }

    @NonNull
    @Override
    public MovieViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {
        View v = LayoutInflater.from(context).inflate(R.layout.content_post_img, parent, false);
        v.setBackgroundResource(R.drawable.list_item_bg);
        return new MovieViewHolder(v);
    }

    @Override
    public void onBindViewHolder(@NonNull MovieViewHolder holder, int position) {
        holder.bind(contents.get(position));
    }

    @Override
    public int getItemCount() { return contents.size(); }

    class MovieViewHolder extends RecyclerView.ViewHolder {
        private final ShapeableImageView ivPoster;
        private final TextView tvTitle;

        MovieViewHolder(@NonNull View itemView) {
            super(itemView);
            ivPoster = itemView.findViewById(R.id.ivContentImage);
            tvTitle = itemView.findViewById(R.id.tvImageContentTitle);

            itemView.setOnClickListener(v -> {
                int pos = getAdapterPosition();
                if (pos != RecyclerView.NO_POSITION && listener != null) {
                    listener.onMovieContentClick(pos);
                }
            });

            itemView.setOnLongClickListener(v -> {
                int pos = getAdapterPosition();
                if (pos != RecyclerView.NO_POSITION && listener != null) {
                    listener.onMovieContentLongClick(pos);
                }
                return true;
            });
        }

        void bind(MovieContent c) {
            tvTitle.setText(c.getTitle());
            // FIXED: Changed getImageURL() to getImagePath()
            GlideExtensions.loadPoster(ivPoster, c.getImagePath());
        }
    }
}
</file>

<file path="app/src/main/java/com/example/fludde/model/BookDetails.java">
package com.example.fludde.model;

import java.util.ArrayList;

/**
 * Model class representing detailed information about a book.
 * This class contains only data fields (no UI components).
 */
public class BookDetails {

    // Book information fields
    private String title;
    private String subtitle;
    private String publisher;
    private String publishedDate;
    private String description;
    private String thumbnail;
    private String previewLink;
    private String infoLink;
    private String buyLink;
    private int pageCount;
    private ArrayList<String> authors;

    // Default constructor
    public BookDetails() {
        this.authors = new ArrayList<>();
    }

    // Constructor with all fields
    public BookDetails(String title, String subtitle, String publisher, String publishedDate,
                       String description, String thumbnail, String previewLink, 
                       String infoLink, String buyLink, int pageCount, ArrayList<String> authors) {
        this.title = title;
        this.subtitle = subtitle;
        this.publisher = publisher;
        this.publishedDate = publishedDate;
        this.description = description;
        this.thumbnail = thumbnail;
        this.previewLink = previewLink;
        this.infoLink = infoLink;
        this.buyLink = buyLink;
        this.pageCount = pageCount;
        this.authors = authors != null ? authors : new ArrayList<>();
    }

    // Getters
    public String getTitle() {
        return title;
    }

    public String getSubtitle() {
        return subtitle;
    }

    public String getPublisher() {
        return publisher;
    }

    public String getPublishedDate() {
        return publishedDate;
    }

    public String getDescription() {
        return description;
    }

    public String getThumbnail() {
        return thumbnail;
    }

    public String getPreviewLink() {
        return previewLink;
    }

    public String getInfoLink() {
        return infoLink;
    }

    public String getBuyLink() {
        return buyLink;
    }

    public int getPageCount() {
        return pageCount;
    }

    public ArrayList<String> getAuthors() {
        return authors;
    }

    // Setters
    public void setTitle(String title) {
        this.title = title;
    }

    public void setSubtitle(String subtitle) {
        this.subtitle = subtitle;
    }

    public void setPublisher(String publisher) {
        this.publisher = publisher;
    }

    public void setPublishedDate(String publishedDate) {
        this.publishedDate = publishedDate;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public void setThumbnail(String thumbnail) {
        this.thumbnail = thumbnail;
    }

    public void setPreviewLink(String previewLink) {
        this.previewLink = previewLink;
    }

    public void setInfoLink(String infoLink) {
        this.infoLink = infoLink;
    }

    public void setBuyLink(String buyLink) {
        this.buyLink = buyLink;
    }

    public void setPageCount(int pageCount) {
        this.pageCount = pageCount;
    }

    public void setAuthors(ArrayList<String> authors) {
        this.authors = authors != null ? authors : new ArrayList<>();
    }

    // Helper method to get formatted author names
    public String getAuthorsAsString() {
        if (authors == null || authors.isEmpty()) {
            return "Unknown Author";
        }
        return String.join(", ", authors);
    }

    // Helper method to check if book has valid data
    public boolean isValid() {
        return title != null && !title.trim().isEmpty();
    }

    @Override
    public String toString() {
        return "BookDetails{" +
                "title='" + title + '\'' +
                ", subtitle='" + subtitle + '\'' +
                ", publisher='" + publisher + '\'' +
                ", publishedDate='" + publishedDate + '\'' +
                ", pageCount=" + pageCount +
                ", authors=" + authors +
                '}';
    }
}
</file>

<file path="app/src/main/java/com/example/fludde/model/MovieContent.java">
package com.example.fludde.model;

import com.example.fludde.adapters.MovieChildAdapter;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.util.ArrayList;
import java.util.List;

public class MovieContent {
    String posterPath;
    String backdropPath;
    String title;
    String overview;


    public MovieContent(JSONObject jsonObject) throws JSONException {
        posterPath = jsonObject.getString( "poster_path");
        backdropPath = jsonObject.getString( "backdrop_path");
        title = jsonObject.getString("title");
        overview = jsonObject.getString("overview");
    }

    public static List<MovieContent> fromJsonArray(JSONArray movieJsonArray) throws JSONException {
        List<MovieContent> movies = new ArrayList<>();

        for(int i =0; i < movieJsonArray.length(); i++ )
        {
            movies.add(new MovieContent(movieJsonArray.getJSONObject(i)));

        }
        return movies;
    }


    public String getImagePath() {
        return String.format("https://image.tmdb.org/t/p/w342/%s",posterPath) ;
    }

    public String getBackdropPath(){
        return String.format("https://image.tmdb.org/t/p/w342/%s",backdropPath) ;

    }

    public String getTitle() {
        return title;
    }

    public String getOverview() {
        return overview;
    }


}
</file>

<file path="app/src/main/java/com/example/fludde/model/MusicContent.java">
package com.example.fludde.model;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.util.ArrayList;
import java.util.List;

public class MusicContent {

    private String title;
    private  String artist;
    private String album;
    private String description;
    private String recordLabel;
    private String coverIMGUrl;

    private MusicContent(JSONObject jsonObject) throws JSONException{
        title = jsonObject.getString("name");
        artist = jsonObject.getString("artistName");
//        album = jsonObject.getString("")
       // recordLabel =
        coverIMGUrl = jsonObject.getString("artworkUrl100");

    }
    public static List<MusicContent> fromJsonArray(JSONArray results) throws JSONException {
        List<MusicContent> musics = new ArrayList<>();

        for(int i =0; i < results.length(); i++ )
        {
            musics.add(new MusicContent(results.getJSONObject(i)));

        }
        return musics;
    }

    public String getCoverIMGUrl() {
        return coverIMGUrl;
    }

    public void setCoverIMGUrl(String coverIMGUrl) {
        this.coverIMGUrl = coverIMGUrl;
    }





    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public String getArtist() {
        return artist;
    }

    public void setArtist(String artist) {
        this.artist = artist;
    }

    public String getAlbum() {
        return album;
    }

    public void setAlbum(String album) {
        this.album = album;
    }

    public String getDescription() {

       description = String.format("%s %s %s %s",title, artist, album, recordLabel);

        return description;
    }

    public void setDescription(String description) {

        this.description = description;
    }

    public String getRecordLabel() {
        return recordLabel;
    }

    public void setRecordLabel(String recordLabel) {
        this.recordLabel = recordLabel;
    }
}
</file>

<file path="app/src/main/java/com/example/fludde/utils/MockData.java">
package com.example.fludde.utils;

import com.example.fludde.model.PostUi;
import com.example.fludde.model.UserUi;

import org.json.JSONArray;
import org.json.JSONObject;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

/** Tiny factory of offline mock data for UI rendering. */
public final class MockData {
    private MockData() {}

    public static JSONObject tmdbTrendingJson() throws Exception {
        JSONArray results = new JSONArray();

        results.put(new JSONObject()
                .put("poster_path", "kqjL17yufvn9OVLyXYpvtyrFfak.jpg")
                .put("backdrop_path", "lNyLSOKMMeUPr1RsL4KcRuIXwHt.jpg")
                .put("title", "Mock: The Lost City")
                .put("overview", "Two brilliant adventurers embark on a mock journey."));

        results.put(new JSONObject()
                .put("poster_path", "6DrHO1jr3qVrViUO6s6kFiAGM7.jpg")
                .put("backdrop_path", "wcKFYIiVDvRURrzglV9kGu7fpfY.jpg")
                .put("title", "Mock: Night Patrol")
                .put("overview", "A stylish mystery that totally doesn't require an API key."));

        results.put(new JSONObject()
                .put("poster_path", "t6HIqrRAclMCA60NsSmeqe9RmNV.jpg")
                .put("backdrop_path", "s16H6tpK2utvwDtzZ8Qy4qm5Emw.jpg")
                .put("title", "Mock: Ocean Deep")
                .put("overview", "An epic dive into mock data excellence."));

        JSONObject payload = new JSONObject();
        payload.put("results", results);
        return payload;
    }

    public static JSONObject itunesSearchJson() throws Exception {
        JSONArray results = new JSONArray();

        results.put(new JSONObject()
                .put("name", "Mock Song One")
                .put("artistName", "The Mockers")
                .put("artworkUrl100", "https://picsum.photos/200?image=1069"));

        results.put(new JSONObject()
                .put("name", "Dreams in JSON")
                .put("artistName", "Null & Void")
                .put("artworkUrl100", "https://picsum.photos/200?image=1027"));

        results.put(new JSONObject()
                .put("name", "Offline Anthem")
                .put("artistName", "Airplane Mode")
                .put("artworkUrl100", "https://picsum.photos/200?image=1003"));

        JSONObject payload = new JSONObject();
        payload.put("results", results);
        return payload;
    }

    public static List<PostUi> mockPosts() {
        List<PostUi> list = new ArrayList<>();

        // Fixed: Added contentImageUrl parameter (7 parameters total)
        list.add(new PostUi(
                "Movie",
                "Buddy cops wreak havoc while being lovable.",
                "Bad Boys II",
                "A classic turn-your-brain-off action flick.",
                "https://image.tmdb.org/t/p/w500/kqjL17yufvn9OVLyXYpvtyrFfak.jpg", // contentImageUrl
                "demo",
                "https://i.pravatar.cc/150?img=1"
        ));

        list.add(new PostUi(
                "Book",
                "Wizards, prophecies, and teenage angst—the whole package.",
                "Harry Potter and the Order of the Phoenix",
                "JK Rowling really keeps you guessing!",
                "https://picsum.photos/200/300?image=1020", // contentImageUrl
                "alice",
                "https://i.pravatar.cc/150?img=4"
        ));

        list.add(new PostUi(
                "Music",
                "This song speaks to my soul. Pure emotion.",
                "Someone Like You",
                "Adele never disappoints.",
                "https://picsum.photos/200?image=1069", // contentImageUrl
                "bob",
                "https://i.pravatar.cc/150?img=6"
        ));

        return list;
    }

    public static List<UserUi> mockUsers() {
        List<UserUi> list = new ArrayList<>();
        list.add(new UserUi("demo", "https://i.pravatar.cc/150?img=1"));
        list.add(new UserUi("testuser", "https://i.pravatar.cc/150?img=2"));
        list.add(new UserUi("alice", "https://i.pravatar.cc/150?img=4"));
        list.add(new UserUi("bob", "https://i.pravatar.cc/150?img=6"));
        list.add(new UserUi("charlie", "https://i.pravatar.cc/150?img=7"));
        return list;
    }

    // ========== BOOKS MOCK DATA ==========

    public static JSONObject googleBooksJson() throws Exception {
        JSONArray items = new JSONArray();
        
        items.put(createBookItem(
            "Mock: The Great Gatsby",
            new String[]{"F. Scott Fitzgerald"},
            "https://picsum.photos/200/300?image=1011",
            "A classic American novel set in the Jazz Age."
        ));
        
        items.put(createBookItem(
            "Mock: 1984",
            new String[]{"George Orwell"},
            "https://picsum.photos/200/300?image=1015",
            "A dystopian social science fiction novel."
        ));
        
        items.put(createBookItem(
            "Mock: To Kill a Mockingbird",
            new String[]{"Harper Lee"},
            "https://picsum.photos/200/300?image=1020",
            "A novel about racial injustice in the Deep South."
        ));
        
        items.put(createBookItem(
            "Mock: Pride and Prejudice",
            new String[]{"Jane Austen"},
            "https://picsum.photos/200/300?image=1025",
            "A romantic novel of manners."
        ));
        
        items.put(createBookItem(
            "Mock: The Catcher in the Rye",
            new String[]{"J.D. Salinger"},
            "https://picsum.photos/200/300?image=1030",
            "A story about teenage rebellion and angst."
        ));
        
        JSONObject payload = new JSONObject();
        payload.put("items", items);
        return payload;
    }

    private static JSONObject createBookItem(String title, String[] authors, 
                                             String imageUrl, String description) 
                                             throws Exception {
        JSONArray authorsArray = new JSONArray();
        for (String author : authors) {
            authorsArray.put(author);
        }
        
        JSONObject imageLinks = new JSONObject();
        imageLinks.put("thumbnail", imageUrl);
        
        JSONObject volumeInfo = new JSONObject();
        volumeInfo.put("title", title);
        volumeInfo.put("authors", authorsArray);
        volumeInfo.put("imageLinks", imageLinks);
        volumeInfo.put("description", description);
        volumeInfo.put("publishedDate", "2024");
        
        JSONObject item = new JSONObject();
        item.put("volumeInfo", volumeInfo);
        return item;
    }

    // ========== AUTHENTICATION MOCK DATA ==========

    public static class MockUser {
        public final String username;
        public final String password;
        public final String email;
        public final String profilePictureUrl;
        
        public MockUser(String username, String password, String email, String profilePictureUrl) {
            this.username = username;
            this.password = password;
            this.email = email;
            this.profilePictureUrl = profilePictureUrl;
        }
    }

    private static final List<MockUser> MOCK_AUTH_USERS = new ArrayList<>(Arrays.asList(
        new MockUser("demo", "demo123", "demo@example.com", "https://i.pravatar.cc/150?img=1"),
        new MockUser("testuser", "test123", "test@example.com", "https://i.pravatar.cc/150?img=2"),
        new MockUser("alice", "alice123", "alice@example.com", "https://i.pravatar.cc/150?img=4"),
        new MockUser("bob", "bob123", "bob@example.com", "https://i.pravatar.cc/150?img=6"),
        new MockUser("charlie", "charlie123", "charlie@example.com", "https://i.pravatar.cc/150?img=7")
    ));

    public static boolean isValidLogin(String username, String password) {
        if (username == null || password == null) return false;
        for (MockUser user : MOCK_AUTH_USERS) {
            if (user.username.equals(username) && user.password.equals(password)) {
                return true;
            }
        }
        return false;
    }

    public static MockUser getMockUser(String username) {
        if (username == null) return null;
        for (MockUser user : MOCK_AUTH_USERS) {
            if (user.username.equals(username)) {
                return user;
            }
        }
        return null;
    }

    public static boolean canRegisterUser(String username, String email) {
        if (username == null || email == null) return false;
        for (MockUser user : MOCK_AUTH_USERS) {
            if (user.username.equals(username) || user.email.equals(email)) {
                return false; // Already exists
            }
        }
        return true; // Can register
    }

    // NEW: Method to register a new mock user
    public static void registerMockUser(String username, String password, String email) {
        String profilePictureUrl = "https://i.pravatar.cc/150?img=" + (MOCK_AUTH_USERS.size() + 10);
        MOCK_AUTH_USERS.add(new MockUser(username, password, email, profilePictureUrl));
    }

    // ========== PROFILE MOCK DATA ==========

    public static class MockProfile {
        public final String username;
        public final String email;
        public final String profilePictureUrl;
        public final String bio;
        public final List<PostUi> userPosts;
        
        public MockProfile(String username, String email, String profilePictureUrl, 
                          String bio, List<PostUi> userPosts) {
            this.username = username;
            this.email = email;
            this.profilePictureUrl = profilePictureUrl;
            this.bio = bio;
            this.userPosts = userPosts;
        }
    }

    public static MockProfile mockUserProfile(String username) {
        // Get user info
        MockUser user = getMockUser(username);
        if (user == null) {
            // Default for unknown users
            user = new MockUser(username, "", username + "@example.com", 
                               "https://i.pravatar.cc/150?img=10");
        }
        
        // Get user's posts (filter mockPosts by username)
        List<PostUi> allPosts = mockPosts();
        List<PostUi> userPosts = new ArrayList<>();
        for (PostUi post : allPosts) {
            if (post.getUserName().equals(username)) {
                userPosts.add(post);
            }
        }
        
        String bio = "Mock bio for " + username + ". Loves movies, books, and music!";
        
        return new MockProfile(user.username, user.email, user.profilePictureUrl, 
                              bio, userPosts);
    }
}
</file>

<file path="app/src/main/java/com/example/fludde/Post.java">
package com.example.fludde;

import com.parse.ParseClassName;
import com.parse.ParseFile;
import com.parse.ParseObject;
import com.parse.ParseUser;

@ParseClassName("Post")
public class Post extends ParseObject {

    User user = new User();
    public static final String KEY_DESCRIPTION = "description";
    public static final String KEY_CONTENT_IMAGE = "contentImage";
    public static final String KEY_USER = "user";
    public  static final String KEY_CREATED_AT = "createdAt";
    public static final String KEY_IMAGE = "userImage";
    public static final String KEY_CONTENT_TITLE ="contentTitle";
    public static final String KEY_CATEGORY = "category";
    public  static final String KEY_REVIEW = "review";

    public String getDescription() {
        return getString(KEY_DESCRIPTION);
    }

    public ParseFile getContentImage() {
        return getParseFile(KEY_CONTENT_IMAGE);
    }
    public ParseFile getUserImage(){

        return getParseFile(KEY_IMAGE);
    }


    public String getCategory(){return getString(KEY_CATEGORY);}
    public ParseUser getUser() {
        return getParseUser(KEY_USER);
    }
    public String getReview(){return getString(KEY_REVIEW);}
    public String getCreateAt(){return getString(KEY_CREATED_AT);}
    public void setDescription(String description){
        put(KEY_DESCRIPTION, description);
    }
    public void setContentImage(ParseFile parseFile){
        put(KEY_CONTENT_IMAGE, parseFile);
    }
    public void setUser(ParseUser user){
        put(KEY_USER,user);
    }
    public void setReview(String review){put(KEY_REVIEW,review);}
    public void setCategory(String category){put(KEY_CATEGORY,category);}
    public void setContentTitle(String contentTitle){put(KEY_CONTENT_TITLE,contentTitle);}
    public String getContentTitle() {
        return getString( KEY_CONTENT_TITLE);
    }




}
</file>

<file path="app/src/main/java/com/example/fludde/User.java">
package com.example.fludde;

import com.parse.ParseUser;
import com.parse.ParseException;

/**
 * User class extending ParseUser
 * No @ParseClassName annotation needed - ParseUser already maps to "_User" table
 */
public class User extends ParseUser {
    
    // Constructor
    public User() {
        super();
    }
    
    // Custom getter and setter methods for additional fields
    
    /**
     * Get user's full name
     */
    public String getFullName() {
        return getString("fullName");
    }
    
    /**
     * Set user's full name
     */
    public void setFullName(String fullName) {
        put("fullName", fullName);
    }
    
    /**
     * Get user's phone number
     */
    public String getPhoneNumber() {
        return getString("phoneNumber");
    }
    
    /**
     * Set user's phone number
     */
    public void setPhoneNumber(String phoneNumber) {
        put("phoneNumber", phoneNumber);
    }
    
    /**
     * Get user's profile picture URL
     */
    public String getProfilePictureUrl() {
        return getString("profilePictureUrl");
    }
    
    /**
     * Set user's profile picture URL
     */
    public void setProfilePictureUrl(String url) {
        put("profilePictureUrl", url);
    }
    
    /**
     * Check if user has completed profile setup
     */
    public boolean isProfileComplete() {
        return getBoolean("profileComplete");
    }
    
    /**
     * Set profile completion status
     */
    public void setProfileComplete(boolean complete) {
        put("profileComplete", complete);
    }
    
    /**
     * Get the current logged-in user as a User object
     */
    public static User getCurrentUser() {
        return (User) ParseUser.getCurrentUser();
    }
}
</file>

<file path="app/src/main/res/color/card_bg_selector.xml">
<?xml version="1.0" encoding="utf-8"?>
<selector xmlns:android="http://schemas.android.com/apk/res/android">
    <!-- Selected → emphasize with PrimaryContainer -->
    <item android:state_checked="true" android:color="?attr/colorPrimaryContainer"/>
    <!-- Pressed/hovered → use a widely supported surface variant -->
    <item android:state_pressed="true" android:color="?attr/colorSurfaceVariant"/>
    <!-- Default -->
    <item android:color="?attr/colorSurface"/>
</selector>
</file>

<file path="app/src/main/res/layout/include_inline_error.xml">
<?xml version="1.0" encoding="utf-8"?>
<com.google.android.material.card.MaterialCardView
    xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    android:visibility="gone"
    android:layout_margin="@dimen/space_8"
    app:cardUseCompatPadding="true">

    <LinearLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:padding="@dimen/space_16"
        android:orientation="horizontal"
        android:gravity="center_vertical">

        <TextView
            android:id="@+id/tvErrorMessage"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_weight="1"
            android:textAppearance="@style/TextAppearance.Material3.BodyMedium"
            android:maxLines="2"
            android:ellipsize="end"
            android:text="@string/error_generic" />

        <com.google.android.material.button.MaterialButton
            android:id="@+id/btnRetry"
            style="@style/Widget.Fludde.Button.Text"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="@string/action_retry" />
    </LinearLayout>
</com.google.android.material.card.MaterialCardView>
</file>

<file path="app/src/main/res/layout/item_post_skeleton.xml">
<?xml version="1.0" encoding="utf-8"?>
<com.google.android.material.card.MaterialCardView
    xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    android:layout_marginStart="@dimen/space_8"
    android:layout_marginEnd="@dimen/space_8"
    android:layout_marginTop="@dimen/space_8"
    app:cardUseCompatPadding="true">

    <androidx.constraintlayout.widget.ConstraintLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:padding="@dimen/space_16">

        <!-- Poster block -->
        <View
            android:id="@+id/skPoster"
            android:layout_width="@dimen/poster_md_w"
            android:layout_height="@dimen/poster_md_h"
            android:background="?attr/colorSurfaceVariant"
            android:alpha="0.7"
            app:layout_constraintTop_toTopOf="parent"
            app:layout_constraintStart_toStartOf="parent" />

        <!-- Title bar -->
        <View
            android:id="@+id/skTitle"
            android:layout_width="@dimen/poster_md_w"
            android:layout_height="14dp"
            android:background="?attr/colorSurfaceVariant"
            android:alpha="0.7"
            app:layout_constraintTop_toBottomOf="@id/skPoster"
            app:layout_constraintStart_toStartOf="@id/skPoster"
            android:layout_marginTop="@dimen/space_8" />

        <!-- Category chip line -->
        <View
            android:id="@+id/skCategory"
            android:layout_width="64dp"
            android:layout_height="12dp"
            android:background="?attr/colorSurfaceVariant"
            android:alpha="0.7"
            app:layout_constraintTop_toTopOf="@id/skPoster"
            app:layout_constraintStart_toEndOf="@id/skPoster"
            android:layout_marginStart="@dimen/space_16" />

        <!-- Description lines -->
        <View
            android:id="@+id/skDesc1"
            android:layout_width="0dp"
            android:layout_height="12dp"
            android:background="?attr/colorSurfaceVariant"
            android:alpha="0.7"
            app:layout_constraintStart_toEndOf="@id/skPoster"
            app:layout_constraintEnd_toEndOf="parent"
            app:layout_constraintTop_toBottomOf="@id/skCategory"
            android:layout_marginStart="@dimen/space_16"
            android:layout_marginTop="@dimen/space_8" />

        <View
            android:id="@+id/skDesc2"
            android:layout_width="0dp"
            android:layout_height="12dp"
            android:background="?attr/colorSurfaceVariant"
            android:alpha="0.7"
            app:layout_constraintStart_toStartOf="@id/skDesc1"
            app:layout_constraintEnd_toEndOf="@id/skDesc1"
            app:layout_constraintTop_toBottomOf="@id/skDesc1"
            android:layout_marginTop="@dimen/space_8" />

        <View
            android:id="@+id/skDesc3"
            android:layout_width="0dp"
            android:layout_height="12dp"
            android:background="?attr/colorSurfaceVariant"
            android:alpha="0.7"
            app:layout_constraintStart_toStartOf="@id/skDesc1"
            app:layout_constraintEnd_toEndOf="@id/skDesc1"
            app:layout_constraintTop_toBottomOf="@id/skDesc2"
            android:layout_marginTop="@dimen/space_8" />

        <!-- Avatar circle -->
        <View
            android:id="@+id/skAvatar"
            android:layout_width="@dimen/avatar_md"
            android:layout_height="@dimen/avatar_md"
            android:background="?attr/colorSurfaceVariant"
            android:alpha="0.7"
            android:layout_marginTop="@dimen/space_16"
            app:layout_constraintTop_toBottomOf="@id/skTitle"
            app:layout_constraintStart_toStartOf="parent" />

    </androidx.constraintlayout.widget.ConstraintLayout>
</com.google.android.material.card.MaterialCardView>
</file>

<file path="app/src/main/res/menu/menu_bottom_navigation.xml">
<?xml version="1.0" encoding="utf-8"?>
<menu xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:android="http://schemas.android.com/apk/res/android">

    <item
        android:id="@+id/action_home"
        android:icon="@drawable/ic_home_24"
        android:title="@string/nav_home"
        app:showAsAction="always" />

    <item
        android:id="@+id/action_feed"
        android:icon="@drawable/ic_dynamic_feed_24"
        android:title="@string/nav_timeline"
        app:showAsAction="always" />

    <item
        android:id="@+id/action_compose"
        android:icon="@drawable/ic_add_comment_24"
        android:title="@string/nav_compose"
        app:showAsAction="always" />

    <item
        android:id="@+id/action_search"
        android:icon="@drawable/ic_search_24"
        android:title="@string/nav_search"
        app:showAsAction="always" />

    <item
        android:id="@+id/action_profile"
        android:icon="@drawable/ic_person_24"
        android:title="@string/nav_profile"
        app:showAsAction="always" />
</menu>
</file>

<file path="app/src/main/res/mipmap-anydpi-v26/ic_launcher.xml">
<?xml version="1.0" encoding="utf-8"?>
<adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">
    <background android:drawable="@drawable/ic_launcher_background" />
    <foreground android:drawable="@drawable/ic_launcher_foreground" />
    <!-- Monochrome layer for Android 13+ (dark/light adaptive) -->
    <monochrome android:drawable="@drawable/ic_launcher_monochrome" />
</adaptive-icon>
</file>

<file path="app/src/main/res/values/dimens.xml">
<?xml version="1.0" encoding="utf-8"?>
<!-- app/src/main/res/values/dimens.xml -->
<resources>

    <!-- ───────── Spacing scale (8dp baseline; 4dp for tight alignments) ───────── -->
    <dimen name="space_4">4dp</dimen>
    <dimen name="space_8">8dp</dimen>
    <dimen name="space_12">12dp</dimen>
    <dimen name="space_16">16dp</dimen>
    <dimen name="space_24">24dp</dimen>
    <dimen name="space_32">32dp</dimen>

    <!-- Optional semantic aliases (use either these or the numeric names) -->
    <dimen name="space_xs">@dimen/space_4</dimen>
    <dimen name="space_sm">@dimen/space_8</dimen>
    <dimen name="space_md">@dimen/space_12</dimen>
    <dimen name="space_lg">@dimen/space_16</dimen>
    <dimen name="space_xl">@dimen/space_24</dimen>
    <dimen name="space_2xl">@dimen/space_32</dimen>

    <!-- Edge-to-edge safe insets (baseline page padding) -->
    <dimen name="inset_screen">@dimen/space_16</dimen>

    <!-- ───────── Interaction + icons ───────── -->
    <!-- Minimum touch target for tappable controls -->
    <dimen name="touch_target_min">48dp</dimen>
    <!-- Common icon sizes -->
    <dimen name="icon_size_sm">24dp</dimen>
    <dimen name="icon_size_md">36dp</dimen>
    <dimen name="icon_size_lg">48dp</dimen>

    <!-- ───────── Image sizes (stable aspect ratios) ───────── -->
    <!-- Square thumbnails (covers, avatars in grids, etc.) -->
    <dimen name="image_square_sm">96dp</dimen>
    <dimen name="image_square_md">120dp</dimen>
    <dimen name="image_square_lg">160dp</dimen>

    <!-- Poster / book cover (2:3 aspect) -->
    <dimen name="poster_sm_w">96dp</dimen>
    <dimen name="poster_sm_h">144dp</dimen>
    <dimen name="poster_md_w">120dp</dimen>
    <dimen name="poster_md_h">180dp</dimen>
    <dimen name="poster_lg_w">160dp</dimen>
    <dimen name="poster_lg_h">240dp</dimen>

    <!-- Avatars (circular/squircle) -->
    <dimen name="avatar_sm">40dp</dimen>
    <dimen name="avatar_md">48dp</dimen>
    <dimen name="avatar_lg">56dp</dimen>
    <dimen name="avatar_xl">64dp</dimen>

    <!-- ───────── Common radii (align with M3 shape theming) ───────── -->
    <dimen name="radius_xs">4dp</dimen>
    <dimen name="radius_sm">8dp</dimen>
    <dimen name="radius_md">12dp</dimen>
    <dimen name="radius_lg">16dp</dimen>
    <dimen name="radius_xl">20dp</dimen>

    <!-- Useful misc -->
    <dimen name="card_content_padding">@dimen/space_16</dimen>
    <dimen name="divider_thin">1dp</dimen>

</resources>
</file>

<file path="app/src/main/res/values/preloaded_fonts.xml">
<?xml version="1.0" encoding="utf-8"?>
<resources>
    <array name="preloaded_fonts" translatable="false">
        <item>@font/acme</item>
        <item>@font/black_han_sans</item>
    </array>
</resources>
</file>

<file path="app/src/main/res/values-v31/themes.xml">
<?xml version="1.0" encoding="utf-8"?>
<resources>
    <!-- API 31+: keep Dynamic Color (Material 3). -->
    <style name="Theme.Fludde" parent="Theme.Material3.DynamicColors.DayNight.NoActionBar">
        <item name="shapeAppearanceSmallComponent">@style/ShapeAppearance.Fludde.Medium</item>
        <item name="shapeAppearanceMediumComponent">@style/ShapeAppearance.Fludde.Medium</item>
        <item name="shapeAppearanceLargeComponent">@style/ShapeAppearance.Fludde.Large</item>

        <!-- System bars (transparent for edge-to-edge) -->
        <item name="android:statusBarColor">@android:color/transparent</item>
        <item name="android:navigationBarColor">@android:color/transparent</item>
        <item name="android:windowLightStatusBar">true</item>
        <item name="android:windowLightNavigationBar">true</item>

        <!-- Material widgets -->
        <item name="materialCardViewStyle">@style/Widget.Fludde.Card</item>
        <!-- ⛔ Do not set navigationBarStyle or floatingActionButtonStyle here -->
    </style>
</resources>
</file>

<file path="app/src/test/java/com/example/fludde/ExampleUnitTest.java">
package com.example.fludde;

import org.junit.Test;

import static org.junit.Assert.*;

public class ExampleUnitTest {
    @Test
    public void addition_isCorrect() {
        assertEquals(4, 2 + 2);
    }
}
</file>

<file path="config/gradle.properties">
# Project-wide Gradle settings.
# IDE users: Gradle settings configured through the IDE can override this file.

# JVM args for the Gradle Daemon (3 GB heap + consistent encoding)
org.gradle.jvmargs=-Xmx3g -Dfile.encoding=UTF-8

# AndroidX / Jetifier / non-transitive R flags
android.useAndroidX=true
android.enableJetifier=true
android.nonTransitiveRClass=true
</file>

<file path=".repomixignore">
*.webp
TUTORIAL.md
OUTLINE.md
app/src/main/res/values/font_certs.xml
*.zsh
</file>

<file path="settings.gradle">
pluginManagement {
  repositories {
    // Where Gradle finds plugins like the Android Gradle Plugin (AGP)
    google()
    mavenCentral()
    gradlePluginPortal()
  }
}

dependencyResolutionManagement {
  // Prefer repositories declared here (modern Gradle/AGP practice)
  repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS)
  repositories {
    // Primary repos for Android projects
    google()
    mavenCentral()

    // Needed for Parse Android SDK 4.x (com.github.parse-community)
    // Keep JitPack LAST so Gradle checks the standard repos first.
    maven { url "https://www.jitpack.io" }
  }
}

rootProject.name = "Fludde"
include(":app")
</file>

<file path="app/src/main/java/com/example/fludde/adapters/MusicChildAdapter.java">
package com.example.fludde.adapters;

import android.content.Context;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.TextView;

import androidx.annotation.NonNull;
import androidx.recyclerview.widget.RecyclerView;

import com.example.fludde.R;
import com.example.fludde.model.MusicContent;
import com.example.fludde.utils.GlideExtensions;
import com.google.android.material.imageview.ShapeableImageView;

import java.util.List;

public class MusicChildAdapter extends RecyclerView.Adapter<MusicChildAdapter.MusicViewHolder> {

    public interface OnMusicContentListener {
        void onMusicContentClick(int position);
        void onMusicContentLongClick(int position);
    }

    private final Context context;
    private final List<MusicContent> contents;
    private final OnMusicContentListener listener;

    public MusicChildAdapter(Context context, List<MusicContent> contents, OnMusicContentListener listener) {
        this.context = context;
        this.contents = contents;
        this.listener = listener;
        setHasStableIds(true);
    }

    @Override public long getItemId(int position) {
        String key = contents.get(position).getTitle() + "|" + position;
        return key.hashCode();
    }

    @NonNull
    @Override
    public MusicViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {
        View v = LayoutInflater.from(context).inflate(R.layout.content_post_img, parent, false);
        v.setBackgroundResource(R.drawable.list_item_bg);
        return new MusicViewHolder(v);
    }

    @Override
    public void onBindViewHolder(@NonNull MusicViewHolder holder, int position) {
        holder.bind(contents.get(position));
    }

    @Override
    public int getItemCount() { return contents.size(); }

    class MusicViewHolder extends RecyclerView.ViewHolder {
        private final ShapeableImageView ivPoster;
        private final TextView tvTitle;

        MusicViewHolder(@NonNull View itemView) {
            super(itemView);
            ivPoster = itemView.findViewById(R.id.ivContentImage);
            tvTitle = itemView.findViewById(R.id.tvImageContentTitle);

            itemView.setOnClickListener(v -> {
                int pos = getAdapterPosition();
                if (pos != RecyclerView.NO_POSITION && listener != null) {
                    listener.onMusicContentClick(pos);
                }
            });

            itemView.setOnLongClickListener(v -> {
                int pos = getAdapterPosition();
                if (pos != RecyclerView.NO_POSITION && listener != null) {
                    listener.onMusicContentLongClick(pos);
                }
                return true;
            });
        }

        void bind(MusicContent c) {
            tvTitle.setText(c.getTitle());
            // FIXED: Changed getImageURL() to getCoverIMGUrl()
            GlideExtensions.loadPoster(ivPoster, c.getCoverIMGUrl());
        }
    }
}
</file>

<file path="app/src/main/java/com/example/fludde/adapters/SearchFragmentAdapter.java">
package com.example.fludde.adapters;

import android.content.Context;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;

import com.bumptech.glide.Glide;
import com.bumptech.glide.load.resource.drawable.DrawableTransitionOptions;
import com.bumptech.glide.request.RequestOptions;
import com.bumptech.glide.load.resource.bitmap.CenterCrop;
import com.example.fludde.R;
import android.widget.ImageView;
import android.widget.TextView;

import androidx.annotation.NonNull;
import androidx.recyclerview.widget.RecyclerView;

import com.example.fludde.model.UserUi;

import java.util.List;

public class SearchFragmentAdapter extends RecyclerView.Adapter<SearchFragmentAdapter.UserViewHolder> {
    private final Context context;
    private final List<UserUi> users;

    public SearchFragmentAdapter(Context context, List<UserUi> users) {
        this.context = context;
        this.users = users;
        setHasStableIds(true);
    }

    @Override
    public long getItemId(int position) {
        String key = users.get(position).getUsername() + "|" + position;
        return key.hashCode();
    }

    @NonNull
    @Override
    public UserViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {
        View v = LayoutInflater.from(context).inflate(R.layout.users_query, parent, false);
        return new UserViewHolder(v);
    }

    @Override
    public void onBindViewHolder(@NonNull UserViewHolder holder, int position) {
        holder.bind(users.get(position));
    }

    @Override
    public int getItemCount() { return users.size(); }

    class UserViewHolder extends RecyclerView.ViewHolder{
        private final TextView tvUName;
        private final ImageView ivUserImage;

        public UserViewHolder(@NonNull View itemView) {
            super(itemView);
            tvUName = itemView.findViewById(R.id.tvUName);
            ivUserImage = itemView.findViewById(R.id.ivUserImage);
        }

        public void bind(UserUi user) {
            tvUName.setText(user.getUsername());

            Glide.with(context)
                .load(user.getImageUrl().isEmpty() ? null : user.getImageUrl())
                .apply(new RequestOptions().transform(new CenterCrop()))
                .placeholder(R.drawable.placeholder_avatar)
                .error(R.drawable.placeholder_avatar)
                .transition(DrawableTransitionOptions.withCrossFade())
                .into(ivUserImage);
        }
    }
}
</file>

<file path="app/src/main/java/com/example/fludde/fragments/ComposeParentFragment.java">
package com.example.fludde.fragments;

import android.os.Bundle;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ArrayAdapter;
import android.widget.AutoCompleteTextView;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.fragment.app.Fragment;
import androidx.fragment.app.FragmentTransaction;

import com.example.fludde.R;
import com.example.fludde.fragments.child.BookChildFragment;
import com.example.fludde.fragments.child.MovieChildFragment;
import com.example.fludde.fragments.child.MusicChildFragment;
import com.example.fludde.utils.ErrorHandler;

/**
 * ComposeParentFragment - Refactored to use ErrorHandler utility and string resources.
 * 
 * Changes:
 * - All hardcoded Toast messages moved to strings.xml
 * - All Toast.makeText() replaced with ErrorHandler methods
 * - Consistent error handling
 */
public class ComposeParentFragment extends Fragment {

    private static final String TAG = "ComposeParentFragment";

    private AutoCompleteTextView actCategory;

    @Nullable
    @Override
    public View onCreateView(@NonNull LayoutInflater inflater, 
                             @Nullable ViewGroup container, 
                             @Nullable Bundle savedInstanceState) {
        return inflater.inflate(R.layout.fragment_compose_parent, container, false);
    }

    @Override
    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {
        super.onViewCreated(view, savedInstanceState);

        actCategory = view.findViewById(R.id.actCategory);

        // Setup category dropdown
        String[] categories = {"Movies", "Books", "Music"};
        ArrayAdapter<String> adapter = new ArrayAdapter<>(
            requireContext(),
            android.R.layout.simple_dropdown_item_1line,
            categories
        );
        actCategory.setAdapter(adapter);

        // Handle category selection
        actCategory.setOnItemClickListener((parent, v, pos, id) -> {
            switch (pos) {
                case 0:
                default:
                    insertChild(new MovieChildFragment());
                    // ✅ Using ErrorHandler with string resource
                    ErrorHandler.showToast(requireContext(), R.string.content_selected_movies);
                    break;
                case 1:
                    insertChild(new BookChildFragment());
                    // ✅ Using ErrorHandler with string resource
                    ErrorHandler.showToast(requireContext(), R.string.content_selected_books);
                    break;
                case 2:
                    insertChild(new MusicChildFragment());
                    // ✅ Using ErrorHandler with string resource
                    ErrorHandler.showToast(requireContext(), R.string.content_selected_music);
                    break;
            }
        });

        // Default
        insertChild(new MovieChildFragment());
    }

    private void insertChild(Fragment child) {
        FragmentTransaction ft = getChildFragmentManager().beginTransaction();
        ft.replace(R.id.child_fragment_container, child);
        ft.commit();
    }
}
</file>

<file path="app/src/main/java/com/example/fludde/SignupActivity.java">
package com.example.fludde;

import android.content.Intent;
import android.os.Bundle;
import android.util.Log;
import android.widget.Button;
import android.widget.EditText;

import androidx.appcompat.app.AppCompatActivity;

import com.example.fludde.utils.ErrorHandler;
import com.example.fludde.utils.MockData;
import com.example.fludde.utils.MockSessionManager;
import com.parse.ParseException;
import com.parse.ParseUser;
import com.parse.SignUpCallback;

/**
 * Signup Activity with full Parse registration and session management.
 * 
 * Features:
 * - Mock mode registration (when BuildConfig.MOCK_MODE is true)
 * - Real Parse registration (when BuildConfig.MOCK_MODE is false)
 * - Input validation
 * - Error handling using ErrorHandler utility
 * - Session management via MockSessionManager (mock mode only)
 * 
 * Changes:
 * - All hardcoded strings moved to strings.xml
 * - All Toast.makeText() replaced with ErrorHandler methods
 * - Consistent error handling
 * - Improved logging with proper tags
 * - Added mock signup functionality
 * - Implemented real Parse signup
 */
public class SignupActivity extends AppCompatActivity {

    private static final String TAG = "SignupActivity";

    private EditText etUsername;
    private EditText etPassword;
    private EditText etEmail;
    private Button btnSignup;
    private Button btnCancel;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_signup);

        // Initialize views
        etUsername = findViewById(R.id.etUsername);
        etPassword = findViewById(R.id.etPassword);
        etEmail = findViewById(R.id.etEmail);
        btnSignup = findViewById(R.id.btnSignup);
        btnCancel = findViewById(R.id.btnCancel);

        // Set up button click listeners
        btnSignup.setOnClickListener(v -> performSignup());
        btnCancel.setOnClickListener(v -> finish());
    }

    /**
     * Handles the signup process.
     * Routes to mock registration if MOCK_MODE is enabled,
     * otherwise uses real Parse registration.
     */
    private void performSignup() {
        try {
            String username = etUsername.getText().toString().trim();
            String password = etPassword.getText().toString().trim();
            String email = etEmail.getText().toString().trim();

            // Validation
            if (username.isEmpty() || password.isEmpty() || email.isEmpty()) {
                ErrorHandler.showValidationError(this, R.string.error_signup_empty_fields);
                ErrorHandler.logWarning(TAG, "Signup attempt with empty fields");
                return;
            }

            // Additional password validation
            if (password.length() < 6) {
                ErrorHandler.showValidationError(this, "Password must be at least 6 characters");
                return;
            }

            // Basic email validation
            if (!email.contains("@") || !email.contains(".")) {
                ErrorHandler.showValidationError(this, "Please enter a valid email address");
                return;
            }

            // Route to appropriate signup method
            if (BuildConfig.MOCK_MODE) {
                performMockSignup(username, password, email);
            } else {
                performParseSignup(username, password, email);
            }

        } catch (Exception e) {
            ErrorHandler.showAuthError(this, R.string.error_signup_generic);
            ErrorHandler.logError(TAG, "Error during signup attempt", e);
        }
    }

    /**
     * 🆕 REAL PARSE SIGNUP IMPLEMENTATION
     * Registers a new user with Parse backend.
     * 
     * @param username The desired username
     * @param password The desired password
     * @param email The user's email address
     */
    private void performParseSignup(String username, String password, String email) {
        Log.d(TAG, "Attempting Parse signup for user: " + username);

        // Create new ParseUser object
        ParseUser newUser = new ParseUser();
        newUser.setUsername(username);
        newUser.setPassword(password);
        newUser.setEmail(email);

        // Optional: Set default profile picture URL
        // newUser.put("profilePicture", "https://i.imgur.com/default.png");

        // Sign up the user asynchronously
        newUser.signUpInBackground(new SignUpCallback() {
            @Override
            public void done(ParseException e) {
                if (e == null) {
                    // Signup successful
                    Log.d(TAG, "Parse signup successful for user: " + username);
                    ErrorHandler.showToast(SignupActivity.this, "Account created successfully! Welcome, " + username + "!");
                    navigateToMain();
                } else {
                    // Signup failed
                    Log.e(TAG, "Parse signup failed", e);
                    
                    // Handle specific Parse errors
                    if (e.getCode() == ParseException.USERNAME_TAKEN) {
                        ErrorHandler.showAuthError(SignupActivity.this, "Username is already taken");
                    } else if (e.getCode() == ParseException.EMAIL_TAKEN) {
                        ErrorHandler.showAuthError(SignupActivity.this, "Email is already registered");
                    } else if (e.getCode() == ParseException.CONNECTION_FAILED) {
                        ErrorHandler.showNetworkError(SignupActivity.this, R.string.error_network);
                    } else {
                        ErrorHandler.showAuthError(SignupActivity.this, R.string.error_signup_generic);
                    }
                }
            }
        });
    }

    /**
     * Mock signup handler.
     * Simulates user registration and saves session.
     * 
     * @param username The desired username
     * @param password The desired password
     * @param email The user's email address
     */
    private void performMockSignup(String username, String password, String email) {
        Log.d(TAG, "Attempting mock signup for user: " + username);
        
        // Simulate network delay for realistic behavior
        new android.os.Handler().postDelayed(() -> {
            if (MockData.canRegisterUser(username, email)) {
                // Register user in mock data
                MockData.registerMockUser(username, password, email);
                
                // Save mock session
                MockSessionManager.login(this, username);
                
                Log.d(TAG, "Mock signup successful: " + username);
                ErrorHandler.showToast(this, "Account created successfully! Welcome, " + username + "!");
                navigateToMain();
            } else {
                ErrorHandler.showToast(this, "Username or email already taken");
                Log.e(TAG, "Mock signup failed: username/email exists");
            }
        }, 500); // 500ms simulated delay
    }

    /**
     * Navigates to the main activity after successful signup.
     * Clears the back stack so user cannot return to signup screen.
     */
    private void navigateToMain() {
        Intent intent = new Intent(this, MainActivity.class);
        intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK);
        startActivity(intent);
        finish();
    }
}
</file>

<file path="app/src/main/res/layout/activity_login.xml">
<?xml version="1.0" encoding="utf-8"?>
<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    tools:context=".LoginActivity">

    <EditText
        android:id="@+id/etUsername"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:layout_marginStart="@dimen/space_16"
        android:layout_marginEnd="@dimen/space_16"
        android:hint="@string/hint_username"
        android:inputType="text"
        app:layout_constraintTop_toTopOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintHorizontal_bias="0.5"
        app:layout_constraintVertical_bias="0.3" />

    <EditText
        android:id="@+id/etPassword"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:layout_marginTop="@dimen/space_16"
        android:layout_marginStart="@dimen/space_16"
        android:layout_marginEnd="@dimen/space_16"
        android:hint="@string/hint_password"
        android:inputType="textPassword"
        app:layout_constraintTop_toBottomOf="@id/etUsername"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintHorizontal_bias="0.5" />

    <Button
        android:id="@+id/btnLogin"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:layout_marginTop="@dimen/space_16"
        android:layout_marginStart="@dimen/space_16"
        android:layout_marginEnd="@dimen/space_16"
        android:text="@string/action_login"
        app:layout_constraintTop_toBottomOf="@id/etPassword"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintHorizontal_bias="0.5" />

    <Button
        android:id="@+id/btnSignup"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:layout_marginTop="@dimen/space_16"
        android:layout_marginStart="@dimen/space_16"
        android:layout_marginEnd="@dimen/space_16"
        android:text="@string/action_signup"
        app:layout_constraintTop_toBottomOf="@id/btnLogin"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintHorizontal_bias="0.5" />

</androidx.constraintlayout.widget.ConstraintLayout>
</file>

<file path="app/src/main/res/layout/activity_main.xml">
<?xml version="1.0" encoding="utf-8"?>
<RelativeLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    tools:context=".MainActivity">

    <!-- Edge-to-edge container; insets applied in code (InsetsUtils) -->
    <FrameLayout
        android:id="@+id/flContainer"
        android:layout_width="match_parent"
        android:layout_height="match_parent" />

    <!-- Bottom nav uses the component’s own container styling from theme;
         no opaque system bars behind. Always show labels (Material guidance).
         Uses a clear Material 3 active indicator. -->
    <com.google.android.material.bottomnavigation.BottomNavigationView
        android:id="@+id/bottomNavigation"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:layout_alignParentBottom="true"
        app:menu="@menu/menu_bottom_navigation"
        app:labelVisibilityMode="labeled"
        app:itemActiveIndicatorStyle="@style/Widget.Fludde.NavigationBar.ActiveIndicator" />

</RelativeLayout>
</file>

<file path="app/src/main/res/layout/activity_signup.xml">
<?xml version="1.0" encoding="utf-8"?>
<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    tools:context=".SignupActivity">

    <EditText
        android:id="@+id/etUsername"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:layout_marginStart="@dimen/space_16"
        android:layout_marginEnd="@dimen/space_16"
        android:hint="@string/hint_username"
        android:inputType="text"
        app:layout_constraintTop_toTopOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintHorizontal_bias="0.5"
        app:layout_constraintVertical_bias="0.3" />

    <EditText
        android:id="@+id/etPassword"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:layout_marginTop="@dimen/space_16"
        android:layout_marginStart="@dimen/space_16"
        android:layout_marginEnd="@dimen/space_16"
        android:hint="@string/hint_password"
        android:inputType="textPassword"
        app:layout_constraintTop_toBottomOf="@id/etUsername"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintHorizontal_bias="0.5" />

    <EditText
        android:id="@+id/etEmail"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:layout_marginTop="@dimen/space_16"
        android:layout_marginStart="@dimen/space_16"
        android:layout_marginEnd="@dimen/space_16"
        android:hint="@string/hint_email"
        android:inputType="textEmailAddress"
        app:layout_constraintTop_toBottomOf="@id/etPassword"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintHorizontal_bias="0.5" />

    <Button
        android:id="@+id/btnSignup"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:layout_marginTop="@dimen/space_16"
        android:layout_marginStart="@dimen/space_16"
        android:layout_marginEnd="@dimen/space_16"
        android:text="@string/action_signup"
        app:layout_constraintTop_toBottomOf="@id/etEmail"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintHorizontal_bias="0.5" />

    <Button
        android:id="@+id/btnCancel"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:layout_marginTop="@dimen/space_16"
        android:layout_marginStart="@dimen/space_16"
        android:layout_marginEnd="@dimen/space_16"
        android:text="@string/action_cancel"
        app:layout_constraintTop_toBottomOf="@id/btnSignup"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintHorizontal_bias="0.5" />

</androidx.constraintlayout.widget.ConstraintLayout>
</file>

<file path="app/src/main/res/layout/fragment_child_book.xml">
<?xml version="1.0" encoding="utf-8"?>
<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    tools:context=".fragments.child.BookChildFragment">

    <androidx.recyclerview.widget.RecyclerView
        android:id="@+id/rvBookHorizontalView"
        android:layout_width="0dp"
        android:layout_height="0dp"
        app:layout_constraintTop_toTopOf="parent"
        app:layout_constraintBottom_toBottomOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent" />

    <ProgressBar
        android:id="@+id/progressBar"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:visibility="gone"
        app:layout_constraintTop_toTopOf="parent"
        app:layout_constraintBottom_toBottomOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent" />

</androidx.constraintlayout.widget.ConstraintLayout>
</file>

<file path="app/src/main/res/layout/fragment_child_movie.xml">
<?xml version="1.0" encoding="utf-8"?>
<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    tools:context=".fragments.child.MovieChildFragment">

    <androidx.recyclerview.widget.RecyclerView
        android:id="@+id/rvMovieHorizontalView"
        android:layout_width="0dp"
        android:layout_height="0dp"
        app:layout_constraintTop_toTopOf="parent"
        app:layout_constraintBottom_toBottomOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent" />

    <ProgressBar
        android:id="@+id/progressBar"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:visibility="gone"
        app:layout_constraintTop_toTopOf="parent"
        app:layout_constraintBottom_toBottomOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent" />

</androidx.constraintlayout.widget.ConstraintLayout>
</file>

<file path="app/src/main/res/layout/fragment_child_music.xml">
<?xml version="1.0" encoding="utf-8"?>
<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    tools:context=".fragments.child.MusicChildFragment">

    <androidx.recyclerview.widget.RecyclerView
        android:id="@+id/rvMusicHorizontalView"
        android:layout_width="0dp"
        android:layout_height="0dp"
        app:layout_constraintTop_toTopOf="parent"
        app:layout_constraintBottom_toBottomOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent" />

    <ProgressBar
        android:id="@+id/progressBar"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:visibility="gone"
        app:layout_constraintTop_toTopOf="parent"
        app:layout_constraintBottom_toBottomOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent" />

</androidx.constraintlayout.widget.ConstraintLayout>
</file>

<file path="app/src/main/res/layout/fragment_compose_parent.xml">
<?xml version="1.0" encoding="utf-8"?>
<androidx.constraintlayout.widget.ConstraintLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    android:layout_width="match_parent"
    android:layout_height="match_parent">

    <!-- Exposed Dropdown (replaces Spinner) -->
    <com.google.android.material.textfield.TextInputLayout
        android:id="@+id/tilCategory"
        style="@style/Widget.Fludde.TextField.Filled"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:layout_margin="@dimen/space_16"
        app:endIconMode="dropdown_menu"
        app:layout_constraintTop_toTopOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent">

        <com.google.android.material.textfield.MaterialAutoCompleteTextView
            android:id="@+id/actCategory"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:hint="@string/label_category"
            android:inputType="none"
            android:ellipsize="end"
            android:maxLines="1"/>
    </com.google.android.material.textfield.TextInputLayout>

    <FrameLayout
        android:id="@+id/child_fragment_container"
        android:layout_width="0dp"
        android:layout_height="0dp"
        android:layout_margin="@dimen/space_8"
        app:layout_constraintTop_toBottomOf="@id/tilCategory"
        app:layout_constraintBottom_toBottomOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent"/>
</androidx.constraintlayout.widget.ConstraintLayout>
</file>

<file path="app/src/main/res/layout/fragment_post.xml">
<?xml version="1.0" encoding="utf-8"?>
<androidx.constraintlayout.widget.ConstraintLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    android:layout_width="match_parent"
    android:layout_height="match_parent">

    <!-- Inline, non-blocking error with retry.
         IMPORTANT: Give the <include> its OWN id so the parent can find it. -->
    <include
        android:id="@+id/inlineError"
        layout="@layout/include_inline_error"
        app:layout_constraintTop_toTopOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent" />

    <androidx.recyclerview.widget.RecyclerView
        android:id="@+id/rvPost"
        android:layout_width="0dp"
        android:layout_height="0dp"
        android:clipToPadding="false"
        android:padding="1dp"
        app:layout_constraintTop_toBottomOf="@id/inlineError"
        app:layout_constraintBottom_toBottomOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent" />

    <!-- Shimmer skeleton overlay -->
    <com.facebook.shimmer.ShimmerFrameLayout
        android:id="@+id/shimmerContainer"
        android:visibility="gone"
        android:layout_width="0dp"
        android:layout_height="0dp"
        app:layout_constraintTop_toBottomOf="@id/inlineError"
        app:layout_constraintBottom_toBottomOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent">

        <LinearLayout
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:orientation="vertical">

            <include layout="@layout/item_post_skeleton"/>
            <include layout="@layout/item_post_skeleton"/>
            <include layout="@layout/item_post_skeleton"/>
        </LinearLayout>
    </com.facebook.shimmer.ShimmerFrameLayout>
</androidx.constraintlayout.widget.ConstraintLayout>
</file>

<file path="app/src/main/res/layout/fragment_search.xml">
<?xml version="1.0" encoding="utf-8"?>
<androidx.constraintlayout.widget.ConstraintLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    tools:context=".fragments.SearchFragment">

    <!-- Prominent search field -->
    <com.google.android.material.textfield.TextInputLayout
        android:id="@+id/tilSearch"
        style="@style/Widget.Fludde.TextField.Outlined"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:layout_marginStart="@dimen/space_16"
        android:layout_marginEnd="@dimen/space_8"
        android:layout_marginTop="@dimen/space_16"
        app:placeholderText="@string/hint_search_user"
        app:startIconDrawable="@drawable/ic_search_24"
        app:layout_constraintTop_toTopOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toStartOf="@id/btSearch">

        <com.google.android.material.textfield.TextInputEditText
            android:id="@+id/etSearchFieldUser"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:hint="@string/hint_search_user"
            android:imeOptions="actionSearch"
            android:inputType="textPersonName"
            android:maxLines="1"
            android:singleLine="true" />
    </com.google.android.material.textfield.TextInputLayout>

    <!-- Consistent primary action button -->
    <com.google.android.material.button.MaterialButton
        android:id="@+id/btSearch"
        style="@style/Widget.Fludde.Button.Primary"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_marginEnd="@dimen/space_16"
        android:layout_marginTop="@dimen/space_16"
        android:text="@string/action_search"
        android:contentDescription="@string/action_search"
        app:layout_constraintTop_toTopOf="parent"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintBottom_toBottomOf="@id/tilSearch" />

    <!-- Friendly empty state (shows when no results) -->
    <LinearLayout
        android:id="@+id/emptyState"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:orientation="vertical"
        android:gravity="center_horizontal"
        android:padding="@dimen/space_16"
        android:visibility="gone"
        app:layout_constraintTop_toBottomOf="@id/tilSearch"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent">

        <ImageView
            android:layout_width="@dimen/icon_size_lg"
            android:layout_height="@dimen/icon_size_lg"
            android:contentDescription="@string/empty_search_title"
            android:src="@drawable/ic_search_24"
            android:tint="?attr/colorOutline" />

        <TextView
            android:id="@+id/tvEmptyTitle"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:layout_marginTop="@dimen/space_8"
            android:text="@string/empty_search_title"
            android:textAppearance="@style/TextAppearance.Material3.TitleMedium" />

        <TextView
            android:id="@+id/tvEmptyMessage"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:layout_marginTop="@dimen/space_4"
            android:text="@string/empty_search_message"
            android:textAppearance="@style/TextAppearance.Material3.BodyMedium" />
    </LinearLayout>

    <!-- Results list: consistent thumbnail + title layout via users_query.xml -->
    <androidx.recyclerview.widget.RecyclerView
        android:id="@+id/rvUserQuery"
        android:layout_width="0dp"
        android:layout_height="0dp"
        android:layout_marginTop="@dimen/space_12"
        android:clipToPadding="false"
        android:padding="@dimen/space_8"
        app:layout_constraintTop_toBottomOf="@id/tilSearch"
        app:layout_constraintBottom_toBottomOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent"
        tools:listitem="@layout/users_query" />

</androidx.constraintlayout.widget.ConstraintLayout>
</file>

<file path="app/src/main/res/layout/music_content_post.xml">
<?xml version="1.0" encoding="utf-8"?>
<com.google.android.material.card.MaterialCardView
    xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:id="@+id/cvMusicPostLayout"
    android:layout_width="wrap_content"
    android:layout_height="wrap_content"
    android:layout_marginStart="@dimen/space_8"
    android:layout_marginTop="@dimen/space_8"
    android:layout_marginBottom="@dimen/space_8"
    android:clickable="true"
    android:focusable="true"
    android:checkable="true"
    app:cardUseCompatPadding="true"
    app:cardBackgroundColor="@color/card_bg_selector"
    app:strokeColor="@color/card_stroke_selector"
    app:strokeWidth="@dimen/divider_thin"
    app:rippleColor="@color/ripple_stateful">

    <androidx.constraintlayout.widget.ConstraintLayout
        android:id="@+id/ccMusicFrameLayout"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:padding="@dimen/space_8">

        <com.google.android.material.imageview.ShapeableImageView
            android:id="@+id/ivAlbumCoverImage"
            android:layout_width="@dimen/image_square_sm"
            android:layout_height="@dimen/image_square_sm"
            android:contentDescription="@string/cd_album_cover"
            android:scaleType="centerCrop"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintTop_toTopOf="parent"
            app:shapeAppearanceOverlay="@style/ShapeAppearance.Fludde.Medium"
            tools:srcCompat="@drawable/placeholder_square" />

        <TextView
            android:id="@+id/tvSongTitle"
            android:layout_width="@dimen/image_square_sm"
            android:layout_height="wrap_content"
            android:layout_marginTop="@dimen/space_4"
            android:ellipsize="end"
            android:maxLines="2"
            android:textAlignment="center"
            android:textAppearance="@style/TextAppearance.Material3.TitleSmall"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintTop_toBottomOf="@id/ivAlbumCoverImage"
            tools:text="Some Very Long Song Title That Truncates…" />

        <TextView
            android:id="@+id/tvArtistName"
            android:layout_width="@dimen/image_square_sm"
            android:layout_height="wrap_content"
            android:ellipsize="end"
            android:maxLines="1"
            android:textAlignment="center"
            android:textAppearance="@style/TextAppearance.Material3.LabelMedium"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintTop_toBottomOf="@id/tvSongTitle"
            tools:text="Artist" />
    </androidx.constraintlayout.widget.ConstraintLayout>
</com.google.android.material.card.MaterialCardView>
</file>

<file path="app/src/main/res/layout/user_profile.xml">
<?xml version="1.0" encoding="utf-8"?>
<androidx.constraintlayout.widget.ConstraintLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent">

    <com.google.android.material.imageview.ShapeableImageView
        android:id="@+id/ivProfilePic"
        android:layout_width="@dimen/avatar_xl"
        android:layout_height="@dimen/avatar_xl"
        android:contentDescription="@string/cd_profile_picture"
        app:shapeAppearanceOverlay="@style/ShapeAppearance.Fludde.Circular"
        app:layout_constraintTop_toTopOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent"
        android:layout_marginTop="@dimen/space_24"
        tools:srcCompat="@drawable/placeholder_avatar" />

    <TextView
        android:id="@+id/tvUserName"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:textAppearance="@style/TextAppearance.Material3.TitleMedium"
        app:layout_constraintTop_toBottomOf="@id/ivProfilePic"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent"
        android:layout_marginTop="@dimen/space_12"
        android:hint="@string/johndoe2016" />

    <TextView
        android:id="@+id/tvEmail"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:textAppearance="@style/TextAppearance.Material3.BodyMedium"
        app:layout_constraintTop_toBottomOf="@id/tvUserName"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent"
        android:layout_marginTop="@dimen/space_4"
        android:hint="@string/johndoe_youknow_com" />

    <ImageButton
        android:id="@+id/ibtnLogout"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:contentDescription="@string/action_logout"
        android:src="@drawable/ic_person_24"
        app:layout_constraintBottom_toBottomOf="parent"
        app:layout_constraintEnd_toEndOf="parent"
        android:layout_marginEnd="@dimen/space_16"
        android:layout_marginBottom="@dimen/space_16" />
</androidx.constraintlayout.widget.ConstraintLayout>
</file>

<file path="app/src/main/res/values/themes.xml">
<?xml version="1.0" encoding="utf-8"?>
<resources xmlns:tools="http://schemas.android.com/tools">

    <!-- Material 3 base theme (Views). Keep it simple so aapt can resolve everything. -->
    <style name="Theme.Fludde" parent="Theme.Material3.DayNight.NoActionBar">

        <!-- Primary brand colors (light fallback) -->
        <item name="colorPrimary">@color/md_theme_light_primary</item>
        <item name="colorOnPrimary">@color/md_theme_light_onPrimary</item>
        <item name="colorPrimaryContainer">@color/md_theme_light_primaryContainer</item>
        <item name="colorOnPrimaryContainer">@color/md_theme_light_onPrimaryContainer</item>

        <item name="colorSecondary">@color/md_theme_light_secondary</item>
        <item name="colorOnSecondary">@color/md_theme_light_onSecondary</item>
        <item name="colorSecondaryContainer">@color/md_theme_light_secondaryContainer</item>
        <item name="colorOnSecondaryContainer">@color/md_theme_light_onSecondaryContainer</item>

        <item name="colorTertiary">@color/md_theme_light_tertiary</item>
        <item name="colorOnTertiary">@color/md_theme_light_onTertiary</item>
        <item name="colorTertiaryContainer">@color/md_theme_light_tertiaryContainer</item>
        <item name="colorOnTertiaryContainer">@color/md_theme_light_onTertiaryContainer</item>

        <item name="colorError">@color/md_theme_light_error</item>
        <item name="colorOnError">@color/md_theme_light_onError</item>
        <item name="colorErrorContainer">@color/md_theme_light_errorContainer</item>
        <item name="colorOnErrorContainer">@color/md_theme_light_onErrorContainer</item>

        <item name="colorSurface">@color/md_theme_light_surface</item>
        <item name="colorOnSurface">@color/md_theme_light_onSurface</item>
        <item name="colorSurfaceVariant">@color/md_theme_light_surfaceVariant</item>
        <item name="colorOnSurfaceVariant">@color/md_theme_light_onSurfaceVariant</item>
        <item name="colorOutline">@color/md_theme_light_outline</item>

        <!-- ⛔ Removed problem attrs to stop AAPT errors:
             - colorBackground
             - colorInverseSurface / colorInverseOnSurface / colorInversePrimary / colorScrim
             - materialColorSurfaceContainer* tokens
             - navigationBarStyle
             - floatingActionButtonStyle
        -->

        <!-- Shapes -->
        <item name="shapeAppearanceSmallComponent">@style/ShapeAppearance.Fludde.Medium</item>
        <item name="shapeAppearanceMediumComponent">@style/ShapeAppearance.Fludde.Medium</item>
        <item name="shapeAppearanceLargeComponent">@style/ShapeAppearance.Fludde.Large</item>

        <!-- Default widget styles that are safe to set globally -->
        <item name="materialButtonStyle">@style/Widget.Material3.Button</item>
        <item name="chipStyle">@style/Widget.Material3.Chip.Assist</item>
        <item name="materialCardViewStyle">@style/Widget.Fludde.Card</item>
        <item name="textInputStyle">@style/Widget.Material3.TextInputLayout.FilledBox</item>

        <!-- Edge-to-edge system bars -->
        <item name="android:statusBarColor">@android:color/transparent</item>
        <item name="android:navigationBarColor">@android:color/transparent</item>
        <item name="android:navigationBarDividerColor">@android:color/transparent</item>
        <item name="android:windowLightStatusBar">true</item>
        <item name="android:windowLightNavigationBar">true</item>
        <item name="android:enforceStatusBarContrast">false</item>
        <item name="android:enforceNavigationBarContrast">false</item>
        <item name="android:windowLayoutInDisplayCutoutMode">shortEdges</item>
        <item name="android:windowDrawsSystemBarBackgrounds">true</item>
        <item name="android:windowIsTranslucent">false</item>
        <item name="android:colorControlHighlight">?attr/colorPrimary</item>
        <item name="android:forceDarkAllowed">false</item>
    </style>

</resources>
</file>

<file path="app/src/main/res/values-night/themes.xml">
<?xml version="1.0" encoding="utf-8"?>
<resources xmlns:tools="http://schemas.android.com/tools">

    <style name="Theme.Fludde" parent="Theme.Material3.DayNight.NoActionBar">

        <!-- Primary brand colors (dark fallback) -->
        <item name="colorPrimary">@color/md_theme_dark_primary</item>
        <item name="colorOnPrimary">@color/md_theme_dark_onPrimary</item>
        <item name="colorPrimaryContainer">@color/md_theme_dark_primaryContainer</item>
        <item name="colorOnPrimaryContainer">@color/md_theme_dark_onPrimaryContainer</item>

        <item name="colorSecondary">@color/md_theme_dark_secondary</item>
        <item name="colorOnSecondary">@color/md_theme_dark_onSecondary</item>
        <item name="colorSecondaryContainer">@color/md_theme_dark_secondaryContainer</item>
        <item name="colorOnSecondaryContainer">@color/md_theme_dark_onSecondaryContainer</item>

        <item name="colorTertiary">@color/md_theme_dark_tertiary</item>
        <item name="colorOnTertiary">@color/md_theme_dark_onTertiary</item>
        <item name="colorTertiaryContainer">@color/md_theme_dark_tertiaryContainer</item>
        <item name="colorOnTertiaryContainer">@color/md_theme_dark_onTertiaryContainer</item>

        <item name="colorError">@color/md_theme_dark_error</item>
        <item name="colorOnError">@color/md_theme_dark_onError</item>
        <item name="colorErrorContainer">@color/md_theme_dark_errorContainer</item>
        <item name="colorOnErrorContainer">@color/md_theme_dark_onErrorContainer</item>

        <item name="colorSurface">@color/md_theme_dark_surface</item>
        <item name="colorOnSurface">@color/md_theme_dark_onSurface</item>
        <item name="colorSurfaceVariant">@color/md_theme_dark_surfaceVariant</item>
        <item name="colorOnSurfaceVariant">@color/md_theme_dark_onSurfaceVariant</item>
        <item name="colorOutline">@color/md_theme_dark_outline</item>

        <!-- Same removals as light theme (see notes there). -->

        <!-- Shapes -->
        <item name="shapeAppearanceSmallComponent">@style/ShapeAppearance.Fludde.Medium</item>
        <item name="shapeAppearanceMediumComponent">@style/ShapeAppearance.Fludde.Medium</item>
        <item name="shapeAppearanceLargeComponent">@style/ShapeAppearance.Fludde.Large</item>

        <!-- Default widget styles -->
        <item name="materialButtonStyle">@style/Widget.Material3.Button</item>
        <item name="chipStyle">@style/Widget.Material3.Chip.Assist</item>
        <item name="materialCardViewStyle">@style/Widget.Fludde.Card</item>
        <item name="textInputStyle">@style/Widget.Material3.TextInputLayout.FilledBox</item>

        <!-- Edge-to-edge (light icons on dark bars) -->
        <item name="android:statusBarColor">@android:color/transparent</item>
        <item name="android:navigationBarColor">@android:color/transparent</item>
        <item name="android:navigationBarDividerColor">@android:color/transparent</item>
        <item name="android:windowLightStatusBar">false</item>
        <item name="android:windowLightNavigationBar">false</item>
        <item name="android:enforceStatusBarContrast">false</item>
        <item name="android:enforceNavigationBarContrast">false</item>
        <item name="android:windowLayoutInDisplayCutoutMode">shortEdges</item>
        <item name="android:windowDrawsSystemBarBackgrounds">true</item>
        <item name="android:windowIsTranslucent">false</item>
        <item name="android:colorControlHighlight">?attr/colorPrimary</item>
        <item name="android:forceDarkAllowed">false</item>
    </style>

</resources>
</file>

<file path="app/src/test/java/com/example/fludde/utils/ApiUtilsTest.java">
package com.example.fludde.utils;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.ArgumentCaptor;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.robolectric.RobolectricTestRunner;

import java.io.IOException;

import okhttp3.Call;
import okhttp3.Callback;
import okhttp3.OkHttpClient;
import okhttp3.Request;

import static org.junit.Assert.*;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;

/**
 * Unit tests for ApiUtils class.
 * Tests API key management, bearer token handling, and request building.
 */
@RunWith(RobolectricTestRunner.class)
public class ApiUtilsTest {

    @Mock
    private ApiUtils.Callback mockCallback;

    @Before
    public void setUp() {
        MockitoAnnotations.openMocks(this);
        // Clear any previously set keys/tokens
        ApiUtils.setApiKey(null);
        ApiUtils.setBearer(null);
    }

    @Test
    public void testSetApiKey_withValidKey() {
        // Given
        String apiKey = "test-api-key-12345";
        
        // When
        ApiUtils.setApiKey(apiKey);
        
        // Then - verify by making a request and checking URL contains api_key parameter
        // Note: This is an indirect test since apiKey is private
        // In a real scenario, you might make the field package-private for testing
        // or use reflection, but for now we verify behavior
        assertNotNull("API key should be settable", apiKey);
    }

    @Test
    public void testSetApiKey_withNullKey() {
        // Given
        String apiKey = null;
        
        // When
        ApiUtils.setApiKey(apiKey);
        
        // Then - should not throw exception
        // Verify by checking that subsequent operations don't fail
        assertNull("Null API key should be accepted", apiKey);
    }

    @Test
    public void testSetBearer_withValidToken() {
        // Given
        String bearerToken = "test-bearer-token-xyz";
        
        // When
        ApiUtils.setBearer(bearerToken);
        
        // Then - verify token is set (indirect test)
        assertNotNull("Bearer token should be settable", bearerToken);
    }

    @Test
    public void testSetBearer_withNullToken() {
        // Given
        String bearerToken = null;
        
        // When
        ApiUtils.setBearer(bearerToken);
        
        // Then - should not throw exception
        assertNull("Null bearer token should be accepted", bearerToken);
    }

    @Test
    public void testHandleFailure_withThrowable() {
        // Given
        int statusCode = 404;
        Throwable throwable = new Throwable("Not Found");
        
        // When
        ApiUtils.handleFailure(statusCode, throwable);
        
        // Then - verify no exception is thrown
        // In a real test, you might want to verify logging output
        assertTrue("handleFailure should process throwable without error", true);
    }

    @Test
    public void testHandleFailure_withNullThrowable() {
        // Given
        int statusCode = 500;
        Throwable throwable = null;
        
        // When
        ApiUtils.handleFailure(statusCode, throwable);
        
        // Then - verify no exception is thrown when throwable is null
        assertTrue("handleFailure should handle null throwable gracefully", true);
    }

    @Test
    public void testHandleFailure_withVariousStatusCodes() {
        // Test common HTTP status codes
        int[] statusCodes = {400, 401, 403, 404, 500, 502, 503};
        
        for (int statusCode : statusCodes) {
            // When
            ApiUtils.handleFailure(statusCode, new Exception("Test error"));
            
            // Then - should handle all status codes without throwing
            assertTrue("Should handle status code " + statusCode, true);
        }
    }

    @Test
    public void testGet_withEmptyUrl() {
        // Given
        String url = "";
        
        // When/Then - should handle empty URL gracefully
        ApiUtils.get(url, mockCallback);
        
        // Verify callback is eventually called (with error or success)
        // Note: This is asynchronous, so in a real test you'd use CountDownLatch
        // or a testing framework that handles async operations
        verify(mockCallback, timeout(5000).atLeastOnce()).onError(any(IOException.class));
    }

    @Test
    public void testGet_withNullCallback() {
        // Given
        String url = "https://api.example.com/test";
        
        // When/Then - should not throw exception with null callback
        try {
            ApiUtils.get(url, null);
            assertTrue("Should handle null callback without exception", true);
        } catch (Exception e) {
            fail("Should not throw exception with null callback");
        }
    }

    @Test
    public void testGet_withValidUrl() {
        // Given
        String url = "https://api.example.com/test";
        ApiUtils.setApiKey("test-key");
        
        // When
        ApiUtils.get(url, mockCallback);
        
        // Then - request should be made (callback will be invoked eventually)
        // In a real test with network mocking, you'd verify the request details
        assertNotNull("URL should not be null", url);
    }

    @Test
    public void testGet_withBearerToken() {
        // Given
        String url = "https://api.example.com/test";
        String bearerToken = "test-bearer-token";
        ApiUtils.setBearer(bearerToken);
        
        // When
        ApiUtils.get(url, mockCallback);
        
        // Then - bearer token should be used in Authorization header
        // In a real test, you'd mock OkHttpClient and verify header
        assertNotNull("Bearer token should be set", bearerToken);
    }

    @Test
    public void testGet_prefersBearer_overApiKey() {
        // Given
        String url = "https://api.example.com/test";
        ApiUtils.setApiKey("test-api-key");
        ApiUtils.setBearer("test-bearer-token");
        
        // When
        ApiUtils.get(url, mockCallback);
        
        // Then - should use bearer token instead of api_key parameter
        // In a real implementation, you'd verify the request doesn't have api_key param
        assertTrue("Should prefer bearer token over API key", true);
    }

    @Test
    public void testGet_fallsBackToApiKey_whenNoBearerToken() {
        // Given
        String url = "https://api.example.com/test";
        ApiUtils.setApiKey("test-api-key");
        ApiUtils.setBearer(null); // or empty string
        
        // When
        ApiUtils.get(url, mockCallback);
        
        // Then - should append api_key as query parameter
        assertTrue("Should fall back to API key when no bearer token", true);
    }

    @Test
    public void testCallback_onSuccess() {
        // Given
        ApiUtils.Callback callback = new ApiUtils.Callback() {
            @Override
            public void onSuccess(String body) {
                assertNotNull("Response body should not be null", body);
                assertTrue("Success callback should be called", true);
            }

            @Override
            public void onError(IOException e) {
                fail("Should not call error callback on success");
            }
        };
        
        // Test callback interface is properly defined
        assertNotNull("Callback interface should be defined", callback);
    }

    @Test
    public void testCallback_onError() {
        // Given
        ApiUtils.Callback callback = new ApiUtils.Callback() {
            @Override
            public void onSuccess(String body) {
                fail("Should not call success callback on error");
            }

            @Override
            public void onError(IOException e) {
                assertNotNull("Error should not be null", e);
                assertTrue("Error callback should be called", true);
            }
        };
        
        // Test callback interface is properly defined
        assertNotNull("Callback interface should be defined", callback);
    }
}
</file>

<file path="gradle/wrapper/gradle-wrapper.properties">
distributionBase=GRADLE_USER_HOME
distributionPath=wrapper/dists
distributionSha256Sum=d725d707bfabd4dfdc958c624003b3c80accc03f7037b5122c4b1d0ef15cecab
distributionUrl=https\://services.gradle.org/distributions/gradle-8.9-bin.zip
networkTimeout=10000
validateDistributionUrl=true
zipStoreBase=GRADLE_USER_HOME
zipStorePath=wrapper/dists
</file>

<file path="gradlew">
#!/bin/sh

#
# Copyright © 2015-2021 the original authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# SPDX-License-Identifier: Apache-2.0
#

##############################################################################
#
#   Gradle start up script for POSIX generated by Gradle.
#
#   Important for running:
#
#   (1) You need a POSIX-compliant shell to run this script. If your /bin/sh is
#       noncompliant, but you have some other compliant shell such as ksh or
#       bash, then to run this script, type that shell name before the whole
#       command line, like:
#
#           ksh Gradle
#
#       Busybox and similar reduced shells will NOT work, because this script
#       requires all of these POSIX shell features:
#         * functions;
#         * expansions «$var», «${var}», «${var:-default}», «${var+SET}»,
#           «${var#prefix}», «${var%suffix}», and «$( cmd )»;
#         * compound commands having a testable exit status, especially «case»;
#         * various built-in commands including «command», «set», and «ulimit».
#
#   Important for patching:
#
#   (2) This script targets any POSIX shell, so it avoids extensions provided
#       by Bash, Ksh, etc; in particular arrays are avoided.
#
#       The "traditional" practice of packing multiple parameters into a
#       space-separated string is a well documented source of bugs and security
#       problems, so this is (mostly) avoided, by progressively accumulating
#       options in "$@", and eventually passing that to Java.
#
#       Where the inherited environment variables (DEFAULT_JVM_OPTS, JAVA_OPTS,
#       and GRADLE_OPTS) rely on word-splitting, this is performed explicitly;
#       see the in-line comments for details.
#
#       There are tweaks for specific operating systems such as AIX, CygWin,
#       Darwin, MinGW, and NonStop.
#
#   (3) This script is generated from the Groovy template
#       https://github.com/gradle/gradle/blob/HEAD/platforms/jvm/plugins-application/src/main/resources/org/gradle/api/internal/plugins/unixStartScript.txt
#       within the Gradle project.
#
#       You can find Gradle at https://github.com/gradle/gradle/.
#
##############################################################################

# Attempt to set APP_HOME

# Resolve links: $0 may be a link
app_path=$0

# Need this for daisy-chained symlinks.
while
    APP_HOME=${app_path%"${app_path##*/}"}  # leaves a trailing /; empty if no leading path
    [ -h "$app_path" ]
do
    ls=$( ls -ld "$app_path" )
    link=${ls#*' -> '}
    case $link in             #(
      /*)   app_path=$link ;; #(
      *)    app_path=$APP_HOME$link ;;
    esac
done

# This is normally unused
# shellcheck disable=SC2034
APP_BASE_NAME=${0##*/}
# Discard cd standard output in case $CDPATH is set (https://github.com/gradle/gradle/issues/25036)
APP_HOME=$( cd -P "${APP_HOME:-./}" > /dev/null && printf '%s
' "$PWD" ) || exit

# Use the maximum available, or set MAX_FD != -1 to use that value.
MAX_FD=maximum

warn () {
    echo "$*"
} >&2

die () {
    echo
    echo "$*"
    echo
    exit 1
} >&2

# OS specific support (must be 'true' or 'false').
cygwin=false
msys=false
darwin=false
nonstop=false
case "$( uname )" in                #(
  CYGWIN* )         cygwin=true  ;; #(
  Darwin* )         darwin=true  ;; #(
  MSYS* | MINGW* )  msys=true    ;; #(
  NONSTOP* )        nonstop=true ;;
esac

CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar


# Determine the Java command to use to start the JVM.
if [ -n "$JAVA_HOME" ] ; then
    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
        # IBM's JDK on AIX uses strange locations for the executables
        JAVACMD=$JAVA_HOME/jre/sh/java
    else
        JAVACMD=$JAVA_HOME/bin/java
    fi
    if [ ! -x "$JAVACMD" ] ; then
        die "ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME

Please set the JAVA_HOME variable in your environment to match the
location of your Java installation."
    fi
else
    JAVACMD=java
    if ! command -v java >/dev/null 2>&1
    then
        die "ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.

Please set the JAVA_HOME variable in your environment to match the
location of your Java installation."
    fi
fi

# Increase the maximum file descriptors if we can.
if ! "$cygwin" && ! "$darwin" && ! "$nonstop" ; then
    case $MAX_FD in #(
      max*)
        # In POSIX sh, ulimit -H is undefined. That's why the result is checked to see if it worked.
        # shellcheck disable=SC2039,SC3045
        MAX_FD=$( ulimit -H -n ) ||
            warn "Could not query maximum file descriptor limit"
    esac
    case $MAX_FD in  #(
      '' | soft) :;; #(
      *)
        # In POSIX sh, ulimit -n is undefined. That's why the result is checked to see if it worked.
        # shellcheck disable=SC2039,SC3045
        ulimit -n "$MAX_FD" ||
            warn "Could not set maximum file descriptor limit to $MAX_FD"
    esac
fi

# Collect all arguments for the java command, stacking in reverse order:
#   * args from the command line
#   * the main class name
#   * -classpath
#   * -D...appname settings
#   * --module-path (only if needed)
#   * DEFAULT_JVM_OPTS, JAVA_OPTS, and GRADLE_OPTS environment variables.

# For Cygwin or MSYS, switch paths to Windows format before running java
if "$cygwin" || "$msys" ; then
    APP_HOME=$( cygpath --path --mixed "$APP_HOME" )
    CLASSPATH=$( cygpath --path --mixed "$CLASSPATH" )

    JAVACMD=$( cygpath --unix "$JAVACMD" )

    # Now convert the arguments - kludge to limit ourselves to /bin/sh
    for arg do
        if
            case $arg in                                #(
              -*)   false ;;                            # don't mess with options #(
              /?*)  t=${arg#/} t=/${t%%/*}              # looks like a POSIX filepath
                    [ -e "$t" ] ;;                      #(
              *)    false ;;
            esac
        then
            arg=$( cygpath --path --ignore --mixed "$arg" )
        fi
        # Roll the args list around exactly as many times as the number of
        # args, so each arg winds up back in the position where it started, but
        # possibly modified.
        #
        # NB: a `for` loop captures its iteration list before it begins, so
        # changing the positional parameters here affects neither the number of
        # iterations, nor the values presented in `arg`.
        shift                   # remove old arg
        set -- "$@" "$arg"      # push replacement arg
    done
fi


# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
DEFAULT_JVM_OPTS='"-Xmx64m" "-Xms64m"'

# Collect all arguments for the java command:
#   * DEFAULT_JVM_OPTS, JAVA_OPTS, JAVA_OPTS, and optsEnvironmentVar are not allowed to contain shell fragments,
#     and any embedded shellness will be escaped.
#   * For example: A user cannot expect ${Hostname} to be expanded, as it is an environment variable and will be
#     treated as '${Hostname}' itself on the command line.

set -- \
        "-Dorg.gradle.appname=$APP_BASE_NAME" \
        -classpath "$CLASSPATH" \
        org.gradle.wrapper.GradleWrapperMain \
        "$@"

# Stop when "xargs" is not available.
if ! command -v xargs >/dev/null 2>&1
then
    die "xargs is not available"
fi

# Use "xargs" to parse quoted args.
#
# With -n1 it outputs one arg per line, with the quotes and backslashes removed.
#
# In Bash we could simply go:
#
#   readarray ARGS < <( xargs -n1 <<<"$var" ) &&
#   set -- "${ARGS[@]}" "$@"
#
# but POSIX shell has neither arrays nor command substitution, so instead we
# post-process each arg (as a line of input to sed) to backslash-escape any
# character that might be a shell metacharacter, then use eval to reverse
# that process (while maintaining the separation between arguments), and wrap
# the whole thing up as a single "set" statement.
#
# This will of course break if any of these variables contains a newline or
# an unmatched quote.
#

eval "set -- $(
        printf '%s\n' "$DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS" |
        xargs -n1 |
        sed ' s~[^-[:alnum:]+,./:=@_]~\\&~g; ' |
        tr '\n' ' '
    )" '"$@"'

exec "$JAVACMD" "$@"
</file>

<file path="gradlew.bat">
@rem
@rem Copyright 2015 the original author or authors.
@rem
@rem Licensed under the Apache License, Version 2.0 (the "License");
@rem you may not use this file except in compliance with the License.
@rem You may obtain a copy of the License at
@rem
@rem      https://www.apache.org/licenses/LICENSE-2.0
@rem
@rem Unless required by applicable law or agreed to in writing, software
@rem distributed under the License is distributed on an "AS IS" BASIS,
@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@rem See the License for the specific language governing permissions and
@rem limitations under the License.
@rem
@rem SPDX-License-Identifier: Apache-2.0
@rem

@if "%DEBUG%"=="" @echo off
@rem ##########################################################################
@rem
@rem  Gradle startup script for Windows
@rem
@rem ##########################################################################

@rem Set local scope for the variables with windows NT shell
if "%OS%"=="Windows_NT" setlocal

set DIRNAME=%~dp0
if "%DIRNAME%"=="" set DIRNAME=.
@rem This is normally unused
set APP_BASE_NAME=%~n0
set APP_HOME=%DIRNAME%

@rem Resolve any "." and ".." in APP_HOME to make it shorter.
for %%i in ("%APP_HOME%") do set APP_HOME=%%~fi

@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
set DEFAULT_JVM_OPTS="-Xmx64m" "-Xms64m"

@rem Find java.exe
if defined JAVA_HOME goto findJavaFromJavaHome

set JAVA_EXE=java.exe
%JAVA_EXE% -version >NUL 2>&1
if %ERRORLEVEL% equ 0 goto execute

echo. 1>&2
echo ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH. 1>&2
echo. 1>&2
echo Please set the JAVA_HOME variable in your environment to match the 1>&2
echo location of your Java installation. 1>&2

goto fail

:findJavaFromJavaHome
set JAVA_HOME=%JAVA_HOME:"=%
set JAVA_EXE=%JAVA_HOME%/bin/java.exe

if exist "%JAVA_EXE%" goto execute

echo. 1>&2
echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME% 1>&2
echo. 1>&2
echo Please set the JAVA_HOME variable in your environment to match the 1>&2
echo location of your Java installation. 1>&2

goto fail

:execute
@rem Setup the command line

set CLASSPATH=%APP_HOME%\gradle\wrapper\gradle-wrapper.jar


@rem Execute Gradle
"%JAVA_EXE%" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% "-Dorg.gradle.appname=%APP_BASE_NAME%" -classpath "%CLASSPATH%" org.gradle.wrapper.GradleWrapperMain %*

:end
@rem End local scope for the variables with windows NT shell
if %ERRORLEVEL% equ 0 goto mainEnd

:fail
rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of
rem the _cmd.exe /c_ return code!
set EXIT_CODE=%ERRORLEVEL%
if %EXIT_CODE% equ 0 set EXIT_CODE=1
if not ""=="%GRADLE_EXIT_CONSOLE%" exit %EXIT_CODE%
exit /b %EXIT_CODE%

:mainEnd
if "%OS%"=="Windows_NT" endlocal

:omega
</file>

<file path="app/src/main/java/com/example/fludde/fragments/SearchFragment.java">
package com.example.fludde.fragments;

import android.content.Context;
import android.os.Bundle;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.fragment.app.Fragment;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;

import android.text.TextUtils;
import android.util.Log;
import android.view.KeyEvent;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.view.inputmethod.EditorInfo;
import android.view.inputmethod.InputMethodManager;
import android.widget.Button;
import android.widget.Toast;

import com.example.fludde.BuildConfig;
import com.example.fludde.R;
import com.example.fludde.adapters.SearchFragmentAdapter;
import com.example.fludde.model.UserUi;
import com.example.fludde.utils.MockData;
import com.google.android.material.textfield.TextInputEditText;
import com.parse.ParseQuery;
import com.parse.ParseUser;

import java.util.ArrayList;
import java.util.List;

public class SearchFragment extends Fragment {

    private static final String TAG = "SearchFragment";

    private RecyclerView rvUserQuery;
    private SearchFragmentAdapter searchFragmentAdapter;
    private final List<UserUi> allUsers = new ArrayList<>();

    private TextInputEditText etSearchFieldUser;
    private Button btSearch;

    private View emptyState;

    public SearchFragment() { }

    public static SearchFragment newInstance(String param1, String param2) {
        SearchFragment fragment = new SearchFragment();
        Bundle args = new Bundle();
        args.putString("param1", param1);
        args.putString("param2", param2);
        fragment.setArguments(args);
        return fragment;
    }

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
                             Bundle savedInstanceState) {
        return inflater.inflate(R.layout.fragment_search, container, false);
    }

    @Override
    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {
        super.onViewCreated(view, savedInstanceState);

        rvUserQuery = view.findViewById(R.id.rvUserQuery);
        etSearchFieldUser = view.findViewById(R.id.etSearchFieldUser);
        btSearch = view.findViewById(R.id.btSearch);
        emptyState = view.findViewById(R.id.emptyState);

        searchFragmentAdapter = new SearchFragmentAdapter(requireContext(), allUsers);
        rvUserQuery.setAdapter(searchFragmentAdapter);
        rvUserQuery.setLayoutManager(new LinearLayoutManager(getContext()));

        btSearch.setOnClickListener(v -> performSearch(getQueryText()));

        etSearchFieldUser.setOnEditorActionListener((tv, actionId, event) -> {
            boolean handled = false;
            if (actionId == EditorInfo.IME_ACTION_SEARCH) {
                performSearch(getQueryText());
                handled = true;
            } else if (event != null
                    && event.getKeyCode() == KeyEvent.KEYCODE_ENTER
                    && event.getAction() == KeyEvent.ACTION_DOWN) {
                performSearch(getQueryText());
                handled = true;
            }
            return handled;
        });

        showEmptyState(true);
    }

    private String getQueryText() {
        String q = etSearchFieldUser.getText() != null ?
                   etSearchFieldUser.getText().toString().trim() : "";
        return q;
    }

    private void performSearch(String userName) {
        hideKeyboard();
        if (TextUtils.isEmpty(userName)) {
            Toast.makeText(getContext(), getString(R.string.hint_search_user), Toast.LENGTH_SHORT).show();
            allUsers.clear();
            searchFragmentAdapter.notifyDataSetChanged();
            showEmptyState(true);
            return;
        }
        lookForUser(userName);
    }

    private void showEmptyState(boolean show) {
        if (emptyState != null) emptyState.setVisibility(show ? View.VISIBLE : View.GONE);
    }

    private void hideKeyboard() {
        try {
            InputMethodManager imm = (InputMethodManager) requireContext().getSystemService(Context.INPUT_METHOD_SERVICE);
            View v = requireActivity().getCurrentFocus();
            if (imm != null && v != null) {
                imm.hideSoftInputFromWindow(v.getWindowToken(), 0);
            }
        } catch (Exception ignore) { }
    }

    private void lookForUser(String userName) {
        if (BuildConfig.MOCK_MODE) {
            allUsers.clear();
            // FIXED: MockData.mockUsers() takes no parameters
            List<UserUi> mockUsers = MockData.mockUsers();
            // Filter by username if a search term was provided
            if (userName != null && !userName.isEmpty()) {
                for (UserUi user : mockUsers) {
                    if (user.getUsername().toLowerCase().contains(userName.toLowerCase())) {
                        allUsers.add(user);
                    }
                }
            } else {
                allUsers.addAll(mockUsers);
            }
            searchFragmentAdapter.notifyDataSetChanged();
            showEmptyState(allUsers.isEmpty());
            return;
        }

        ParseQuery<ParseUser> query = ParseUser.getQuery();
        query.whereContains("username", userName);
        query.setLimit(50);

        query.findInBackground((users, e) -> {
            if (e != null) {
                Log.e(TAG, "Search failed", e);
                Toast.makeText(getContext(), getString(R.string.error_search), Toast.LENGTH_SHORT).show();
                allUsers.clear();
                searchFragmentAdapter.notifyDataSetChanged();
                showEmptyState(true);
                return;
            }

            allUsers.clear();
            if (users != null) {
                for (ParseUser pu : users) {
                    String username = pu.getUsername() != null ? pu.getUsername() : "";
                    String imageUrl = "";
                    try {
                        if (pu.getParseFile("image") != null && pu.getParseFile("image").getUrl() != null) {
                            imageUrl = pu.getParseFile("image").getUrl();
                        }
                    } catch (Exception ignore) {}
                    allUsers.add(new UserUi(username, imageUrl));
                }
            }
            searchFragmentAdapter.notifyDataSetChanged();
            showEmptyState(allUsers.isEmpty());
        });
    }
}
</file>

<file path="app/src/main/java/com/example/fludde/utils/ApiUtils.java">
package com.example.fludde.utils;

import android.net.Uri;
import android.util.Log;
import androidx.annotation.Nullable;

import com.example.fludde.BuildConfig;

import java.io.IOException;

import okhttp3.Call;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;

public final class ApiUtils {

    private static final String TAG = "ApiUtils";

    public interface Callback {
        void onSuccess(String body);
        void onError(IOException e);
    }

    private static final OkHttpClient client = new OkHttpClient();

    private static @Nullable String apiKey = null;       // v3
    private static @Nullable String bearerToken = null;   // v4

    private ApiUtils() { }

    /** Prefer v4 bearer token; pass null to clear. */
    public static void setBearer(@Nullable String token) {
        bearerToken = token;
    }

    /** Legacy v3 api_key; pass null to clear. */
    public static void setApiKey(@Nullable String key) {
        apiKey = key;
    }

    /**
     * Handle API request failures by logging the status code and error details.
     * This method is called from various fragments when API requests fail.
     *
     * @param statusCode HTTP status code from the failed request
     * @param throwable The exception/error that occurred
     */
    public static void handleFailure(int statusCode, Throwable throwable) {
        if (throwable != null) {
            Log.e(TAG, "API request failed with status code: " + statusCode, throwable);
            Log.e(TAG, "Error message: " + throwable.getMessage());
        } else {
            Log.e(TAG, "API request failed with status code: " + statusCode + " (no throwable provided)");
        }
    }

    public static void get(String url, final Callback cb) {
        // ===== NEW: Mock mode check - return mock data without hitting network =====
        if (BuildConfig.MOCK_MODE) {
            handleMockRequest(url, cb);
            return;
        }
        // ===== END MOCK MODE CHECK =====
        
        // ===== EXISTING: Real API call (unchanged) =====
        try {
            Request.Builder rb = new Request.Builder();

            // If no bearer, append v3 api_key as query parameter (legacy fallback).
            if (bearerToken == null || bearerToken.isEmpty()) {
                if (apiKey != null && !apiKey.isEmpty()) {
                    Uri uri = Uri.parse(url).buildUpon()
                            .appendQueryParameter("api_key", apiKey)
                            .build();
                    url = uri.toString();
                }
            }

            rb.url(url);

            // If bearer available, use Authorization header (preferred).
            if (bearerToken != null && !bearerToken.isEmpty()) {
                rb.addHeader("Authorization", "Bearer " + bearerToken);
            }

            Request request = rb.build();

            client.newCall(request).enqueue(new okhttp3.Callback() {
                @Override public void onFailure(Call call, IOException e) {
                    if (cb != null) cb.onError(e);
                }

                @Override public void onResponse(Call call, Response response) throws IOException {
                    try (Response res = response) {
                        if (!res.isSuccessful()) {
                            if (cb != null) cb.onError(new IOException("HTTP " + res.code() + " " + res.message()));
                            return;
                        }
                        String body = res.body() != null ? res.body().string() : "";
                        if (cb != null) cb.onSuccess(body);
                    }
                }
            });

        } catch (Exception e) {
            if (cb != null) cb.onError(new IOException("Request build error", e));
        }
    }

    // ===== NEW METHOD: Handle mock requests =====
    /**
     * Handle mock requests by routing to appropriate mock data based on URL.
     * Simulates network delay for realistic behavior.
     * 
     * @param url The requested URL
     * @param cb Callback to return mock data
     */
    private static void handleMockRequest(String url, final Callback cb) {
        // Simulate network delay (100-500ms)
        new android.os.Handler(android.os.Looper.getMainLooper()).postDelayed(() -> {
            try {
                String mockResponse = null;
                
                // Route based on URL to appropriate mock data
                if (url.contains("themoviedb.org")) {
                    mockResponse = MockData.tmdbTrendingJson().toString();
                    Log.d(TAG, "Mock: Returning TMDB data");
                } else if (url.contains("itunes.apple.com")) {
                    mockResponse = MockData.itunesSearchJson().toString();
                    Log.d(TAG, "Mock: Returning iTunes data");
                } else if (url.contains("googleapis.com/books")) {
                    mockResponse = MockData.googleBooksJson().toString();
                    Log.d(TAG, "Mock: Returning Google Books data");
                }
                
                if (mockResponse != null && cb != null) {
                    cb.onSuccess(mockResponse);
                } else {
                    if (cb != null) {
                        cb.onError(new IOException("Mock: Unknown endpoint - " + url));
                    }
                }
            } catch (Exception e) {
                Log.e(TAG, "Mock error", e);
                if (cb != null) {
                    cb.onError(new IOException("Mock error", e));
                }
            }
        }, 100 + (long)(Math.random() * 400)); // Random delay between 100-500ms
    }
    // ===== END NEW METHOD =====
}
</file>

<file path="app/src/main/java/com/example/fludde/LoginActivity.java">
package com.example.fludde;

import android.content.Intent;
import android.os.Bundle;
import android.util.Log;
import android.widget.Button;
import android.widget.EditText;

import androidx.appcompat.app.AppCompatActivity;

import com.example.fludde.utils.ErrorHandler;
import com.example.fludde.utils.MockData;
import com.example.fludde.utils.MockSessionManager;
import com.parse.LogInCallback;
import com.parse.ParseException;
import com.parse.ParseUser;

/**
 * Login Activity with full Parse authentication and session management.
 * Updated to support Mock Mode authentication.
 * 
 * Changes:
 * - All hardcoded strings moved to strings.xml
 * - All Toast.makeText() replaced with ErrorHandler methods
 * - Consistent error handling
 * - Improved logging with proper tags
 * - Added mock mode authentication support
 * - Added session check on startup
 * 
 * Mock Credentials (when MOCK_MODE is true):
 * - Username: demo, Password: demo123
 * - Username: testuser, Password: test123
 * - Username: alice, Password: alice123
 */
public class LoginActivity extends AppCompatActivity {

    private static final String TAG = "LoginActivity";

    private EditText etUsername;
    private EditText etPassword;
    private Button btnLogin;
    private Button btnSignup;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        
        // 🔒 SESSION CHECK: If user is already logged in, skip login screen
        if (isUserLoggedIn()) {
            Log.d(TAG, "User already logged in, navigating to MainActivity");
            navigateToMain();
            return;
        }
        
        setContentView(R.layout.activity_login);

        // Initialize views
        etUsername = findViewById(R.id.etUsername);
        etPassword = findViewById(R.id.etPassword);
        btnLogin = findViewById(R.id.btnLogin);
        btnSignup = findViewById(R.id.btnSignup);

        // Set up button click listeners
        btnLogin.setOnClickListener(v -> performLogin());
        btnSignup.setOnClickListener(v -> {
            Intent intent = new Intent(LoginActivity.this, SignupActivity.class);
            startActivity(intent);
        });
    }

    /**
     * 🔒 Check if user is already logged in.
     * Handles both mock mode and real Parse authentication.
     * 
     * @return true if user is logged in, false otherwise
     */
    private boolean isUserLoggedIn() {
        if (BuildConfig.MOCK_MODE) {
            // Check mock session
            boolean isLoggedIn = MockSessionManager.isLoggedIn(this);
            if (isLoggedIn) {
                Log.d(TAG, "Mock session found for user: " + MockSessionManager.getCurrentUsername(this));
            }
            return isLoggedIn;
        } else {
            // Check Parse session
            ParseUser currentUser = ParseUser.getCurrentUser();
            if (currentUser != null) {
                Log.d(TAG, "Parse session found for user: " + currentUser.getUsername());
                return true;
            }
            return false;
        }
    }

    /**
     * Performs login authentication.
     * Routes to mock authentication if MOCK_MODE is enabled,
     * otherwise uses real Parse authentication.
     */
    private void performLogin() {
        try {
            String username = etUsername.getText().toString().trim();
            String password = etPassword.getText().toString().trim();

            // Validation
            if (username.isEmpty() || password.isEmpty()) {
                ErrorHandler.showValidationError(this, R.string.error_login_empty_fields);
                ErrorHandler.logWarning(TAG, "Login attempt with empty fields");
                return;
            }

            // Route to appropriate authentication method
            if (BuildConfig.MOCK_MODE) {
                performMockLogin(username, password);
            } else {
                performParseLogin(username, password);
            }
            
        } catch (Exception e) {
            ErrorHandler.showAuthError(this, R.string.error_login_generic);
            ErrorHandler.logError(TAG, "Error during login attempt", e);
        }
    }

    /**
     * 🆕 REAL PARSE LOGIN IMPLEMENTATION
     * Authenticates user with Parse backend.
     * 
     * @param username The username to authenticate
     * @param password The password to authenticate
     */
    private void performParseLogin(String username, String password) {
        Log.d(TAG, "Attempting Parse login for user: " + username);
        
        ParseUser.logInInBackground(username, password, new LogInCallback() {
            @Override
            public void done(ParseUser user, ParseException e) {
                if (e == null && user != null) {
                    // Login successful
                    Log.d(TAG, "Parse login successful for user: " + user.getUsername());
                    ErrorHandler.showToast(LoginActivity.this, "Welcome back, " + user.getUsername() + "!");
                    navigateToMain();
                } else {
                    // Login failed
                    Log.e(TAG, "Parse login failed", e);
                    
                    if (e != null) {
                        // Handle specific Parse errors
                        if (e.getCode() == ParseException.OBJECT_NOT_FOUND) {
                            ErrorHandler.showAuthError(LoginActivity.this, "Invalid username or password");
                        } else if (e.getCode() == ParseException.CONNECTION_FAILED) {
                            ErrorHandler.showNetworkError(LoginActivity.this, R.string.error_network);
                        } else {
                            ErrorHandler.showAuthError(LoginActivity.this, R.string.error_login_failed);
                        }
                    } else {
                        ErrorHandler.showAuthError(LoginActivity.this, R.string.error_login_failed);
                    }
                }
            }
        });
    }

    /**
     * Mock authentication handler.
     * Validates credentials against mock users and saves session.
     * 
     * @param username The username to authenticate
     * @param password The password to authenticate
     */
    private void performMockLogin(String username, String password) {
        Log.d(TAG, "Attempting mock login for user: " + username);
        
        // Simulate network delay for realistic behavior
        new android.os.Handler().postDelayed(() -> {
            if (MockData.isValidLogin(username, password)) {
                // Save mock session
                MockSessionManager.login(this, username);
                Log.d(TAG, "Mock login successful: " + username);
                ErrorHandler.showToast(this, "Welcome back, " + username + "!");
                navigateToMain();
            } else {
                ErrorHandler.showAuthError(this, R.string.error_login_failed);
                Log.e(TAG, "Mock login failed for user: " + username);
            }
        }, 500); // 500ms simulated delay
    }

    /**
     * Navigates to the main activity after successful login.
     * Clears the back stack so user cannot return to login screen.
     */
    private void navigateToMain() {
        Intent intent = new Intent(this, MainActivity.class);
        intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK);
        startActivity(intent);
        finish();
    }
}
</file>

<file path="app/src/main/res/layout/content_post_img.xml">
<?xml version="1.0" encoding="utf-8"?>
<com.google.android.material.card.MaterialCardView
    xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:id="@+id/cvContentPostLayout"
    android:layout_width="wrap_content"
    android:layout_height="wrap_content"
    android:layout_marginStart="@dimen/space_8"
    android:layout_marginTop="@dimen/space_8"
    android:layout_marginBottom="@dimen/space_8"
    android:clickable="true"
    android:focusable="true"
    android:checkable="true"
    app:cardUseCompatPadding="true"
    app:cardBackgroundColor="@color/card_bg_selector"
    app:strokeColor="@color/card_stroke_selector"
    app:strokeWidth="@dimen/divider_thin"
    app:rippleColor="@color/ripple_stateful">

    <androidx.constraintlayout.widget.ConstraintLayout
        android:id="@+id/ccContentFrameLayout"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:padding="@dimen/space_8">

        <com.google.android.material.imageview.ShapeableImageView
            android:id="@+id/ivContentImage"
            android:layout_width="@dimen/poster_md_w"
            android:layout_height="@dimen/poster_md_h"
            android:contentDescription="@string/cd_content_image"
            android:scaleType="centerCrop"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintTop_toTopOf="parent"
            app:shapeAppearanceOverlay="@style/ShapeAppearance.Fludde.Medium"
            tools:srcCompat="@drawable/placeholder_poster" />

        <TextView
            android:id="@+id/tvImageContentTitle"
            android:layout_width="@dimen/poster_md_w"
            android:layout_height="wrap_content"
            android:layout_marginTop="@dimen/space_4"
            android:textAlignment="center"
            android:maxLines="2"
            android:ellipsize="end"
            android:textAppearance="@style/TextAppearance.Material3.LabelMedium"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintTop_toBottomOf="@id/ivContentImage"
            tools:text="Bad Boys II" />
    </androidx.constraintlayout.widget.ConstraintLayout>
</com.google.android.material.card.MaterialCardView>
</file>

<file path="app/src/main/res/layout/fragment_home.xml">
<?xml version="1.0" encoding="utf-8"?>
<androidx.constraintlayout.widget.ConstraintLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    android:id="@+id/home_root"
    android:layout_width="match_parent"
    android:layout_height="match_parent">

    <!-- Your feed list -->
    <androidx.recyclerview.widget.RecyclerView
        android:id="@+id/rvHomeFeed"
        android:layout_width="0dp"
        android:layout_height="0dp"
        android:clipToPadding="false"
        android:paddingStart="16dp"
        android:paddingEnd="16dp"
        app:layoutManager="androidx.recyclerview.widget.LinearLayoutManager"
        app:layout_constraintTop_toTopOf="parent"
        app:layout_constraintBottom_toTopOf="@+id/inlineError"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent"/>

    <!-- Simple progress indicator (optional; keep if your code uses it) -->
    <ProgressBar
        android:id="@+id/progress"
        style="?android:attr/progressBarStyleLarge"
        android:layout_width="48dp"
        android:layout_height="48dp"
        android:visibility="gone"
        app:layout_constraintTop_toTopOf="parent"
        app:layout_constraintBottom_toBottomOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent"/>

    <!-- Inline error card expected by HomeFragment.showError(...) -->
    <LinearLayout
        android:id="@+id/inlineError"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:orientation="vertical"
        android:padding="16dp"
        android:background="?attr/colorErrorContainer"
        android:visibility="gone"
        app:layout_constraintTop_toBottomOf="@+id/rvHomeFeed"
        app:layout_constraintBottom_toBottomOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent">

        <TextView
            android:id="@+id/tvErrorMessage"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:text="@string/generic_error_message"
            android:textAppearance="?attr/textAppearanceBodyLarge"
            android:paddingBottom="8dp"/>

        <Button
            android:id="@+id/btnRetry"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="@string/retry"/>
    </LinearLayout>

</androidx.constraintlayout.widget.ConstraintLayout>
</file>

<file path="app/src/main/res/layout/fragment_profile.xml">
<?xml version="1.0" encoding="utf-8"?>
<androidx.constraintlayout.widget.ConstraintLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    tools:context=".fragments.ProfileFragment">

    <!-- ───────────── Profile header (large top area) ───────────── -->
    <LinearLayout
        android:id="@+id/profileHeader"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:orientation="vertical"
        android:gravity="center_horizontal"
        android:padding="@dimen/space_24"
        app:layout_constraintTop_toTopOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent">

        <com.google.android.material.imageview.ShapeableImageView
            android:id="@+id/ivAvatar"
            android:layout_width="@dimen/avatar_xl"
            android:layout_height="@dimen/avatar_xl"
            android:contentDescription="@string/cd_profile_picture"
            app:shapeAppearanceOverlay="@style/ShapeAppearance.Fludde.Circular"
            tools:srcCompat="@drawable/placeholder_avatar" />

        <TextView
            android:id="@+id/tvUsername"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:layout_marginTop="@dimen/space_12"
            android:textAppearance="@style/TextAppearance.Material3.HeadlineSmall"
            tools:text="johndoe2016" />

        <TextView
            android:id="@+id/tvEmail"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:layout_marginTop="@dimen/space_4"
            android:textAppearance="@style/TextAppearance.Material3.BodyMedium"
            android:textColor="?attr/colorOnSurfaceVariant"
            tools:text="johndoe@youknow.com" />
    </LinearLayout>

    <!-- ───────────── Secondary actions: Edit / Logout ───────────── -->
    <LinearLayout
        android:id="@+id/headerActions"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:orientation="horizontal"
        android:gravity="center"
        android:paddingStart="@dimen/space_16"
        android:paddingEnd="@dimen/space_16"
        app:layout_constraintTop_toBottomOf="@id/profileHeader"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent">

        <com.google.android.material.button.MaterialButton
            android:id="@+id/btnEditProfile"
            style="@style/Widget.Fludde.Button.Tonal"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_marginEnd="@dimen/space_8"
            android:layout_weight="1"
            android:text="@string/action_edit_profile" />

        <com.google.android.material.button.MaterialButton
            android:id="@+id/btnLogout"
            style="@style/Widget.Fludde.Button.Outlined"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_marginStart="@dimen/space_8"
            android:layout_weight="1"
            android:text="@string/action_logout"
            android:contentDescription="@string/action_logout" />
    </LinearLayout>

    <!-- ───────────── Empty state (visible by default, until posts wired) ───────────── -->
    <LinearLayout
        android:id="@+id/emptyState"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:orientation="vertical"
        android:gravity="center_horizontal"
        android:padding="@dimen/space_24"
        app:layout_constraintTop_toBottomOf="@id/headerActions"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent">

        <ImageView
            android:layout_width="@dimen/icon_size_lg"
            android:layout_height="@dimen/icon_size_lg"
            android:contentDescription="@string/empty_profile_title"
            android:src="@drawable/ic_add_comment_24"
            android:tint="?attr/colorOutline" />

        <TextView
            android:id="@+id/tvEmptyTitle"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:layout_marginTop="@dimen/space_8"
            android:text="@string/empty_profile_title"
            android:textAppearance="@style/TextAppearance.Material3.TitleMedium" />

        <TextView
            android:id="@+id/tvEmptyMessage"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:layout_marginTop="@dimen/space_4"
            android:text="@string/empty_profile_message"
            android:textAppearance="@style/TextAppearance.Material3.BodyMedium" />

        <com.google.android.material.button.MaterialButton
            android:id="@+id/btnCreateFirstPost"
            style="@style/Widget.Fludde.Button.Primary"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:layout_marginTop="@dimen/space_16"
            android:text="@string/nav_compose" />
    </LinearLayout>

    <!-- Posts list placeholder (hidden) -->
    <androidx.recyclerview.widget.RecyclerView
        android:id="@+id/rvProfilePosts"
        android:layout_width="0dp"
        android:layout_height="0dp"
        android:visibility="gone"
        android:clipToPadding="false"
        android:paddingStart="@dimen/space_8"
        android:paddingEnd="@dimen/space_8"
        app:layout_constraintTop_toBottomOf="@id/headerActions"
        app:layout_constraintBottom_toBottomOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent"
        tools:listitem="@layout/item_post" />

</androidx.constraintlayout.widget.ConstraintLayout>
</file>

<file path="app/src/main/res/layout/item_post.xml">
<?xml version="1.0" encoding="utf-8"?>
<com.google.android.material.card.MaterialCardView
    xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    android:id="@+id/cvContent"
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    android:layout_marginStart="@dimen/space_8"
    android:layout_marginEnd="@dimen/space_8"
    android:layout_marginTop="@dimen/space_8"
    app:cardUseCompatPadding="true"
    app:rippleColor="@color/ripple_stateful">

    <androidx.constraintlayout.widget.ConstraintLayout
        android:id="@+id/cvLayout"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:padding="@dimen/space_16">

        <com.google.android.material.imageview.ShapeableImageView
            android:id="@+id/ivContent"
            android:layout_width="@dimen/poster_md_w"
            android:layout_height="@dimen/poster_md_h"
            android:contentDescription="@string/cd_content_image"
            android:scaleType="centerCrop"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintTop_toTopOf="parent"
            app:shapeAppearanceOverlay="@style/ShapeAppearance.Fludde.Medium"
            tools:srcCompat="@drawable/placeholder_poster" />

        <TextView
            android:id="@+id/tvContentTitle"
            android:layout_width="@dimen/poster_md_w"
            android:layout_height="wrap_content"
            android:layout_marginTop="@dimen/space_8"
            android:textAlignment="center"
            android:maxLines="1"
            android:ellipsize="end"
            android:textAppearance="@style/TextAppearance.Material3.TitleMedium"
            app:layout_constraintTop_toBottomOf="@+id/ivContent"
            app:layout_constraintStart_toStartOf="@+id/ivContent"
            tools:text="Bad Boys II" />

        <TextView
            android:id="@+id/tvContentCategory"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_marginStart="@dimen/space_16"
            android:layout_marginTop="@dimen/space_16"
            android:maxLines="1"
            android:ellipsize="end"
            android:textAppearance="@style/TextAppearance.Material3.LabelSmall"
            app:layout_constraintStart_toEndOf="@id/ivContent"
            app:layout_constraintTop_toTopOf="@id/ivContent"
            app:layout_constraintEnd_toEndOf="parent"
            tools:text="Movie" />

        <TextView
            android:id="@+id/tvContentDescription"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_marginTop="@dimen/space_8"
            android:layout_marginStart="@dimen/space_16"
            android:maxLines="4"
            android:ellipsize="end"
            android:textAppearance="@style/TextAppearance.Material3.BodyMedium"
            app:layout_constraintStart_toEndOf="@id/ivContent"
            app:layout_constraintTop_toBottomOf="@id/tvContentCategory"
            app:layout_constraintEnd_toEndOf="parent"
            tools:text="The drug ecstasy is flowing into Miami..." />

        <TextView
            android:id="@+id/tvReview"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_marginTop="@dimen/space_8"
            android:layout_marginStart="@dimen/space_16"
            android:maxLines="3"
            android:ellipsize="end"
            android:textAppearance="@style/TextAppearance.Material3.BodyMedium"
            app:layout_constraintStart_toEndOf="@id/ivContent"
            app:layout_constraintTop_toBottomOf="@id/tvContentDescription"
            app:layout_constraintEnd_toEndOf="parent"
            tools:text="Short personal review snippet goes here..." />

        <com.google.android.material.imageview.ShapeableImageView
            android:id="@+id/ivUserPic"
            android:layout_width="@dimen/avatar_md"
            android:layout_height="@dimen/avatar_md"
            android:layout_marginTop="@dimen/space_16"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintTop_toBottomOf="@id/tvContentTitle"
            app:shapeAppearanceOverlay="@style/ShapeAppearance.Fludde.Circular"
            android:contentDescription="@string/cd_user_avatar"
            tools:srcCompat="@drawable/placeholder_avatar" />

        <TextView
            android:id="@+id/tvUsername"
            android:layout_width="@dimen/avatar_md"
            android:layout_height="wrap_content"
            android:layout_marginTop="@dimen/space_4"
            android:gravity="center"
            android:textAppearance="@style/TextAppearance.Material3.LabelMedium"
            app:layout_constraintTop_toBottomOf="@+id/ivUserPic"
            app:layout_constraintStart_toStartOf="@+id/ivUserPic"
            tools:text="JohnDoe" />
    </androidx.constraintlayout.widget.ConstraintLayout>
</com.google.android.material.card.MaterialCardView>
</file>

<file path="app/src/main/res/layout/users_query.xml">
<?xml version="1.0" encoding="utf-8"?>
<com.google.android.material.card.MaterialCardView
    xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    android:layout_marginTop="@dimen/space_8"
    android:layout_marginEnd="@dimen/space_8"
    app:cardUseCompatPadding="true"
    app:rippleColor="@color/ripple_stateful"
    android:focusable="true"
    android:clickable="true">

    <RelativeLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:padding="@dimen/space_8">

        <com.google.android.material.imageview.ShapeableImageView
            android:id="@+id/ivUserImage"
            android:layout_width="@dimen/avatar_lg"
            android:layout_height="@dimen/avatar_lg"
            android:contentDescription="@string/cd_user_avatar"
            app:shapeAppearanceOverlay="@style/ShapeAppearance.Fludde.Circular"
            tools:srcCompat="@drawable/placeholder_avatar" />

        <TextView
            android:id="@+id/tvUName"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:layout_marginStart="@dimen/space_16"
            android:layout_toEndOf="@id/ivUserImage"
            android:layout_centerVertical="true"
            android:maxLines="1"
            android:ellipsize="end"
            android:textAppearance="@style/TextAppearance.Material3.TitleSmall"
            tools:text="John Doe" />
    </RelativeLayout>
</com.google.android.material.card.MaterialCardView>
</file>

<file path="app/src/main/res/values/colors.xml">
<resources>
    <!--
      Material 3 brand fallback palette for Views (Light & Dark).
      On Android 12+ your values-v31 Theme.Fludde inherits DynamicColors,
      so these act as stable fallbacks when dynamic color isn't available.
      Use theme roles (e.g., ?attr/colorPrimary) — do not hardcode hex in layouts/views.
    -->

    <!-- ───────────── Light scheme (brand accents + neutrals) ───────────── -->
    <!-- Primary -->
    <color name="md_theme_light_primary">#6750A4</color>
    <color name="md_theme_light_onPrimary">#FFFFFF</color>
    <color name="md_theme_light_primaryContainer">#EADDFF</color>
    <color name="md_theme_light_onPrimaryContainer">#21005D</color>

    <!-- Secondary -->
    <color name="md_theme_light_secondary">#625B71</color>
    <color name="md_theme_light_onSecondary">#FFFFFF</color>
    <color name="md_theme_light_secondaryContainer">#E8DEF8</color>
    <color name="md_theme_light_onSecondaryContainer">#1D192B</color>

    <!-- Tertiary -->
    <color name="md_theme_light_tertiary">#7D5260</color>
    <color name="md_theme_light_onTertiary">#FFFFFF</color>
    <color name="md_theme_light_tertiaryContainer">#FFD8E4</color>
    <color name="md_theme_light_onTertiaryContainer">#31111D</color>

    <!-- Error -->
    <color name="md_theme_light_error">#BA1A1A</color>
    <color name="md_theme_light_onError">#FFFFFF</color>
    <color name="md_theme_light_errorContainer">#FFDAD6</color>
    <color name="md_theme_light_onErrorContainer">#410002</color>

    <!-- Neutrals / surfaces -->
    <color name="md_theme_light_background">#FFFBFE</color>
    <color name="md_theme_light_onBackground">#1C1B1F</color>
    <color name="md_theme_light_surface">#FFFBFE</color>
    <color name="md_theme_light_onSurface">#1C1B1F</color>
    <color name="md_theme_light_surfaceVariant">#E7E0EC</color>
    <color name="md_theme_light_onSurfaceVariant">#49454F</color>
    <color name="md_theme_light_outline">#79747E</color>
    <color name="md_theme_light_outlineVariant">#CAC4D0</color>
    <color name="md_theme_light_inverseSurface">#313033</color>
    <color name="md_theme_light_inverseOnSurface">#F4EFF4</color>
    <color name="md_theme_light_inversePrimary">#D0BCFF</color>
    <color name="md_theme_light_scrim">#000000</color>

    <!-- Surface container tokens (used by Theme.Fludde) -->
    <color name="surfaceContainerLowest">#F7F2FA</color>
    <color name="surfaceContainerLow">#F3EDF7</color>
    <color name="surfaceContainer">#ECE6F0</color>
    <color name="surfaceContainerHigh">#E6E0E9</color>
    <color name="surfaceContainerHighest">#E0DAE3</color>

    <!-- ───────────── Dark scheme (brand accents + neutrals) ───────────── -->
    <!-- Primary -->
    <color name="md_theme_dark_primary">#D0BCFF</color>
    <color name="md_theme_dark_onPrimary">#381E72</color>
    <color name="md_theme_dark_primaryContainer">#4F378B</color>
    <color name="md_theme_dark_onPrimaryContainer">#EADDFF</color>

    <!-- Secondary -->
    <color name="md_theme_dark_secondary">#CCC2DC</color>
    <color name="md_theme_dark_onSecondary">#332D41</color>
    <color name="md_theme_dark_secondaryContainer">#4A4458</color>
    <color name="md_theme_dark_onSecondaryContainer">#E8DEF8</color>

    <!-- Tertiary -->
    <color name="md_theme_dark_tertiary">#EFB8C8</color>
    <color name="md_theme_dark_onTertiary">#492532</color>
    <color name="md_theme_dark_tertiaryContainer">#633B48</color>
    <color name="md_theme_dark_onTertiaryContainer">#FFD8E4</color>

    <!-- Error -->
    <color name="md_theme_dark_error">#FFB4AB</color>
    <color name="md_theme_dark_onError">#690005</color>
    <color name="md_theme_dark_errorContainer">#93000A</color>
    <color name="md_theme_dark_onErrorContainer">#FFDAD6</color>

    <!-- Neutrals / surfaces -->
    <color name="md_theme_dark_background">#1C1B1F</color>
    <color name="md_theme_dark_onBackground">#E6E1E5</color>
    <color name="md_theme_dark_surface">#1C1B1F</color>
    <color name="md_theme_dark_onSurface">#E6E1E5</color>
    <color name="md_theme_dark_surfaceVariant">#49454F</color>
    <color name="md_theme_dark_onSurfaceVariant">#CAC4D0</color>
    <color name="md_theme_dark_outline">#938F99</color>
    <color name="md_theme_dark_outlineVariant">#49454F</color>
    <color name="md_theme_dark_inverseSurface">#E6E1E5</color>
    <color name="md_theme_dark_inverseOnSurface">#313033</color>
    <color name="md_theme_dark_inversePrimary">#6750A4</color>
    <color name="md_theme_dark_scrim">#000000</color>
</resources>
</file>

<file path="app/src/main/res/values/styles.xml">
<!-- app/src/main/res/values/styles.xml -->
<resources>

    <!-- ✅ Minimal "do-nothing" base so any accidental style="@style/Widget" resolves -->
    <style name="Widget" />

    <!-- Keep this tiny alias so any accidental style="Text" compiles safely -->
    <style name="Text" parent="TextAppearance.Material3.BodyMedium" />

    <!-- ───────────────────────────── Text fields ───────────────────────────── -->
    <style name="Widget.Fludde.TextField.Filled" parent="Widget.Material3.TextInputLayout.FilledBox">
        <item name="shapeAppearanceOverlay">@style/ShapeAppearance.Fludde.Medium</item>
        <item name="boxStrokeWidth">1dp</item>
        <item name="boxStrokeWidthFocused">2dp</item>
    </style>

    <style name="Widget.Fludde.TextField.Outlined" parent="Widget.Material3.TextInputLayout.OutlinedBox">
        <item name="shapeAppearanceOverlay">@style/ShapeAppearance.Fludde.Medium</item>
        <item name="boxStrokeWidth">1dp</item>
        <item name="boxStrokeWidthFocused">2dp</item>
    </style>

    <style name="TextLimitError" parent="TextAppearance.Material3.LabelSmall">
        <item name="android:textColor">?attr/colorError</item>
    </style>

    <style name="Text.NoAllCaps">
        <item name="android:textAllCaps">false</item>
    </style>

    <!-- ─────────────────────────────── Buttons ─────────────────────────────── -->
    <style name="Widget.Fludde.Button.Primary" parent="Widget.Material3.Button">
        <item name="android:minHeight">@dimen/touch_target_min</item>
        <item name="android:paddingHorizontal">24dp</item>
        <item name="iconPadding">8dp</item>
        <item name="android:textAllCaps">false</item>
        <item name="shapeAppearanceOverlay">@style/ShapeAppearance.Fludde.Medium</item>
        <item name="rippleColor">@color/ripple_stateful</item>
    </style>

    <style name="Widget.Fludde.Button.Tonal" parent="Widget.Material3.Button.TonalButton">
        <item name="android:minHeight">@dimen/touch_target_min</item>
        <item name="android:paddingHorizontal">24dp</item>
        <item name="iconPadding">8dp</item>
        <item name="android:textAllCaps">false</item>
        <item name="shapeAppearanceOverlay">@style/ShapeAppearance.Fludde.Medium</item>
        <item name="rippleColor">@color/ripple_stateful</item>
    </style>

    <style name="Widget.Fludde.Button.Outlined" parent="Widget.Material3.Button.OutlinedButton">
        <item name="android:minHeight">@dimen/touch_target_min</item>
        <item name="android:paddingHorizontal">24dp</item>
        <item name="iconPadding">8dp</item>
        <item name="android:textAllCaps">false</item>
        <item name="shapeAppearanceOverlay">@style/ShapeAppearance.Fludde.Medium</item>
        <item name="rippleColor">@color/ripple_stateful</item>
    </style>

    <style name="Widget.Fludde.Button.Text" parent="Widget.Material3.Button.TextButton">
        <item name="android:minHeight">@dimen/touch_target_min</item>
        <item name="android:paddingHorizontal">16dp</item>
        <item name="iconPadding">6dp</item>
        <item name="android:textAllCaps">false</item>
        <item name="shapeAppearanceOverlay">@style/ShapeAppearance.Fludde.Medium</item>
        <item name="rippleColor">@color/ripple_stateful</item>
    </style>

    <style name="Widget.Fludde.Button.Elevated" parent="Widget.Material3.Button.ElevatedButton">
        <item name="android:minHeight">@dimen/touch_target_min</item>
        <item name="android:paddingHorizontal">24dp</item>
        <item name="iconPadding">8dp</item>
        <item name="android:textAllCaps">false</item>
        <item name="shapeAppearanceOverlay">@style/ShapeAppearance.Fludde.Medium</item>
        <item name="rippleColor">@color/ripple_stateful</item>
    </style>

    <!-- ─────────────────────────────── Chips ───────────────────────────────── -->
    <style name="Widget.Fludde.Chip.Base" parent="Widget.Material3.Chip.Assist">
        <item name="shapeAppearanceOverlay">@style/ShapeAppearance.Fludde.Medium</item>
        <item name="ensureMinTouchTargetSize">true</item>
        <item name="chipMinTouchTargetSize">@dimen/touch_target_min</item>
        <item name="android:textAllCaps">false</item>
        <item name="rippleColor">@color/ripple_stateful</item>
    </style>
    <style name="Widget.Fludde.Chip.Assist" parent="Widget.Fludde.Chip.Base" />
    <style name="Widget.Fludde.Chip.Filter" parent="Widget.Fludde.Chip.Base" />
    <style name="Widget.Fludde.Chip.Input" parent="Widget.Fludde.Chip.Base" />
    <style name="Widget.Fludde.Chip.Suggestion" parent="Widget.Fludde.Chip.Base" />

    <!-- ─────────────────────────────── Cards ───────────────────────────────── -->
    <style name="Widget.Fludde.Card" parent="Widget.Material3.CardView.Elevated">
        <item name="shapeAppearanceOverlay">@style/ShapeAppearance.Fludde.Medium</item>
        <item name="cardUseCompatPadding">true</item>
        <item name="cardBackgroundColor">@color/card_bg_selector</item>
        <item name="strokeColor">@color/card_stroke_selector</item>
        <item name="strokeWidth">@dimen/divider_thin</item>
        <item name="rippleColor">@color/ripple_stateful</item>
    </style>

    <!-- ───────────────────── BottomNavigation (M3, correct parents) ───────────────────── -->
    <!-- Tiny base so any legacy references resolve -->
    <style name="Widget.Fludde" />

    <style name="Widget.Fludde.NavigationBar" parent="Widget.Material3.BottomNavigationView">
        <item name="labelVisibilityMode">labeled</item>
        <item name="itemActiveIndicatorStyle">@style/Widget.Fludde.NavigationBar.ActiveIndicator</item>
    </style>

    <style name="Widget.Fludde.NavigationBar.ActiveIndicator"
        parent="Widget.Material3.BottomNavigationView.ActiveIndicator">
        <item name="android:color">?attr/colorSecondaryContainer</item>
        <item name="shapeAppearanceOverlay">@style/ShapeAppearance.Fludde.Medium</item>
    </style>

    <!-- ───────────────────────────── Pressable helpers ───────────────────────────── -->
    <style name="Widget.Fludde.Pressable">
        <item name="android:background">@drawable/list_item_bg</item>
        <item name="android:clickable">true</item>
        <item name="android:focusable">true</item>
    </style>

</resources>
</file>

<file path=".gitignore">
# Ignore Mac system files
.DS_Store

# Ignore the local configuration file
local.properties

# Ignore API keys and sensitive configuration files
apikey.properties
apikey.properties.bak

# Ignore Gradle files
.gradle/
build/


# Ignore Android Studio specific files
.idea/
*.iml

# Ignore log files
*.log

# Ignore build output directories
app/build/

# Ignore generated files (e.g., R.java, compiled classes)
app/build/
app/src/main/gen/
app/src/main/res/drawable/

# Ignore miscellaneous files
*.bak
*.swp

# Ignore generated images and videos
*.gif
*.mp4
*.mov
*.avi
*.flv

# Ignore any other environment-specific or temporary files
tmp/
temp/
*.tmp
*.temp

# Ignore the entire scripts directory if it contains only build-related files
scripts/gradlew
scripts/gradlew.bat
</file>

<file path="build.gradle">
plugins {
    id("com.android.application") version "8.7.0" apply false
    id("org.jetbrains.kotlin.android") version "1.9.22" apply false
}
</file>

<file path="app/src/main/java/com/example/fludde/adapters/PostAdapter.java">
package com.example.fludde.adapters;

import android.content.Context;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.TextView;

import androidx.annotation.NonNull;
import androidx.recyclerview.widget.RecyclerView;

import com.example.fludde.R;
import com.example.fludde.model.PostUi;
import com.example.fludde.utils.GlideExtensions;

import java.util.List;

public class PostAdapter extends RecyclerView.Adapter<PostAdapter.ViewHolder> {

    private final Context context;
    private final List<PostUi> posts;

    public PostAdapter(Context context, List<PostUi> posts) {
        this.context = context;
        this.posts = posts;
        setHasStableIds(true);
    }

    @Override
    public long getItemId(int position) {
        String key = posts.get(position).getTitle() + "|" + posts.get(position).getUserName() + "|" + position;
        return key.hashCode();
    }

    @NonNull
    @Override
    public ViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {
        View view= LayoutInflater.from(context).inflate(R.layout.item_post, parent, false);
        view.setBackgroundResource(R.drawable.list_item_bg);
        return new ViewHolder(view);
    }

    @Override
    public void onBindViewHolder(@NonNull ViewHolder holder, int position) {
        holder.bind(posts.get(position));
    }

    @Override
    public int getItemCount() { return posts.size(); }

    class ViewHolder extends RecyclerView.ViewHolder{
        private final TextView tvContentCategory;
        private final TextView tvContentDescription;
        private final TextView tvContentTitle;
        private final TextView tvUsername;
        private final TextView tvReview;
        private final ImageView ivUserPic;
        private final ImageView ivContent;

        ViewHolder(@NonNull View itemView) {
            super(itemView);
            tvContentCategory = itemView.findViewById(R.id.tvContentCategory);
            tvContentDescription = itemView.findViewById(R.id.tvContentDescription);
            tvContentTitle = itemView.findViewById(R.id.tvContentTitle);
            tvUsername = itemView.findViewById(R.id.tvUsername);
            tvReview = itemView.findViewById(R.id.tvReview);
            ivUserPic = itemView.findViewById(R.id.ivUserPic);
            ivContent = itemView.findViewById(R.id.ivContent);

            itemView.setOnLongClickListener(v -> {
                com.example.fludde.utils.Haptics.longPress(v);
                return false;
            });
        }

        void bind(PostUi post) {
            tvContentCategory.setText(post.getCategory());
            tvContentDescription.setText(post.getDescription());
            tvContentTitle.setText(post.getTitle());
            tvReview.setText(post.getReview());
            tvUsername.setText(post.getUserName());

            GlideExtensions.loadPoster(ivContent, post.getContentImageUrl());
            GlideExtensions.loadAvatar(ivUserPic, post.getUserImageUrl());
        }
    }
}
</file>

<file path="app/src/main/java/com/example/fludde/fragments/child/MusicChildFragment.java">
package com.example.fludde.fragments.child;

import android.os.Bundle;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ProgressBar;
import android.widget.Toast;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.fragment.app.Fragment;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.LinearSnapHelper;
import androidx.recyclerview.widget.RecyclerView;

import com.example.fludde.BuildConfig;
import com.example.fludde.R;
import com.example.fludde.adapters.MusicChildAdapter;
import com.example.fludde.model.MusicContent;
import com.example.fludde.utils.ApiUtils;
import com.example.fludde.utils.ErrorHandler;
import com.example.fludde.utils.MockData;
import com.example.fludde.utils.SpacesItemDecoration;

import org.json.JSONArray;
import org.json.JSONObject;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/** Horizontal music carousel (iTunes). */
public class MusicChildFragment extends Fragment {

    private static final String TAG = "MusicChildFragment";
    private static final String ITUNES_URL =
            "https://itunes.apple.com/search?term=miami&entity=song&limit=25";

    private RecyclerView rv;
    private ProgressBar progress;

    private final List<MusicContent> items = new ArrayList<>();
    private MusicChildAdapter adapter;

    @Nullable
    @Override
    public View onCreateView(@NonNull LayoutInflater inflater,
                             @Nullable ViewGroup container,
                             @Nullable Bundle savedInstanceState) {
        return inflater.inflate(R.layout.fragment_child_music, container, false);
    }

    @Override
    public void onViewCreated(@NonNull View v, @Nullable Bundle savedInstanceState) {
        super.onViewCreated(v, savedInstanceState);

        rv = v.findViewById(R.id.rvMusicHorizontalView);
        progress = v.findViewById(R.id.progressBar);

        rv.setLayoutManager(new LinearLayoutManager(requireContext(), LinearLayoutManager.HORIZONTAL, false));
        adapter = new MusicChildAdapter(requireContext(), items, new MusicChildAdapter.OnMusicContentListener() {
            @Override public void onMusicContentClick(int position) {}
            @Override public void onMusicContentLongClick(int position) {}
        });
        rv.setAdapter(adapter);

        // carousel affordance
        final int itemSpace = getResources().getDimensionPixelSize(R.dimen.space_12);
        final int edgePeek = getResources().getDimensionPixelSize(R.dimen.space_24);
        rv.setClipToPadding(false);
        rv.setPadding(edgePeek, 0, edgePeek, 0);
        rv.addItemDecoration(new SpacesItemDecoration(itemSpace));
        new LinearSnapHelper().attachToRecyclerView(rv);

        fetchMusic();
    }

    private void setLoading(boolean show) {
        if (progress != null) progress.setVisibility(show ? View.VISIBLE : View.GONE);
        if (rv != null) rv.setAlpha(show ? 0.3f : 1f);
    }

    private void fetchMusic() {
        setLoading(true);

        if (BuildConfig.MOCK_MODE) {
            try {
                JSONObject mock = MockData.itunesSearchJson();
                JSONArray results = mock.optJSONArray("results");
                items.clear();
                if (results != null) {
                    items.addAll(MusicContent.fromJsonArray(results));
                }
                adapter.notifyDataSetChanged();
                if (items.isEmpty()) {
                    Toast.makeText(requireContext(), getString(R.string.empty_music_message), Toast.LENGTH_SHORT).show();
                }
            } catch (Exception e) {
                Log.e(TAG, "Mock music parse error", e);
                ErrorHandler.showToast(requireContext(), R.string.error_load_content);
            } finally {
                setLoading(false);
            }
            return;
        }

        Log.d(TAG, "Fetching music: " + ITUNES_URL);

        ApiUtils.get(ITUNES_URL, new ApiUtils.Callback() {
            @Override public void onSuccess(String body) {
                try {
                    JSONObject response = new JSONObject(body);
                    JSONArray results = response.optJSONArray("results");
                    items.clear();
                    if (results != null) {
                        items.addAll(MusicContent.fromJsonArray(results));
                    }
                    requireActivity().runOnUiThread(() -> {
                        adapter.notifyDataSetChanged();
                        if (items.isEmpty()) {
                            ErrorHandler.showToast(requireContext(), R.string.empty_music_message);
                        }
                        setLoading(false);
                    });
                } catch (Exception e) {
                    Log.e(TAG, "Parse error (music)", e);
                    requireActivity().runOnUiThread(() -> {
                        ErrorHandler.showToast(requireContext(), R.string.error_load_content);
                        setLoading(false);
                    });
                }
            }

            @Override public void onError(IOException e) {
                Log.e(TAG, "Network error (music)", e);
                requireActivity().runOnUiThread(() -> {
                    ErrorHandler.showNetworkError(requireContext(), R.string.error_load_content);
                    setLoading(false);
                });
            }
        });
    }
}
</file>

<file path="app/src/main/java/com/example/fludde/fragments/ProfileFragment.java">
package com.example.fludde.fragments;

import android.content.Intent;
import android.os.Bundle;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import android.widget.Toast;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.fragment.app.Fragment;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;

import com.bumptech.glide.Glide;
import com.bumptech.glide.load.resource.bitmap.CenterCrop;
import com.bumptech.glide.request.RequestOptions;
import com.example.fludde.BuildConfig;
import com.example.fludde.LoginActivity;
import com.example.fludde.R;
import com.example.fludde.adapters.PostAdapter;
import com.example.fludde.model.PostUi;
import com.example.fludde.utils.MockData;
import com.example.fludde.utils.MockSessionManager;
import com.google.android.material.button.MaterialButton;
import com.google.android.material.imageview.ShapeableImageView;
import com.parse.LogOutCallback;
import com.parse.ParseException;
import com.parse.ParseFile;
import com.parse.ParseUser;

import android.widget.TextView;

import java.util.ArrayList;
import java.util.List;

/** 
 * Profile with enhanced mock-mode support.
 * Shows user profile data and their posts.
 */
public class ProfileFragment extends Fragment {
    private static final String TAG = "ProfileFragment";

    private ShapeableImageView ivAvatar;
    private TextView tvUsername;
    private TextView tvEmail;
    private MaterialButton btnEditProfile;
    private MaterialButton btnLogout;

    private LinearLayout emptyState;
    private MaterialButton btnCreateFirstPost;

    private RecyclerView rvPosts;
    private final List<PostUi> posts = new ArrayList<>();
    private PostAdapter adapter;

    @Nullable
    @Override
    public View onCreateView(@NonNull LayoutInflater inflater,
                             @Nullable ViewGroup container,
                             @Nullable Bundle savedInstanceState) {
        return inflater.inflate(R.layout.fragment_profile, container, false);
    }

    @Override
    public void onViewCreated(@NonNull View v, @Nullable Bundle savedInstanceState) {
        super.onViewCreated(v, savedInstanceState);

        ivAvatar = v.findViewById(R.id.ivAvatar);
        tvUsername = v.findViewById(R.id.tvUsername);
        tvEmail = v.findViewById(R.id.tvEmail);
        btnEditProfile = v.findViewById(R.id.btnEditProfile);
        btnLogout = v.findViewById(R.id.btnLogout);
        emptyState = v.findViewById(R.id.emptyState);
        btnCreateFirstPost = v.findViewById(R.id.btnCreateFirstPost);
        rvPosts = v.findViewById(R.id.rvProfilePosts);

        adapter = new PostAdapter(requireContext(), posts);
        rvPosts.setLayoutManager(new LinearLayoutManager(getContext()));
        rvPosts.setAdapter(adapter);

        loadUserProfile();
        wireActions();
    }

    /**
     * Load user profile - checks mock mode first.
     */
    private void loadUserProfile() {
        // ✅ NEW: Enhanced mock mode with MockSessionManager
        if (BuildConfig.MOCK_MODE) {
            displayMockProfile();
            return;
        }
        
        // EXISTING: Real Parse query (unchanged)
        bindRealUserProfile();
    }

    /**
     * ✅ NEW METHOD: Display mock profile from session.
     */
    private void displayMockProfile() {
        MockData.MockProfile profile = MockSessionManager.getCurrentUserProfile(requireContext());
        
        if (profile == null) {
            Log.w(TAG, "No mock profile found - user may not be logged in");
            // Show generic fallback
            tvUsername.setText("demo");
            tvEmail.setText("demo@example.com");
            loadDefaultAvatar();
            return;
        }
        
        // Display profile data
        tvUsername.setText(profile.username);
        tvEmail.setText(profile.email);
        
        // Load profile picture
        Glide.with(this)
                .load(profile.profilePictureUrl)
                .apply(new RequestOptions().transform(new CenterCrop()))
                .placeholder(R.drawable.placeholder_avatar)
                .error(R.drawable.placeholder_avatar)
                .into(ivAvatar);
        
        // Display user's posts
        posts.clear();
        if (profile.userPosts != null && !profile.userPosts.isEmpty()) {
            posts.addAll(profile.userPosts);
            rvPosts.setVisibility(View.VISIBLE);
            emptyState.setVisibility(View.GONE);
        } else {
            rvPosts.setVisibility(View.GONE);
            emptyState.setVisibility(View.VISIBLE);
        }
        adapter.notifyDataSetChanged();
        
        Log.d(TAG, "Mock profile displayed for: " + profile.username + " with " + posts.size() + " posts");
    }

    /**
     * Bind real user profile from Parse.
     */
    private void bindRealUserProfile() {
        try {
            ParseUser current = ParseUser.getCurrentUser();
            String username = current != null && current.getUsername() != null ? current.getUsername() : "";
            String email = current != null && current.getEmail() != null ? current.getEmail() : "";

            tvUsername.setText(username);
            tvEmail.setText(email);

            ParseFile avatar = current != null ? current.getParseFile("image") : null;
            Glide.with(this)
                    .load(avatar != null ? avatar.getUrl() : null)
                    .apply(new RequestOptions().transform(new CenterCrop()))
                    .placeholder(R.drawable.placeholder_avatar)
                    .error(R.drawable.placeholder_avatar)
                    .into(ivAvatar);

            Log.d(TAG, "Real user profile bound");
            
            // In real mode, show empty state until posts are implemented
            rvPosts.setVisibility(View.GONE);
            emptyState.setVisibility(View.VISIBLE);
            
        } catch (Exception e) {
            Log.e(TAG, "Failed to bind user profile", e);
            Toast.makeText(getContext(), getString(R.string.error_load_profile), Toast.LENGTH_SHORT).show();
        }
    }

    /**
     * Load default avatar when no profile found.
     */
    private void loadDefaultAvatar() {
        Glide.with(this)
                .load(R.drawable.placeholder_avatar)
                .apply(new RequestOptions().transform(new CenterCrop()))
                .into(ivAvatar);
    }

    /**
     * Wire up button actions.
     */
    private void wireActions() {
        btnEditProfile.setOnClickListener(v ->
                Toast.makeText(requireContext(), getString(R.string.action_edit_profile), Toast.LENGTH_SHORT).show());

        btnLogout.setOnClickListener(v -> {
            // ✅ UPDATED: Handle mock mode logout with MockSessionManager
            if (BuildConfig.MOCK_MODE) {
                MockSessionManager.logout(requireContext());
                Log.d(TAG, "Mock user logged out");
                navigateToLogin();
                return;
            }
            
            // EXISTING: Real Parse logout
            try {
                ParseUser.logOutInBackground(new LogOutCallback() {
                    @Override public void done(ParseException e) {
                        if (e != null) {
                            Log.e(TAG, "Logout failed", e);
                            Toast.makeText(requireContext(), getString(R.string.error_generic), Toast.LENGTH_SHORT).show();
                            return;
                        }
                        navigateToLogin();
                    }
                });
            } catch (Exception ex) {
                Log.e(TAG, "Logout error", ex);
                Toast.makeText(requireContext(), getString(R.string.error_generic), Toast.LENGTH_SHORT).show();
            }
        });

        btnCreateFirstPost.setOnClickListener(v ->
                Toast.makeText(requireContext(), getString(R.string.nav_compose), Toast.LENGTH_SHORT).show());
    }

    /**
     * Navigate to login screen.
     */
    private void navigateToLogin() {
        startActivity(new Intent(requireContext(), LoginActivity.class));
        requireActivity().finish();
    }
}
</file>

<file path="app/src/main/java/com/example/fludde/fragments/PostFragment.java">
package com.example.fludde.fragments;

import android.os.Bundle;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.fragment.app.Fragment;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.TextView;

import com.example.fludde.BuildConfig;
import com.example.fludde.Post;
import com.example.fludde.R;
import com.example.fludde.adapters.PostAdapter;
import com.example.fludde.model.PostUi;
import com.example.fludde.utils.MockData;
import com.facebook.shimmer.ShimmerFrameLayout;
import com.parse.FindCallback;
import com.parse.ParseException;
import com.parse.ParseFile;
import com.parse.ParseQuery;
import com.parse.ParseUser;

import java.util.ArrayList;
import java.util.List;

/** Timeline / feed (always shows data in MOCK_MODE). */
public class PostFragment extends Fragment {

    private RecyclerView rvPost;
    private PostAdapter adapter;
    private final List<PostUi> allPosts = new ArrayList<>();

    private ShimmerFrameLayout shimmer;
    private View errorCard;
    private TextView tvErrorMessage;
    private Button btnRetry;

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
        return inflater.inflate(R.layout.fragment_post, container, false);
    }

    @Override
    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {
        super.onViewCreated(view, savedInstanceState);

        rvPost = view.findViewById(R.id.rvPost);
        shimmer = view.findViewById(R.id.shimmerContainer);

        errorCard = view.findViewById(R.id.inlineError);
        tvErrorMessage = errorCard != null ? errorCard.findViewById(R.id.tvErrorMessage) : null;
        btnRetry = errorCard != null ? errorCard.findViewById(R.id.btnRetry) : null;

        adapter = new PostAdapter(requireContext(), allPosts);
        rvPost.setAdapter(adapter);
        rvPost.setLayoutManager(new LinearLayoutManager(getContext()));
        rvPost.setHasFixedSize(true);

        if (btnRetry != null) btnRetry.setOnClickListener(v -> queryPosts());

        showError(false, null);
        showLoading(true);
        queryPosts();
    }

    private void showLoading(boolean show) {
        if (shimmer == null || rvPost == null) return;
        if (show) {
            shimmer.setVisibility(View.VISIBLE);
            shimmer.startShimmer();
            rvPost.setAlpha(0f);
        } else {
            shimmer.stopShimmer();
            shimmer.setVisibility(View.GONE);
            rvPost.setAlpha(1f);
        }
    }

    private void showError(boolean show, @Nullable String msg) {
        if (errorCard != null) errorCard.setVisibility(show ? View.VISIBLE : View.GONE);
        if (show && tvErrorMessage != null) {
            tvErrorMessage.setText(msg == null ? getString(R.string.error_generic) : msg);
        }
    }

    private void bindMock() {
        allPosts.clear();
        allPosts.addAll(MockData.mockPosts());
        adapter.notifyDataSetChanged();
    }

    private void queryPosts() {
        // In mock mode, just bind canned data.
        if (BuildConfig.MOCK_MODE) {
            bindMock();
            showLoading(false);
            showError(false, null);
            return;
        }

        // Real backend path (Parse). If your backend isn't ready, you'll still see mock in debug.
        ParseQuery<Post> query = ParseQuery.getQuery(Post.class);
        query.include(Post.KEY_USER);
        query.setLimit(50);
        query.orderByDescending(Post.KEY_CREATED_AT);

        query.findInBackground(new FindCallback<Post>() {
            @Override
            public void done(List<Post> posts, ParseException e) {
                showLoading(false);
                if (e != null) {
                    showError(true, getString(R.string.error_generic));
                    return;
                }
                allPosts.clear();
                if (posts != null) {
                    for (Post p : posts) {
                        String category = nz(p.getString(Post.KEY_CATEGORY));
                        String desc = nz(p.getString(Post.KEY_DESCRIPTION));
                        String title = nz(p.getString(Post.KEY_CONTENT_TITLE));
                        String review = nz(p.getString(Post.KEY_REVIEW));

                        String contentUrl = "";
                        try {
                            ParseFile f = p.getParseFile(Post.KEY_CONTENT_IMAGE);
                            if (f != null) contentUrl = nz(f.getUrl());
                        } catch (Exception ignore) {}

                        String userName = "";
                        String userImageUrl = "";
                        try {
                            ParseUser u = p.getParseUser(Post.KEY_USER);
                            if (u != null) {
                                userName = nz(u.getUsername());
                                ParseFile uf = u.getParseFile("image");
                                if (uf != null) userImageUrl = nz(uf.getUrl());
                            }
                        } catch (Exception ignore) {}

                        allPosts.add(new PostUi(category, desc, title, review, contentUrl, userName, userImageUrl));
                    }
                }
                if (allPosts.isEmpty()) {
                    // graceful empty state
                    showError(true, getString(R.string.empty_profile_message));
                } else {
                    showError(false, null);
                }
                adapter.notifyDataSetChanged();
            }
        });
    }

    private static String nz(String s) { return s == null ? "" : s; }
}
</file>

<file path="app/src/main/java/com/example/fludde/ParseApplication.java">
package com.example.fludde;

import android.app.Application;
import android.util.Log;

import com.example.fludde.utils.ApiUtils;
import com.parse.Parse;

public class ParseApplication extends Application {

    private static final String TAG = "ParseApplication";

    @Override
    public void onCreate() {
        super.onCreate();

        // Prefer v4 Bearer token; fall back to legacy v3 api_key only if needed.
        if (BuildConfig.TMDB_BEARER != null && !BuildConfig.TMDB_BEARER.isEmpty()) {
            ApiUtils.setApiKey(null);
            ApiUtils.setBearer(BuildConfig.TMDB_BEARER);
            Log.d(TAG, "TMDB auth configured with Bearer token.");
        } else if (BuildConfig.TMDB_API_KEY != null && !BuildConfig.TMDB_API_KEY.isEmpty()) {
            ApiUtils.setBearer(null);
            ApiUtils.setApiKey(BuildConfig.TMDB_API_KEY);
            Log.w(TAG, "Using legacy TMDB api_key. Consider switching to a v4 Bearer token.");
        } else {
            Log.e(TAG, "No TMDB credentials found. Set TMDB_BEARER (preferred) or TMDB_API_KEY.");
        }

        // --- NEW: Log MOCK_MODE status ---
        Log.d(TAG, "MOCK_MODE = " + BuildConfig.MOCK_MODE);

        // --- Parse/Back4App initialization ---
        // Only initialize if NOT in mock mode
        if (!BuildConfig.MOCK_MODE) {
            // Only initialize if credentials are provided in local.properties
            if (BuildConfig.BACK4APP_APP_ID != null && !BuildConfig.BACK4APP_APP_ID.isEmpty() &&
                BuildConfig.BACK4APP_CLIENT_KEY != null && !BuildConfig.BACK4APP_CLIENT_KEY.isEmpty()) {
                
                Parse.initialize(new Parse.Configuration.Builder(this)
                        .applicationId(BuildConfig.BACK4APP_APP_ID)
                        .clientKey(BuildConfig.BACK4APP_CLIENT_KEY)
                        .server(BuildConfig.BACK4APP_SERVER_URL)
                        .build()
                );
                Log.d(TAG, "Parse/Back4App initialized successfully.");
            } else {
                Log.w(TAG, "Parse/Back4App credentials not found. Parse functionality will be disabled.");
                Log.w(TAG, "Add BACK4APP_APP_ID, BACK4APP_CLIENT_KEY, and BACK4APP_SERVER_URL to local.properties");
            }
        } else {
            // --- NEW: Mock mode else block ---
            Log.d(TAG, "🎭 MOCK_MODE enabled - skipping Parse initialization");
            Log.d(TAG, "🎭 App will run with mock data only");
        }
    }
}
</file>

<file path="app/src/main/AndroidManifest.xml">
<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android">

    <!-- Keep permissions minimal. INTERNET is required for Parse + API calls. -->
    <uses-permission android:name="android.permission.INTERNET" />

    <application
        android:name=".ParseApplication"
        android:allowBackup="true"
        android:icon="@mipmap/ic_launcher"
        android:label="@string/app_name"
        android:supportsRtl="true"
        android:theme="@style/Theme.Fludde">

        <!-- Main (single-activity) host that owns bottom navigation & fragment swaps -->
        <activity
            android:name=".MainActivity"
            android:exported="true">
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />
                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
        </activity>

        <!-- Auth flow screens (no UI theming here; all styling via themes/styles) -->
        <activity
            android:name=".LoginActivity"
            android:exported="false" />
        <activity
            android:name=".SignupActivity"
            android:exported="false" />

        <!-- Note: FileProvider is omitted (keep manifest minimal) since we are not
             currently attaching images from local storage. Add it only when needed. -->
    </application>
</manifest>
</file>

<file path="gradle.properties">
# JVM heap + native-access flag to silence the JDK warning you saw
org.gradle.jvmargs=-Xmx3g -Dfile.encoding=UTF-8 --enable-native-access=ALL-UNNAMED

# AndroidX flags
android.useAndroidX=true
android.enableJetifier=true
android.nonTransitiveRClass=true
</file>

<file path="app/src/main/java/com/example/fludde/fragments/child/MovieChildFragment.java">
package com.example.fludde.fragments.child;

import android.os.Bundle;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ProgressBar;
import android.widget.Toast;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.fragment.app.Fragment;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.LinearSnapHelper;
import androidx.recyclerview.widget.RecyclerView;

import com.example.fludde.BuildConfig;
import com.example.fludde.R;
import com.example.fludde.adapters.MovieChildAdapter;
import com.example.fludde.model.MovieContent;
import com.example.fludde.utils.ApiUtils;
import com.example.fludde.utils.MockData;
import com.example.fludde.utils.SpacesItemDecoration;

import org.json.JSONArray;
import org.json.JSONObject;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * Movies tab carousel with TMDB trending content.
 */
public class MovieChildFragment extends Fragment {

    private static final String TAG = "MovieChildFragment";

    private static final String TMDB_URL = 
            "https://api.themoviedb.org/3/trending/movie/day?language=en-US";

    private RecyclerView rv;
    private ProgressBar progress;
    private MovieChildAdapter adapter;
    private final List<MovieContent> items = new ArrayList<>();

    @Nullable
    @Override
    public View onCreateView(@NonNull LayoutInflater inflater,
                             @Nullable ViewGroup container,
                             @Nullable Bundle savedInstanceState) {
        return inflater.inflate(R.layout.fragment_child_movie, container, false);
    }

    @Override
    public void onViewCreated(@NonNull View v, @Nullable Bundle savedInstanceState) {
        super.onViewCreated(v, savedInstanceState);

        rv = v.findViewById(R.id.rvMovieHorizontalView);
        progress = v.findViewById(R.id.progressBar);

        rv.setLayoutManager(new LinearLayoutManager(requireContext(), LinearLayoutManager.HORIZONTAL, false));
        adapter = new MovieChildAdapter(requireContext(), items, new MovieChildAdapter.OnMovieContentListener() {
            @Override public void onMovieContentClick(int position) {}
            @Override public void onMovieContentLongClick(int position) {}
        });
        rv.setAdapter(adapter);

        // Carousel affordance: peeking edges + per-item snap
        final int itemSpace = getResources().getDimensionPixelSize(R.dimen.space_12);
        final int edgePeek = getResources().getDimensionPixelSize(R.dimen.space_24);
        rv.setClipToPadding(false);
        rv.setPadding(edgePeek, 0, edgePeek, 0);
        rv.addItemDecoration(new SpacesItemDecoration(itemSpace));
        new LinearSnapHelper().attachToRecyclerView(rv);

        fetchMovies();
    }

    private void setLoading(boolean show) {
        if (progress != null) progress.setVisibility(show ? View.VISIBLE : View.GONE);
        if (rv != null) rv.setAlpha(show ? 0.3f : 1f);
    }

    private void fetchMovies() {
        setLoading(true);

        // Mock mode: use canned data
        if (BuildConfig.MOCK_MODE) {
            try {
                JSONObject mockData = MockData.tmdbTrendingJson();
                JSONArray results = mockData.optJSONArray("results");
                items.clear();
                if (results != null) {
                    items.addAll(MovieContent.fromJsonArray(results));
                }
                adapter.notifyDataSetChanged();
                
                Log.d(TAG, "Mock movies loaded ✓ count=" + items.size());
                if (items.isEmpty()) {
                    Toast.makeText(requireContext(), getString(R.string.empty_movies_message), Toast.LENGTH_SHORT).show();
                }
            } catch (Exception e) {
                Log.e(TAG, "Mock data error", e);
                Toast.makeText(requireContext(), getString(R.string.error_load_content), Toast.LENGTH_SHORT).show();
            } finally {
                setLoading(false);
            }
            return;
        }

        // Real API call
        Log.d(TAG, "Fetching movies: " + TMDB_URL);

        ApiUtils.get(TMDB_URL, new ApiUtils.Callback() {
            @Override
            public void onSuccess(String body) {
                try {
                    JSONObject json = new JSONObject(body);
                    JSONArray results = json.optJSONArray("results");
                    items.clear();
                    if (results != null) {
                        items.addAll(MovieContent.fromJsonArray(results));
                    }
                    
                    // Update UI on main thread
                    if (getActivity() != null) {
                        getActivity().runOnUiThread(() -> {
                            adapter.notifyDataSetChanged();
                            Log.d(TAG, "Movies loaded ✓ count=" + items.size());
                            
                            if (items.isEmpty()) {
                                Toast.makeText(requireContext(), getString(R.string.empty_movies_message), Toast.LENGTH_SHORT).show();
                            }
                            setLoading(false);
                        });
                    }
                } catch (Exception e) {
                    Log.e(TAG, "Parse error (movies)", e);
                    if (getActivity() != null) {
                        getActivity().runOnUiThread(() -> {
                            Toast.makeText(requireContext(), getString(R.string.error_load_content), Toast.LENGTH_SHORT).show();
                            setLoading(false);
                        });
                    }
                }
            }

            @Override
            public void onError(IOException e) {
                Log.e(TAG, "Network error (movies)", e);
                if (getActivity() != null) {
                    getActivity().runOnUiThread(() -> {
                        setLoading(false);
                        Toast.makeText(requireContext(), getString(R.string.error_load_content), Toast.LENGTH_SHORT).show();
                    });
                }
            }
        });
    }
}
</file>

<file path="app/src/main/res/values/strings.xml">
<?xml version="1.0" encoding="utf-8"?>
<resources>
    <string name="app_name">Fludde</string>

    <!-- Navigation -->
    <string name="nav_home">Home</string>
    <string name="nav_timeline">Timeline</string>
    <string name="nav_compose">Compose</string>
    <string name="nav_search">Search</string>
    <string name="nav_profile">Profile</string>

    <!-- Actions -->
    <string name="action_login">Log in</string>
    <string name="action_logout">Log out</string>
    <string name="action_signup">Sign up</string>
    <string name="action_cancel">Cancel</string>
    <string name="action_retry">Retry</string>
    <string name="action_try_again">Try again</string>
    <string name="action_edit_profile">Edit profile</string>
    <string name="action_search">Search</string>

    <!-- Labels & hints -->
    <string name="label_username">Username</string>
    <string name="label_password">Password</string>
    <string name="label_email">Email</string>
    <string name="label_title">Title</string>
    <string name="label_category">Category</string>
    <string name="label_review">Review</string>

    <string name="hint_username">Enter your username</string>
    <string name="hint_password">Enter your password</string>
    <string name="hint_email">Enter your email</string>
    <string name="hint_search_user">Search for a user</string>
    <string name="hint_content_description">Add a short description</string>
    <string name="hint_review">Share what you think</string>

    <!-- Content descriptions -->
    <string name="cd_user_avatar">User avatar</string>
    <string name="cd_profile_picture">Profile picture</string>
    <string name="cd_content_image">Content image</string>
    <string name="cd_movie_poster">Movie poster</string>
    <string name="cd_book_cover">Book cover</string>
    <string name="cd_album_cover">Album cover</string>
    <string name="cd_nav_home">Home</string>
    <string name="cd_nav_timeline">Timeline</string>
    <string name="cd_nav_compose">Compose</string>
    <string name="cd_nav_search">Search</string>
    <string name="cd_nav_profile">Profile</string>
    <string name="cd_logout">Log out</string>
    <string name="cd_loading">Loading</string>

    <!-- Loading -->
    <string name="loading_generic">Loading…</string>
    <string name="loading_feed">Loading posts…</string>
    <string name="loading_content">Loading content…</string>

    <!-- Empty states -->
    <string name="empty_feed_title">No posts yet</string>
    <string name="empty_feed_message">Follow people to see posts here.</string>

    <string name="empty_profile_title">No posts yet</string>
    <string name="empty_profile_message">Create your first post.</string>

    <string name="empty_search_title">No users found</string>
    <string name="empty_search_message">Try a different name.</string>

    <string name="empty_movies_title">No movies right now</string>
    <string name="empty_movies_message">Check back later for trending picks.</string>

    <string name="empty_books_title">No books right now</string>
    <string name="empty_books_message">Try again in a bit.</string>

    <string name="empty_music_title">No music right now</string>
    <string name="empty_music_message">Try again in a bit.</string>

    <!-- Errors -->
    <string name="error_generic">Something went wrong.</string>
    <string name="error_network">You\'re offline.</string>
    <string name="error_timeout">This is taking too long.</string>
    <string name="error_api_limit">Service is busy. Try again later.</string>
    <string name="error_load_profile">Couldn\'t load profile.</string>
    <string name="error_load_feed">Couldn\'t load posts.</string>
    <string name="error_load_content">Couldn\'t load content.</string>
    <string name="error_search">Couldn\'t search right now.</string>
    <string name="error_required_fields">Please fill in all fields.</string>
    <string name="error_incorrect_login">Incorrect username or password.</string>
    <string name="error_auth_required">Sign in to continue.</string>

    <!-- NEW: Authentication errors (for Login/Signup) -->
    <string name="error_login_empty_fields">Please enter both username and password</string>
    <string name="error_login_failed">Login failed. Incorrect username or password.</string>
    <string name="error_signup_empty_fields">Please fill in all fields</string>
    <string name="error_signup_failed">Signup failed. Username already taken.</string>
    <string name="error_signup_generic">An error occurred during signup. Please try again.</string>
    <string name="error_login_generic">An error occurred during login. Please try again.</string>
    <string name="error_navigation">An error occurred while navigating to the main screen.</string>

    <!-- NEW: Content selection messages -->
    <string name="content_selected_movies">You selected Movies</string>
    <string name="content_selected_books">You selected Books</string>
    <string name="content_selected_music">You selected Music</string>

    <!-- NEW: API error messages -->
    <string name="api_error_status_code">API request failed with status code: %d</string>
    <string name="api_error_no_throwable">API request failed with status code: %d (no throwable provided)</string>
    <string name="api_error_message">Error message: %s</string>
    <string name="api_request_failed" formatted="false">HTTP %d %s</string>
    <string name="api_request_build_error">Request build error</string>

    <!-- Plurals -->
    <plurals name="search_results_count">
        <item quantity="one">%d result</item>
        <item quantity="other">%d results</item>
    </plurals>

    <!-- Samples -->
    <string name="johndoe2016" translatable="false">johndoe2016</string>
    <string name="johndoe_youknow_com" translatable="false">johndoe@youknow.com</string>
    
    <!-- Back4App / Parse credentials -->
    <string name="back4app_app_id">PASTE_YOUR_APP_ID_HERE</string>
    <string name="back4app_client_key">PASTE_YOUR_CLIENT_KEY_HERE</string>
    <!-- IMPORTANT: must be a full URL with protocol -->
    <string name="back4app_server_url">https://parseapi.back4app.com/</string>

    <!-- UI text used by the inline error block (fragment_home.xml) -->
    <string name="generic_error_title">Something went wrong</string>
    <string name="generic_error_message">We couldn\'t load the feed. Please try again.</string>
    <string name="retry">Retry</string>

    <!-- Log tags (for consistency) -->
    <string name="log_tag_api_utils" translatable="false">ApiUtils</string>
    <string name="log_tag_login" translatable="false">LoginActivity</string>
    <string name="log_tag_signup" translatable="false">SignupActivity</string>
    <string name="log_tag_error_handler" translatable="false">ErrorHandler</string>
</resources>
</file>

<file path="app/src/main/java/com/example/fludde/fragments/child/BookChildFragment.java">
package com.example.fludde.fragments.child;

import android.os.Bundle;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ProgressBar;
import android.widget.Toast;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.fragment.app.Fragment;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.LinearSnapHelper;
import androidx.recyclerview.widget.RecyclerView;

import com.example.fludde.BuildConfig;
import com.example.fludde.R;
import com.example.fludde.adapters.BookChildAdapter;
import com.example.fludde.model.BooksContent;
import com.example.fludde.utils.ApiUtils;
import com.example.fludde.utils.ErrorHandler;
import com.example.fludde.utils.MockData;
import com.example.fludde.utils.SpacesItemDecoration;

import org.json.JSONArray;
import org.json.JSONObject;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/** Horizontal books carousel (Google Books). */
public class BookChildFragment extends Fragment {

    private static final String TAG = "BookChildFragment";
    private static final String BOOKS_URL =
            "https://www.googleapis.com/books/v1/volumes?q=miami&maxResults=25";

    private RecyclerView rv;
    private ProgressBar progress;

    private final List<BooksContent> items = new ArrayList<>();
    private BookChildAdapter adapter;

    @Nullable
    @Override
    public View onCreateView(@NonNull LayoutInflater inflater,
                             @Nullable ViewGroup container,
                             @Nullable Bundle savedInstanceState) {
        return inflater.inflate(R.layout.fragment_child_book, container, false);
    }

    @Override
    public void onViewCreated(@NonNull View v, @Nullable Bundle savedInstanceState) {
        super.onViewCreated(v, savedInstanceState);

        rv = v.findViewById(R.id.rvBookHorizontalView);
        progress = v.findViewById(R.id.progressBar);

        rv.setLayoutManager(new LinearLayoutManager(requireContext(), LinearLayoutManager.HORIZONTAL, false));
        adapter = new BookChildAdapter(requireContext(), items, new BookChildAdapter.OnBookContentListener() {
            @Override public void onBookContentClick(int position) {}
            @Override public void onBookContentLongClick(int position) {}
        });
        rv.setAdapter(adapter);

        // carousel affordance
        final int itemSpace = getResources().getDimensionPixelSize(R.dimen.space_12);
        final int edgePeek = getResources().getDimensionPixelSize(R.dimen.space_24);
        rv.setClipToPadding(false);
        rv.setPadding(edgePeek, 0, edgePeek, 0);
        rv.addItemDecoration(new SpacesItemDecoration(itemSpace));
        new LinearSnapHelper().attachToRecyclerView(rv);

        fetchBooks();
    }

    private void setLoading(boolean show) {
        if (progress != null) progress.setVisibility(show ? View.VISIBLE : View.GONE);
        if (rv != null) rv.setAlpha(show ? 0.3f : 1f);
    }

    private void fetchBooks() {
        setLoading(true);

        if (BuildConfig.MOCK_MODE) {
            try {
                JSONObject mock = MockData.googleBooksJson();
                JSONArray arr = mock.optJSONArray("items");
                items.clear();
                if (arr != null) {
                    items.addAll(BooksContent.fromGoogleBooks(arr));
                }
                adapter.notifyDataSetChanged();
                if (items.isEmpty()) {
                    Toast.makeText(requireContext(), getString(R.string.empty_books_message), Toast.LENGTH_SHORT).show();
                }
            } catch (Exception e) {
                Log.e(TAG, "Mock books parse error", e);
                ErrorHandler.showToast(requireContext(), R.string.error_load_content);
            } finally {
                setLoading(false);
            }
            return;
        }

        Log.d(TAG, "Fetching books: " + BOOKS_URL);

        ApiUtils.get(BOOKS_URL, new ApiUtils.Callback() {
            @Override public void onSuccess(String body) {
                try {
                    JSONObject response = new JSONObject(body);
                    JSONArray arr = response.optJSONArray("items");
                    items.clear();
                    if (arr != null) {
                        items.addAll(BooksContent.fromGoogleBooks(arr));
                    }
                    requireActivity().runOnUiThread(() -> {
                        adapter.notifyDataSetChanged();
                        if (items.isEmpty()) {
                            ErrorHandler.showToast(requireContext(), R.string.empty_books_message);
                        }
                        setLoading(false);
                    });
                } catch (Exception e) {
                    Log.e(TAG, "Parse error (books)", e);
                    requireActivity().runOnUiThread(() -> {
                        ErrorHandler.showToast(requireContext(), R.string.error_load_content);
                        setLoading(false);
                    });
                }
            }

            @Override public void onError(IOException e) {
                Log.e(TAG, "Network error (books)", e);
                requireActivity().runOnUiThread(() -> {
                    ErrorHandler.showNetworkError(requireContext(), R.string.error_load_content);
                    setLoading(false);
                });
            }
        });
    }
}
</file>

<file path="app/src/main/java/com/example/fludde/fragments/HomeFragment.java">
package com.example.fludde.fragments;

import android.os.Bundle;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.TextView;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.fragment.app.Fragment;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;

import com.example.fludde.BuildConfig;
import com.example.fludde.R;
import com.example.fludde.adapters.PostAdapter;
import com.example.fludde.model.PostUi;
import com.example.fludde.utils.MockData;

import java.util.ArrayList;
import java.util.List;

/** Home shows a friendly feed. In MOCK_MODE we always show canned posts. */
public class HomeFragment extends Fragment {

    private RecyclerView rv;
    private View errorCard;
    private TextView tvError;
    private Button btnRetry;

    private final List<PostUi> items = new ArrayList<>();
    private PostAdapter adapter;

    @Nullable @Override
    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
        return inflater.inflate(R.layout.fragment_home, container, false);
    }

    @Override
    public void onViewCreated(@NonNull View v, @Nullable Bundle savedInstanceState) {
        super.onViewCreated(v, savedInstanceState);

        rv = v.findViewById(R.id.rvHomeFeed);
        errorCard = v.findViewById(R.id.inlineError);
        tvError = errorCard != null ? errorCard.findViewById(R.id.tvErrorMessage) : null;
        btnRetry = errorCard != null ? errorCard.findViewById(R.id.btnRetry) : null;

        adapter = new PostAdapter(requireContext(), items);
        rv.setLayoutManager(new LinearLayoutManager(getContext()));
        rv.setAdapter(adapter);

        if (btnRetry != null) btnRetry.setOnClickListener(view -> load());

        load();
    }

    private void showError(boolean show, @Nullable String msg) {
        if (errorCard != null) errorCard.setVisibility(show ? View.VISIBLE : View.GONE);
        if (show && tvError != null) tvError.setText(msg == null ? getString(R.string.generic_error_message) : msg);
    }

    private void load() {
        showError(false, null);
        items.clear();

        // Always show something in debug: mock posts
        if (BuildConfig.MOCK_MODE) {
            items.addAll(MockData.mockPosts());
            adapter.notifyDataSetChanged();
            return;
        }

        // (Non-mock path could query a backend; for now just surface empty state)
        showError(true, getString(R.string.empty_profile_message));
        adapter.notifyDataSetChanged();
    }
}
</file>

<file path="app/src/main/java/com/example/fludde/model/BooksContent.java">
package com.example.fludde.model;

import org.json.JSONArray;
import org.json.JSONObject;

import java.util.ArrayList;
import java.util.List;

/**
 * Minimal model for Google Books "volumes" response used by the carousel.
 */
public class BooksContent {
    private final String title;
    private final String imageURL;

    public BooksContent(String title, String imageURL) {
        this.title = title != null ? title : "";
        this.imageURL = imageURL;
    }

    public String getTitle() { return title; }
    public String getImageURL() { return imageURL; }

    /**
     * Parse a Google Books "items" array.
     */
    public static List<BooksContent> fromGoogleBooks(JSONArray items) {
        List<BooksContent> out = new ArrayList<>();
        if (items == null) return out;

        for (int i = 0; i < items.length(); i++) {
            try {
                JSONObject item = items.optJSONObject(i);
                if (item == null) continue;
                JSONObject vol = item.optJSONObject("volumeInfo");
                if (vol == null) continue;

                String title = vol.optString("title", "");
                String thumb = null;
                JSONObject imgs = vol.optJSONObject("imageLinks");
                if (imgs != null) {
                    // Prefer medium/thumbnail if available
                    thumb = coalesce(
                            imgs.optString("medium", null),
                            imgs.optString("thumbnail", null),
                            imgs.optString("smallThumbnail", null)
                    );
                    // Normalize http → https for mixed content issues
                    if (thumb != null && thumb.startsWith("http://")) {
                        thumb = "https://" + thumb.substring("http://".length());
                    }
                }
                out.add(new BooksContent(title, thumb));
            } catch (Exception ignore) { }
        }
        return out;
    }

    private static String coalesce(String a, String b, String c) {
        return a != null ? a : (b != null ? b : c);
    }
}
</file>

<file path="app/src/main/java/com/example/fludde/MainActivity.java">
package com.example.fludde;

import android.content.Intent;
import android.os.Bundle;
import android.util.Log;

import androidx.annotation.NonNull;
import androidx.appcompat.app.AppCompatActivity;
import androidx.fragment.app.Fragment;

import com.example.fludde.fragments.ComposeParentFragment;
import com.example.fludde.fragments.HomeFragment;
import com.example.fludde.fragments.PostFragment;
import com.example.fludde.fragments.ProfileFragment;
import com.example.fludde.fragments.SearchFragment;
import com.example.fludde.utils.InsetsUtils;
import com.example.fludde.utils.MockSessionManager;
import com.google.android.material.bottomnavigation.BottomNavigationView;
import com.parse.ParseUser;

/**
 * Main Activity with session verification.
 * 
 * Features:
 * - Session check on startup
 * - Redirects to login if not authenticated
 * - Bottom navigation for app sections
 * - Supports both mock and real Parse authentication
 */
public class MainActivity extends AppCompatActivity {

    private static final String TAG = "MainActivity";
    private BottomNavigationView bottomNavigation;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        
        // 🔒 SESSION CHECK: Verify user is logged in
        if (!isUserLoggedIn()) {
            Log.w(TAG, "No valid session found, redirecting to login");
            redirectToLogin();
            return;
        }
        
        setContentView(R.layout.activity_main);

        bottomNavigation = findViewById(R.id.bottomNavigation);
        InsetsUtils.applyEdgeToEdge(this, findViewById(R.id.flContainer), bottomNavigation);

        bottomNavigation.setOnItemSelectedListener(item -> {
            Fragment f;
            int id = item.getItemId();
            if (id == R.id.action_home) {
                f = new HomeFragment();                         // Home
            } else if (id == R.id.action_feed) {
                f = new PostFragment();                          // Timeline
            } else if (id == R.id.action_compose) {
                f = new ComposeParentFragment();                 // Compose
            } else if (id == R.id.action_search) {
                f = new SearchFragment();                        // Search
            } else { // R.id.action_profile
                f = new ProfileFragment();                       // Profile
            }
            getSupportFragmentManager()
                    .beginTransaction()
                    .replace(R.id.flContainer, f)
                    .commit();
            return true;
        });

        // Set default fragment (Home)
        bottomNavigation.setSelectedItemId(R.id.action_home);
    }

    /**
     * 🔒 Check if user is logged in.
     * Handles both mock mode and real Parse authentication.
     * 
     * @return true if user is logged in, false otherwise
     */
    private boolean isUserLoggedIn() {
        if (BuildConfig.MOCK_MODE) {
            // Check mock session
            boolean isLoggedIn = MockSessionManager.isLoggedIn(this);
            if (isLoggedIn) {
                Log.d(TAG, "Valid mock session found for user: " + MockSessionManager.getCurrentUsername(this));
            }
            return isLoggedIn;
        } else {
            // Check Parse session
            ParseUser currentUser = ParseUser.getCurrentUser();
            if (currentUser != null) {
                Log.d(TAG, "Valid Parse session found for user: " + currentUser.getUsername());
                return true;
            }
            return false;
        }
    }

    /**
     * Redirects to login activity when no valid session is found.
     * Clears the back stack to prevent returning to MainActivity.
     */
    private void redirectToLogin() {
        Intent intent = new Intent(this, LoginActivity.class);
        intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK);
        startActivity(intent);
        finish();
    }
}
</file>

<file path="app/build.gradle">
plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
}

// Load secrets from local.properties (not checked into version control)
def localProps = new Properties()
def localPropsFile = rootProject.file("local.properties")
if (localPropsFile.canRead()) {
    localProps.load(new FileInputStream(localPropsFile))
}

// TMDB API credentials
def TMDB_API_KEY = localProps.getProperty("TMDB_API_KEY", "")
def TMDB_BEARER  = localProps.getProperty("TMDB_BEARER", "")

// Back4App/Parse credentials
def BACK4APP_APP_ID = localProps.getProperty("BACK4APP_APP_ID", "")
def BACK4APP_CLIENT_KEY = localProps.getProperty("BACK4APP_CLIENT_KEY", "")
def BACK4APP_SERVER_URL = localProps.getProperty("BACK4APP_SERVER_URL", "https://parseapi.back4app.com/")

android {
    namespace 'com.example.fludde'
    compileSdk 34

    defaultConfig {
        applicationId "com.example.fludde"
        minSdk 24
        targetSdk 34
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        // Expose secrets safely to code via BuildConfig fields
        buildConfigField "String",  "TMDB_API_KEY", "\"${TMDB_API_KEY}\""
        buildConfigField "String",  "TMDB_BEARER",  "\"${TMDB_BEARER}\""
        buildConfigField "String",  "BACK4APP_APP_ID", "\"${BACK4APP_APP_ID}\""
        buildConfigField "String",  "BACK4APP_CLIENT_KEY", "\"${BACK4APP_CLIENT_KEY}\""
        buildConfigField "String",  "BACK4APP_SERVER_URL", "\"${BACK4APP_SERVER_URL}\""
        buildConfigField "boolean", "MOCK_MODE",    "false"
    }

    buildFeatures {
        buildConfig = true
    }

    buildTypes {
        debug {
            // Set to true if you want to force mock data in debug
            buildConfigField "boolean", "MOCK_MODE", "false"
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            buildConfigField "boolean", "MOCK_MODE", "false"
        }
        // Optional flavor for explicit mocking
        create("mock") {
            initWith debug
            matchingFallbacks = ['debug']
            applicationIdSuffix ".mock"
            versionNameSuffix "-mock"
            buildConfigField "boolean", "MOCK_MODE", "true"
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    kotlinOptions {
        jvmTarget = '17'
    }
}

dependencies {
    implementation 'androidx.core:core-ktx:1.13.1'
    implementation 'androidx.appcompat:appcompat:1.7.0'
    implementation 'com.google.android.material:material:1.12.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'

    // Networking (used by ApiUtils)
    implementation 'com.squareup.okhttp3:okhttp:4.12.0'

    // Parse (remove if you're not using Parse)
    implementation 'com.github.parse-community.Parse-SDK-Android:parse:3.0.0'

    // ✅ ADDED - Android Async HTTP (used in fragments)
    implementation 'com.loopj.android:android-async-http:1.4.11'

    // ✅ ADDED - Shimmer effect (used in PostFragment)
    implementation 'com.facebook.shimmer:shimmer:0.5.0'

    // ✅ ADDED - Glide for image loading
    implementation 'com.github.bumptech.glide:glide:4.16.0'
    annotationProcessor 'com.github.bumptech.glide:compiler:4.16.0'

    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.2.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.6.1'
}
</file>

<file path="README.md">
# Fludde

## Table of Contents
1. [Overview](#Overview)
2. [Features](#Features)
3. [Installation](#Installation)
4. [Usage](#Usage)
5. [Schema](#Schema)
6. [Wireframes](#Wireframes)

## Overview

### Description

Fludde is a social platform that allows users to share and review various forms of content, such as books, music, and movies. Users can follow others, create posts, and view a personalized timeline filled with reviews from the users they follow. The platform integrates with various APIs to enhance the multimedia experience.

### App Evaluation
- **Category:** Social Networking 
- **Platform:** Mobile-first experience, primarily for Android.
- **Purpose:** To provide users with a space to share their opinions on different types of content and explore reviews from their network.
- **Target Audience:** Anyone interested in sharing their thoughts on content and discovering reviews from others.
- **Scope:** Initially focusing on movies, music, and books, with potential expansion to other forms of media like TV shows, comics, and video games.

## Features

### Core Features

- User Registration: Users can sign up and create an account.
- User Authentication: Users can log in and out of their accounts securely.
- Home Timeline: Users can view a feed of reviews from the people they follow.
- Content Search: Users can search for content or other users.
- User Profiles: Users can view their own profile, which includes all their reviews.
- Review Creation: Users can create and share reviews of content, categorized by type (e.g., movie, music, book).

### Future Enhancements

- Content Information: Users can view additional information about the content in reviews.
- Favorite Content: Users can favorite content for quick access later.
- Social Sharing: Users can reshare reviews, similar to a retweet.
- Advanced Search: Users can search specifically for reviews or detailed content information (e.g., trailers, descriptions).

## Installation

### Prerequisites

- Android Studio
- A configured Android device or emulator

### Setup

1. **Clone the Repository:**

   ```bash
   git clone https://github.com/josuejero/Fludde.git
   ```

2. **Navigate to the Project Directory:**

   ```bash
   cd fludde
   ```

3. **Configure API Keys:**

   Create a file named `apikey.properties` in the root of the project and add your API keys:

   ```
   NY_TIMES_API_KEY=your-nytimes-api-key-here
   SPOTIFY_KEY=your-spotify-api-key-here
   TMDB_API_KEY=your-tmdb-api-key-here
   ```

4. **Open the Project in Android Studio:**

   Open Android Studio, then go to `File > Open` and select the `fludde` directory.

5. **Build and Run:**

   Build and run the app on your device or emulator by clicking the "Run" button in Android Studio.

## Usage

Once the app is running, you can:

- **Sign Up or Log In:** Create an account or log in to your existing account.
- **View Timeline:** Explore the timeline filled with reviews from users you follow.
- **Search Content:** Search for specific content or users to see their reviews.
- **Create Reviews:** Share your thoughts on movies, music, or books.

## Schema

### Models

#### Post

| Property     | Type            | Description                                      |
| ------------ | --------------- | ------------------------------------------------ |
| `objectId`   | String          | Unique id for the post (default field)           |
| `author`     | Pointer to User | The user who created the review                  |
| `createdAt`  | DateTime        | Date when the post was created (default field)   |
| `description`| String          | Description or title of the content              |
| `review`     | String          | Review text authored by the user                 |
| `category`   | String          | Type of content (e.g., movie, book, music)       |

### Networking

#### Login Screen
- **GET**: Verify if the user is already logged in.
  ```java
  if (ParseUser.getCurrentUser() != null) {
      goMainActivity();
  }
  ```

- **POST**: Authenticate user credentials.
  ```java
  ParseUser.logInInBackground(username, password, new LogInCallback() {
      @Override
      public void done(ParseUser user, ParseException e) {
          if (e != null) {

          } else {

          }
      }
  });
  ```

#### SignUp Screen
- **POST**: Create a new user account.
  ```java
  newUser.setUsername(userName);
  newUser.setEmail(userEmail);
  newUser.setPassword(userPass);

  newUser.signUpInBackground(new SignUpCallback() {
      @Override
      public void done(ParseException e) {
          if (e != null) {

          } else {

          }
      }
  });
  ```

#### Home Timeline Screen
- **GET**: Fetch posts from users the current user follows.
- **POST**: Create a new post with a review and rating.

#### Search Screen
- **GET**: Search for users or reviews based on content or categories.

#### User Profile Screen
- **GET**: Fetch all posts created by the user.
- **POST**: Create a new post directly from the profile.

## Wireframes
<img src="https://i.imgur.com/BNGuswR.jpg" width=600>


This is the current status of the app. The content information is available when making the review.



---

## Contributing

Fludde is an open-source project and contributions are welcome! Whether it's bug fixes, feature requests, or improvements, feel free to open an issue or submit a pull request.

## License

This project is licensed under the MIT License. See the [LICENSE](LICENSE) file for more details.
</file>

</files>
