plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
}

// Load secrets from local.properties (not checked into version control)
def localProps = new Properties()
def localPropsFile = rootProject.file("local.properties")
if (localPropsFile.canRead()) {
    localProps.load(new FileInputStream(localPropsFile))
}

// TMDB API credentials
def TMDB_API_KEY = localProps.getProperty("TMDB_API_KEY", "")
def TMDB_BEARER  = localProps.getProperty("TMDB_BEARER", "")

// Back4App/Parse credentials
def BACK4APP_APP_ID = localProps.getProperty("BACK4APP_APP_ID", "")
def BACK4APP_CLIENT_KEY = localProps.getProperty("BACK4APP_CLIENT_KEY", "")
def BACK4APP_SERVER_URL = localProps.getProperty("BACK4APP_SERVER_URL", "https://parseapi.back4app.com/")

android {
    namespace 'com.example.fludde'
    compileSdk 34

    defaultConfig {
        applicationId "com.example.fludde"
        minSdk 24
        targetSdk 34
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        // Expose secrets safely to code via BuildConfig fields
        buildConfigField "String",  "TMDB_API_KEY", "\"${TMDB_API_KEY}\""
        buildConfigField "String",  "TMDB_BEARER",  "\"${TMDB_BEARER}\""
        buildConfigField "String",  "BACK4APP_APP_ID", "\"${BACK4APP_APP_ID}\""
        buildConfigField "String",  "BACK4APP_CLIENT_KEY", "\"${BACK4APP_CLIENT_KEY}\""
        buildConfigField "String",  "BACK4APP_SERVER_URL", "\"${BACK4APP_SERVER_URL}\""
        buildConfigField "boolean", "MOCK_MODE",    "false"
    }

    buildFeatures {
        buildConfig = true
    }

    buildTypes {
        debug {
            // Set to true if you want to force mock data in debug
            buildConfigField "boolean", "MOCK_MODE", "true"
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            buildConfigField "boolean", "MOCK_MODE", "false"
        }
        // Optional flavor for explicit mocking
        create("mock") {
            initWith debug
            matchingFallbacks = ['debug']
            applicationIdSuffix ".mock"
            versionNameSuffix "-mock"
            buildConfigField "boolean", "MOCK_MODE", "true"
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    kotlinOptions {
        jvmTarget = '17'
    }
}

dependencies {
    implementation 'androidx.core:core-ktx:1.13.1'
    implementation 'androidx.appcompat:appcompat:1.7.0'
    implementation 'com.google.android.material:material:1.12.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'

    // Networking (used by ApiUtils)
    implementation 'com.squareup.okhttp3:okhttp:4.12.0'

    // Parse (remove if you're not using Parse)
    implementation 'com.github.parse-community.Parse-SDK-Android:parse:3.0.0'

    // ✅ ADDED - Android Async HTTP (used in fragments)
    implementation 'com.loopj.android:android-async-http:1.4.11'

    // ✅ ADDED - Shimmer effect (used in PostFragment)
    implementation 'com.facebook.shimmer:shimmer:0.5.0'

    // ✅ ADDED - Glide for image loading
    implementation 'com.github.bumptech.glide:glide:4.16.0'
    annotationProcessor 'com.github.bumptech.glide:compiler:4.16.0'

    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.2.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.6.1'
}